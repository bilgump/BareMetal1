
BareMetal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800c238  0800c238  0000d238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c60c  0800c60c  0000e2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c60c  0800c60c  0000d60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c614  0800c614  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c614  0800c614  0000d614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c618  0800c618  0000d618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c61c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001eec  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200021b0  200021b0  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172a8  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041fe  00000000  00000000  0002559c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  000297a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff7  00000000  00000000  0002acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026975  00000000  00000000  0002bcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7f2  00000000  00000000  0005262c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbde5  00000000  00000000  0006de1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149c03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006600  00000000  00000000  00149c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00150248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c21c 	.word	0x0800c21c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c21c 	.word	0x0800c21c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <enterStop>:
}state_te;

static state_te st = ST_RUN;

static void enterStop(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2); 	//Pause LED timer
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <enterStop+0x28>)
 8000eda:	f004 f8a9 	bl	8005030 <HAL_TIM_Base_Stop_IT>
	HAL_SuspendTick();				//stop SysTick so it won't wake us
 8000ede:	f000 fd3b 	bl	8001958 <HAL_SuspendTick>

	//Enter STOP with main regulator ON, wake on any EXTI
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f003 fb43 	bl	8004570 <HAL_PWR_EnterSTOPMode>

	//MCU Wakes here
	SystemClock_Config();	//Re-enable PLLS
 8000eea:	f000 f853 	bl	8000f94 <SystemClock_Config>
	HAL_ResumeTick();
 8000eee:	f000 fd43 	bl	8001978 <HAL_ResumeTick>
	HAL_TIM_Base_Start_IT(&htim2);
 8000ef2:	4802      	ldr	r0, [pc, #8]	@ (8000efc <enterStop+0x28>)
 8000ef4:	f004 f82c 	bl	8004f50 <HAL_TIM_Base_Start_IT>
	//st = ST_RUN;
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000038c 	.word	0x2000038c

08000f00 <fsmEventButton>:

void fsmEventButton(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	st = (st == ST_RUN) ? ST_STOP : ST_RUN;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <fsmEventButton+0x24>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <fsmEventButton+0x24>)
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200002e0 	.word	0x200002e0

08000f28 <fsmRun>:

void fsmRun(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	if(st == ST_STOP){
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <fsmRun+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d104      	bne.n	8000f3e <fsmRun+0x16>
		st = ST_RUN; //Sleep once per press
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <fsmRun+0x1c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
		enterStop();
 8000f3a:	f7ff ffcb 	bl	8000ed4 <enterStop>
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002e0 	.word	0x200002e0

08000f48 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4c:	f000 fc6e 	bl	800182c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f50:	f000 f820 	bl	8000f94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f54:	f000 f948 	bl	80011e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f58:	f000 f926 	bl	80011a8 <MX_DMA_Init>
	MX_TIM2_Init();
 8000f5c:	f000 f8d6 	bl	800110c <MX_TIM2_Init>
	MX_ADC1_Init();
 8000f60:	f000 f882 	bl	8001068 <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 8000f64:	f007 ff80 	bl	8008e68 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000f68:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <main+0x40>)
 8000f6a:	f003 fff1 	bl	8004f50 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, sizeof(adcBuf) / 2);
 8000f6e:	2240      	movs	r2, #64	@ 0x40
 8000f70:	4906      	ldr	r1, [pc, #24]	@ (8000f8c <main+0x44>)
 8000f72:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <main+0x48>)
 8000f74:	f000 fe64 	bl	8001c40 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		schedulerRun();
 8000f78:	f000 f9e0 	bl	800133c <schedulerRun>
		fsmRun();
 8000f7c:	f7ff ffd4 	bl	8000f28 <fsmRun>
		__WFI();                    // Wait-For-Interrupt (optional)
 8000f80:	bf30      	wfi
		schedulerRun();
 8000f82:	bf00      	nop
 8000f84:	e7f8      	b.n	8000f78 <main+0x30>
 8000f86:	bf00      	nop
 8000f88:	2000038c 	.word	0x2000038c
 8000f8c:	200003d4 	.word	0x200003d4
 8000f90:	200002e4 	.word	0x200002e4

08000f94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	@ 0x50
 8000f98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	@ 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f009 fa13 	bl	800a3ce <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <SystemClock_Config+0xcc>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <SystemClock_Config+0xd0>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <SystemClock_Config+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001004:	2308      	movs	r3, #8
 8001006:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001008:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800100c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100e:	2302      	movs	r3, #2
 8001010:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001012:	2307      	movs	r3, #7
 8001014:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fad8 	bl	80045d0 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001026:	f000 f983 	bl	8001330 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2302      	movs	r3, #2
 8001030:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001036:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800103a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001040:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2105      	movs	r1, #5
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fd39 	bl	8004ac0 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001054:	f000 f96c 	bl	8001330 <Error_Handler>
	}
}
 8001058:	bf00      	nop
 800105a:	3750      	adds	r7, #80	@ 0x50
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_ADC1_Init+0x98>)
 800107c:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <MX_ADC1_Init+0x9c>)
 800107e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_ADC1_Init+0x98>)
 8001082:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001086:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_ADC1_Init+0x98>)
 8001096:	2201      	movs	r2, #1
 8001098:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010aa:	4a17      	ldr	r2, [pc, #92]	@ (8001108 <MX_ADC1_Init+0xa0>)
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	480d      	ldr	r0, [pc, #52]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010ca:	f000 fc65 	bl	8001998 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80010d4:	f000 f92c 	bl	8001330 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010d8:	2310      	movs	r3, #16
 80010da:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010e0:	2307      	movs	r3, #7
 80010e2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_ADC1_Init+0x98>)
 80010ea:	f000 fedb 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80010f4:	f000 f91c 	bl	8001330 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200002e4 	.word	0x200002e4
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_TIM2_Init+0x98>)
 800112a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8399;
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_TIM2_Init+0x98>)
 8001132:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001136:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_TIM2_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999;
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_TIM2_Init+0x98>)
 8001140:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001144:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_TIM2_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_TIM2_Init+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001152:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <MX_TIM2_Init+0x98>)
 8001154:	f003 feac 	bl	8004eb0 <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 800115e:	f000 f8e7 	bl	8001330 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001166:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <MX_TIM2_Init+0x98>)
 8001170:	f004 f87d 	bl	800526e <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800117a:	f000 f8d9 	bl	8001330 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	@ (80011a4 <MX_TIM2_Init+0x98>)
 800118c:	f004 fa9e 	bl	80056cc <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001196:	f000 f8cb 	bl	8001330 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000038c 	.word	0x2000038c

080011a8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <MX_DMA_Init+0x3c>)
 80011b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_DMA_Init+0x3c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2038      	movs	r0, #56	@ 0x38
 80011d0:	f001 f9ed 	bl	80025ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d4:	2038      	movs	r0, #56	@ 0x38
 80011d6:	f001 fa06 	bl	80025e6 <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a28      	ldr	r2, [pc, #160]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_GPIO_Init+0xdc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	21c0      	movs	r1, #192	@ 0xc0
 8001256:	481c      	ldr	r0, [pc, #112]	@ (80012c8 <MX_GPIO_Init+0xe0>)
 8001258:	f001 feec 	bl	8003034 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Button_K1_EXT_Pin */
	GPIO_InitStruct.Pin = Button_K1_EXT_Pin;
 800125c:	2308      	movs	r3, #8
 800125e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001260:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001264:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Button_K1_EXT_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4816      	ldr	r0, [pc, #88]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001272:	f001 fd43 	bl	8002cfc <HAL_GPIO_Init>

	/*Configure GPIO pin : Button_K0_Pin */
	GPIO_InitStruct.Pin = Button_K0_Pin;
 8001276:	2310      	movs	r3, #16
 8001278:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Button_K0_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4619      	mov	r1, r3
 8001288:	4810      	ldr	r0, [pc, #64]	@ (80012cc <MX_GPIO_Init+0xe4>)
 800128a:	f001 fd37 	bl	8002cfc <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 800128e:	23c0      	movs	r3, #192	@ 0xc0
 8001290:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4619      	mov	r1, r3
 80012a4:	4808      	ldr	r0, [pc, #32]	@ (80012c8 <MX_GPIO_Init+0xe0>)
 80012a6:	f001 fd29 	bl	8002cfc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2009      	movs	r0, #9
 80012b0:	f001 f97d 	bl	80025ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012b4:	2009      	movs	r0, #9
 80012b6:	f001 f996 	bl	80025e6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)      // make sure it’s our timer
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e0:	d101      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		//HAL_GPIO_TogglePin(GPIOA, LED_1_Pin);
		blinkCB(); // flip LED
 80012e2:	f000 fa23 	bl	800172c <blinkCB>
	}
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x20>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_ADC_ConvCpltCallback+0x16>
		tempCB();
 8001302:	f000 fa1d 	bl	8001740 <tempCB>
	}
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40012000 	.word	0x40012000

08001314 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_3) //PE3
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2b08      	cmp	r3, #8
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_EXTI_Callback+0x14>
		fsmEventButton();	//flip flag
 8001324:	f7ff fdec 	bl	8000f00 <fsmEventButton>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <schedulerRun>:
	if(count < MAX_TASKS)
		tasks[count++] = task;
}

void schedulerRun(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8001342:	f000 fad9 	bl	80018f8 <HAL_GetTick>
 8001346:	6038      	str	r0, [r7, #0]

	for(uint8_t i = 0; i < count; ++i){
 8001348:	2300      	movs	r3, #0
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	e01c      	b.n	8001388 <schedulerRun+0x4c>
		if((now - tasks[i]->lastMS) >= tasks[i]->periodMS){
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4a12      	ldr	r2, [pc, #72]	@ (800139c <schedulerRun+0x60>)
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	1ad2      	subs	r2, r2, r3
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	490f      	ldr	r1, [pc, #60]	@ (800139c <schedulerRun+0x60>)
 8001360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d30b      	bcc.n	8001382 <schedulerRun+0x46>
			tasks[i]->lastMS = now;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <schedulerRun+0x60>)
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	605a      	str	r2, [r3, #4]
			tasks[i]->cb();
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4a08      	ldr	r2, [pc, #32]	@ (800139c <schedulerRun+0x60>)
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4798      	blx	r3
	for(uint8_t i = 0; i < count; ++i){
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	3301      	adds	r3, #1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <schedulerRun+0x64>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3dd      	bcc.n	800134e <schedulerRun+0x12>
		}
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000454 	.word	0x20000454
 80013a0:	20000474 	.word	0x20000474

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	@ (800149c <HAL_ADC_MspInit+0xa8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d145      	bne.n	8001492 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <HAL_ADC_MspInit+0xac>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	4a24      	ldr	r2, [pc, #144]	@ (80014a0 <HAL_ADC_MspInit+0xac>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001414:	6453      	str	r3, [r2, #68]	@ 0x44
 8001416:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <HAL_ADC_MspInit+0xac>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001424:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <HAL_ADC_MspInit+0xb4>)
 8001426:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 800143c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001440:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001448:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 800144c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001450:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001458:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001466:	480f      	ldr	r0, [pc, #60]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 8001468:	f001 f8d8 	bl	800261c <HAL_DMA_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8001472:	f7ff ff5d 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 800147a:	639a      	str	r2, [r3, #56]	@ 0x38
 800147c:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_ADC_MspInit+0xb0>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2012      	movs	r0, #18
 8001488:	f001 f891 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800148c:	2012      	movs	r0, #18
 800148e:	f001 f8aa 	bl	80025e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012000 	.word	0x40012000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	2000032c 	.word	0x2000032c
 80014a8:	40026410 	.word	0x40026410

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014bc:	d115      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201c      	movs	r0, #28
 80014e0:	f001 f865 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e4:	201c      	movs	r0, #28
 80014e6:	f001 f87e 	bl	80025e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <NMI_Handler+0x4>

08001500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <MemManage_Handler+0x4>

08001510 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <UsageFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154e:	f000 f9bf 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}

08001556 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_K1_EXT_Pin);
 800155a:	2008      	movs	r0, #8
 800155c:	f001 fd9e 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <ADC_IRQHandler+0x10>)
 800156a:	f000 fa58 	bl	8001a1e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002e4 	.word	0x200002e4

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f003 fd86 	bl	800508e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000038c 	.word	0x2000038c

0800158c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA2_Stream0_IRQHandler+0x10>)
 8001592:	f001 f949 	bl	8002828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000032c 	.word	0x2000032c

080015a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <OTG_FS_IRQHandler+0x10>)
 80015a6:	f001 fed5 	bl	8003354 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20001960 	.word	0x20001960

080015b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_kill>:

int _kill(int pid, int sig)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ce:	f008 ff51 	bl	800a474 <__errno>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2216      	movs	r2, #22
 80015d6:	601a      	str	r2, [r3, #0]
  return -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_exit>:

void _exit (int status)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffe7 	bl	80015c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f6:	bf00      	nop
 80015f8:	e7fd      	b.n	80015f6 <_exit+0x12>

080015fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e00a      	b.n	8001622 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800160c:	f3af 8000 	nop.w
 8001610:	4601      	mov	r1, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbf0      	blt.n	800160c <_read+0x12>
  }

  return len;
 800162a:	687b      	ldr	r3, [r7, #4]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165c:	605a      	str	r2, [r3, #4]
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_isatty>:

int _isatty(int file)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f008 fed2 	bl	800a474 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000478 	.word	0x20000478
 8001704:	200021b0 	.word	0x200021b0

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <blinkCB>:
#include "main.h"
#include "task_blink.h"
#include "scheduler.h"

void blinkCB(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_1_Pin);
 8001730:	2140      	movs	r1, #64	@ 0x40
 8001732:	4802      	ldr	r0, [pc, #8]	@ (800173c <blinkCB+0x10>)
 8001734:	f001 fc97 	bl	8003066 <HAL_GPIO_TogglePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000

08001740 <tempCB>:
{
    printf("T = %.1f °C\r\n", temperature);
}

void tempCB(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < sizeof(adcBuf) / 2; ++i)
 800174a:	2300      	movs	r3, #0
 800174c:	74fb      	strb	r3, [r7, #19]
 800174e:	e00a      	b.n	8001766 <tempCB+0x26>
		sum += adcBuf[i];
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <tempCB+0x84>)
 8001754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001758:	461a      	mov	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < sizeof(adcBuf) / 2; ++i)
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	3301      	adds	r3, #1
 8001764:	74fb      	strb	r3, [r7, #19]
 8001766:	7cfb      	ldrb	r3, [r7, #19]
 8001768:	2b3f      	cmp	r3, #63	@ 0x3f
 800176a:	d9f1      	bls.n	8001750 <tempCB+0x10>
	uint16_t avg = sum / sizeof(adcBuf) / 2;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	823b      	strh	r3, [r7, #16]

	/* Convert to °C  (datasheet formula) */
	float V25 = 0.76f;          // V at 25 °C
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <tempCB+0x88>)
 8001774:	60fb      	str	r3, [r7, #12]
	float AvgSlope = 0.0025f;   // V/°C
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <tempCB+0x8c>)
 8001778:	60bb      	str	r3, [r7, #8]
	float Vsense = (avg * 3.3f) / 4095.0f;
 800177a:	8a3b      	ldrh	r3, [r7, #16]
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001784:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80017d0 <tempCB+0x90>
 8001788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800178c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80017d4 <tempCB+0x94>
 8001790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001794:	edc7 7a01 	vstr	s15, [r7, #4]
	float vTemp  = ((V25 - Vsense) / AvgSlope) + 25.0f;
 8001798:	ed97 7a03 	vldr	s14, [r7, #12]
 800179c:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80017a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ac:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80017b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b4:	edc7 7a00 	vstr	s15, [r7]
	//printf("Temperature = %1.f C\r\n", vTemp);
	/* Set a watch-expression on tempC in debugger */
}
 80017b8:	bf00      	nop
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	200003d4 	.word	0x200003d4
 80017c8:	3f428f5c 	.word	0x3f428f5c
 80017cc:	3b23d70a 	.word	0x3b23d70a
 80017d0:	40533333 	.word	0x40533333
 80017d4:	457ff000 	.word	0x457ff000

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017dc:	f7ff ff94 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f008 fe3b 	bl	800a480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fb9d 	bl	8000f48 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800181c:	0800c61c 	.word	0x0800c61c
  ldr r2, =_sbss
 8001820:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001824:	200021b0 	.word	0x200021b0

08001828 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <CAN1_RX0_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 fe9f 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fda0 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 feb7 	bl	8002602 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 fe7f 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000047c 	.word	0x2000047c

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000047c 	.word	0x2000047c

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_SuspendTick+0x1c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_SuspendTick+0x1c>)
 8001962:	f023 0302 	bic.w	r3, r3, #2
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_ResumeTick+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_ResumeTick+0x1c>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e033      	b.n	8001a16 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fd1c 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019de:	f023 0302 	bic.w	r3, r3, #2
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fb7c 	bl	80020e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a06:	e001      	b.n	8001a0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d049      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0xca>
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d046      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d12b      	bne.n	8001ad8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d127      	bne.n	8001ad8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d119      	bne.n	8001ad8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0220 	bic.w	r2, r2, #32
 8001ab2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fc09 	bl	80012f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0212 	mvn.w	r2, #18
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d057      	beq.n	8001bae <HAL_ADC_IRQHandler+0x190>
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d054      	beq.n	8001bae <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d139      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b30:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d12b      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d124      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11d      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d119      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b78:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fc20 	bl	80023e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 020c 	mvn.w	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d017      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x1d6>
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d014      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10d      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f949 	bl	8001e7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0201 	mvn.w	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c02:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x218>
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d012      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c14:	f043 0202 	orr.w	r2, r3, #2
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0220 	mvn.w	r2, #32
 8001c24:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f932 	bl	8001e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0220 	mvn.w	r2, #32
 8001c34:	601a      	str	r2, [r3, #0]
  }
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Start_DMA+0x22>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e0eb      	b.n	8001e3a <HAL_ADC_Start_DMA+0x1fa>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d018      	beq.n	8001caa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c88:	4b6e      	ldr	r3, [pc, #440]	@ (8001e44 <HAL_ADC_Start_DMA+0x204>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e48 <HAL_ADC_Start_DMA+0x208>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9a      	lsrs	r2, r3, #18
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cb8:	d107      	bne.n	8001cca <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	f040 80a3 	bne.w	8001e20 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d18:	d106      	bne.n	8001d28 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f023 0206 	bic.w	r2, r3, #6
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d26:	e002      	b.n	8001d2e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d36:	4b45      	ldr	r3, [pc, #276]	@ (8001e4c <HAL_ADC_Start_DMA+0x20c>)
 8001d38:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3e:	4a44      	ldr	r2, [pc, #272]	@ (8001e50 <HAL_ADC_Start_DMA+0x210>)
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	4a43      	ldr	r2, [pc, #268]	@ (8001e54 <HAL_ADC_Start_DMA+0x214>)
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4e:	4a42      	ldr	r2, [pc, #264]	@ (8001e58 <HAL_ADC_Start_DMA+0x218>)
 8001d50:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d6a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d7a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	334c      	adds	r3, #76	@ 0x4c
 8001d86:	4619      	mov	r1, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f000 fcf4 	bl	8002778 <HAL_DMA_Start_IT>
 8001d90:	4603      	mov	r3, r0
 8001d92:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d12a      	bne.n	8001df6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2d      	ldr	r2, [pc, #180]	@ (8001e5c <HAL_ADC_Start_DMA+0x21c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d015      	beq.n	8001dd6 <HAL_ADC_Start_DMA+0x196>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <HAL_ADC_Start_DMA+0x220>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x180>
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_ADC_Start_DMA+0x20c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <HAL_ADC_Start_DMA+0x224>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d136      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_ADC_Start_DMA+0x20c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d130      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d129      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	e020      	b.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_ADC_Start_DMA+0x21c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d11b      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d114      	bne.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	e00b      	b.n	8001e38 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	40012300 	.word	0x40012300
 8001e50:	080022e1 	.word	0x080022e1
 8001e54:	0800239b 	.word	0x0800239b
 8001e58:	080023b7 	.word	0x080023b7
 8001e5c:	40012000 	.word	0x40012000
 8001e60:	40012100 	.word	0x40012100
 8001e64:	40012200 	.word	0x40012200

08001e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1c>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e105      	b.n	80020cc <HAL_ADC_ConfigChannel+0x228>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d925      	bls.n	8001f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b1e      	subs	r3, #30
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68d9      	ldr	r1, [r3, #12]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	4603      	mov	r3, r0
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4403      	add	r3, r0
 8001f0e:	3b1e      	subs	r3, #30
 8001f10:	409a      	lsls	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	e022      	b.n	8001f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	2207      	movs	r2, #7
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4403      	add	r3, r0
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d824      	bhi.n	8001fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b05      	subs	r3, #5
 8001f7c:	221f      	movs	r2, #31
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	400a      	ands	r2, r1
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b05      	subs	r3, #5
 8001fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fb2:	e04c      	b.n	800204e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d824      	bhi.n	8002006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b23      	subs	r3, #35	@ 0x23
 8001fce:	221f      	movs	r2, #31
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	400a      	ands	r2, r1
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b23      	subs	r3, #35	@ 0x23
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
 8002004:	e023      	b.n	800204e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b41      	subs	r3, #65	@ 0x41
 8002018:	221f      	movs	r2, #31
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b41      	subs	r3, #65	@ 0x41
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_ADC_ConfigChannel+0x234>)
 8002050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <HAL_ADC_ConfigChannel+0x238>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d109      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1cc>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d105      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_ADC_ConfigChannel+0x238>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d123      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x21e>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b10      	cmp	r3, #16
 8002080:	d003      	beq.n	800208a <HAL_ADC_ConfigChannel+0x1e6>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b11      	cmp	r3, #17
 8002088:	d11b      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d111      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <HAL_ADC_ConfigChannel+0x23c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_ADC_ConfigChannel+0x240>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	0c9a      	lsrs	r2, r3, #18
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020b4:	e002      	b.n	80020bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f9      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40012300 	.word	0x40012300
 80020dc:	40012000 	.word	0x40012000
 80020e0:	20000000 	.word	0x20000000
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f0:	4b79      	ldr	r3, [pc, #484]	@ (80022d8 <ADC_Init+0x1f0>)
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800211c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	021a      	lsls	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	4a58      	ldr	r2, [pc, #352]	@ (80022dc <ADC_Init+0x1f4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800218e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e00f      	b.n	80021e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0202 	bic.w	r2, r2, #2
 80021f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
 8002200:	005a      	lsls	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002222:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	3b01      	subs	r3, #1
 8002240:	035a      	lsls	r2, r3, #13
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	e007      	b.n	800225c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800225a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800226a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	3b01      	subs	r3, #1
 8002278:	051a      	lsls	r2, r3, #20
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229e:	025a      	lsls	r2, r3, #9
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	029a      	lsls	r2, r3, #10
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40012300 	.word	0x40012300
 80022dc:	0f000001 	.word	0x0f000001

080022e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d13c      	bne.n	8002374 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d12b      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d127      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	d119      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0220 	bic.w	r2, r2, #32
 8002346:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7fe ffbf 	bl	80012f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002372:	e00e      	b.n	8002392 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fd85 	bl	8001e90 <HAL_ADC_ErrorCallback>
}
 8002386:	e004      	b.n	8002392 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fd5d 	bl	8001e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f043 0204 	orr.w	r2, r3, #4
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff fd5a 	bl	8001e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	@ (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	@ (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	@ (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	@ 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff3e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff8e 	bl	80024ec <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff31 	bl	800245c <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa2 	bl	8002554 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff f966 	bl	80018f8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e099      	b.n	800276c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002658:	e00f      	b.n	800267a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265a:	f7ff f94d 	bl	80018f8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b05      	cmp	r3, #5
 8002666:	d908      	bls.n	800267a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2203      	movs	r2, #3
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e078      	b.n	800276c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e8      	bne.n	800265a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <HAL_DMA_Init+0x158>)
 8002694:	4013      	ands	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d107      	bne.n	80026e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	4313      	orrs	r3, r2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0307 	bic.w	r3, r3, #7
 80026fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	2b04      	cmp	r3, #4
 800270c:	d117      	bne.n	800273e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fa6f 	bl	8002c04 <DMA_CheckFifoParam>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2240      	movs	r2, #64	@ 0x40
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800273a:	2301      	movs	r3, #1
 800273c:	e016      	b.n	800276c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa26 	bl	8002b98 <DMA_CalcBaseAndBitshift>
 800274c:	4603      	mov	r3, r0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002754:	223f      	movs	r2, #63	@ 0x3f
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	f010803f 	.word	0xf010803f

08002778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_DMA_Start_IT+0x26>
 800279a:	2302      	movs	r3, #2
 800279c:	e040      	b.n	8002820 <HAL_DMA_Start_IT+0xa8>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d12f      	bne.n	8002812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f9b8 	bl	8002b3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	223f      	movs	r2, #63	@ 0x3f
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0216 	orr.w	r2, r2, #22
 80027e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0208 	orr.w	r2, r2, #8
 80027fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e005      	b.n	800281e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800281a:	2302      	movs	r3, #2
 800281c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002834:	4b8e      	ldr	r3, [pc, #568]	@ (8002a70 <HAL_DMA_IRQHandler+0x248>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a8e      	ldr	r2, [pc, #568]	@ (8002a74 <HAL_DMA_IRQHandler+0x24c>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0a9b      	lsrs	r3, r3, #10
 8002840:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	2208      	movs	r2, #8
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01a      	beq.n	8002894 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0204 	bic.w	r2, r2, #4
 800287a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	2208      	movs	r2, #8
 8002882:	409a      	lsls	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	2201      	movs	r2, #1
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b6:	2201      	movs	r2, #1
 80028b8:	409a      	lsls	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	f043 0202 	orr.w	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	2204      	movs	r2, #4
 80028d0:	409a      	lsls	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	2204      	movs	r2, #4
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	2210      	movs	r2, #16
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d043      	beq.n	8002998 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d03c      	beq.n	8002998 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	2210      	movs	r2, #16
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d018      	beq.n	800296a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d108      	bne.n	8002958 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d024      	beq.n	8002998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
 8002956:	e01f      	b.n	8002998 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
 8002968:	e016      	b.n	8002998 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0208 	bic.w	r2, r2, #8
 8002986:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	2220      	movs	r2, #32
 800299e:	409a      	lsls	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 808f 	beq.w	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8087 	beq.w	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	2220      	movs	r2, #32
 80029c0:	409a      	lsls	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d136      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0216 	bic.w	r2, r2, #22
 80029e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_DMA_IRQHandler+0x1da>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0208 	bic.w	r2, r2, #8
 8002a10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a16:	223f      	movs	r2, #63	@ 0x3f
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d07e      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
        }
        return;
 8002a3e:	e079      	b.n	8002b34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d031      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e02c      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
 8002a6e:	bf00      	nop
 8002a70:	20000000 	.word	0x20000000
 8002a74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d023      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
 8002a88:	e01e      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0210 	bic.w	r2, r2, #16
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d032      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d022      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2205      	movs	r2, #5
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3301      	adds	r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d307      	bcc.n	8002b10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f2      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x2cc>
 8002b0e:	e000      	b.n	8002b12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	e000      	b.n	8002b36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b34:	bf00      	nop
    }
  }
}
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b40      	cmp	r3, #64	@ 0x40
 8002b68:	d108      	bne.n	8002b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b7a:	e007      	b.n	8002b8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3b10      	subs	r3, #16
 8002ba8:	4a14      	ldr	r2, [pc, #80]	@ (8002bfc <DMA_CalcBaseAndBitshift+0x64>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bb2:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d909      	bls.n	8002bda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	1d1a      	adds	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bd8:	e007      	b.n	8002bea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	aaaaaaab 	.word	0xaaaaaaab
 8002c00:	0800c290 	.word	0x0800c290

08002c04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11f      	bne.n	8002c5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d856      	bhi.n	8002cd2 <DMA_CheckFifoParam+0xce>
 8002c24:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <DMA_CheckFifoParam+0x28>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c4f 	.word	0x08002c4f
 8002c34:	08002c3d 	.word	0x08002c3d
 8002c38:	08002cd3 	.word	0x08002cd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d046      	beq.n	8002cd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4c:	e043      	b.n	8002cd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c56:	d140      	bne.n	8002cda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5c:	e03d      	b.n	8002cda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c66:	d121      	bne.n	8002cac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d837      	bhi.n	8002cde <DMA_CheckFifoParam+0xda>
 8002c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <DMA_CheckFifoParam+0x70>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c8b 	.word	0x08002c8b
 8002c7c:	08002c85 	.word	0x08002c85
 8002c80:	08002c9d 	.word	0x08002c9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e030      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d025      	beq.n	8002ce2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9a:	e022      	b.n	8002ce2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ca4:	d11f      	bne.n	8002ce6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002caa:	e01c      	b.n	8002ce6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d903      	bls.n	8002cba <DMA_CheckFifoParam+0xb6>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d003      	beq.n	8002cc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cb8:	e018      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbe:	e015      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e00b      	b.n	8002cea <DMA_CheckFifoParam+0xe6>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e00a      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e008      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e006      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e004      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e002      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      break;   
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
    }
  } 
  
  return status; 
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	@ 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e16b      	b.n	8002ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 815a 	bne.w	8002fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b4 	beq.w	8002fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b60      	ldr	r3, [pc, #384]	@ (8003008 <HAL_GPIO_Init+0x30c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003008 <HAL_GPIO_Init+0x30c>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e92:	4b5d      	ldr	r3, [pc, #372]	@ (8003008 <HAL_GPIO_Init+0x30c>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800300c <HAL_GPIO_Init+0x310>)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	@ (8003010 <HAL_GPIO_Init+0x314>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02b      	beq.n	8002f22 <HAL_GPIO_Init+0x226>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	@ (8003014 <HAL_GPIO_Init+0x318>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d025      	beq.n	8002f1e <HAL_GPIO_Init+0x222>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	@ (8003018 <HAL_GPIO_Init+0x31c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01f      	beq.n	8002f1a <HAL_GPIO_Init+0x21e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	@ (800301c <HAL_GPIO_Init+0x320>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d019      	beq.n	8002f16 <HAL_GPIO_Init+0x21a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8003020 <HAL_GPIO_Init+0x324>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_Init+0x216>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_GPIO_Init+0x328>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00d      	beq.n	8002f0e <HAL_GPIO_Init+0x212>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_GPIO_Init+0x32c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_Init+0x20e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_GPIO_Init+0x330>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_GPIO_Init+0x20a>
 8002f02:	2307      	movs	r3, #7
 8002f04:	e00e      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f06:	2308      	movs	r3, #8
 8002f08:	e00c      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00a      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e008      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e006      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e004      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_GPIO_Init+0x228>
 8002f22:	2300      	movs	r3, #0
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f002 0203 	and.w	r2, r2, #3
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f34:	4935      	ldr	r1, [pc, #212]	@ (800300c <HAL_GPIO_Init+0x310>)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f42:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f66:	4a32      	ldr	r2, [pc, #200]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f90:	4a27      	ldr	r2, [pc, #156]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fba:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe4:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <HAL_GPIO_Init+0x334>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	f67f ae90 	bls.w	8002d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40013800 	.word	0x40013800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400
 8003018:	40020800 	.word	0x40020800
 800301c:	40020c00 	.word	0x40020c00
 8003020:	40021000 	.word	0x40021000
 8003024:	40021400 	.word	0x40021400
 8003028:	40021800 	.word	0x40021800
 800302c:	40021c00 	.word	0x40021c00
 8003030:	40013c00 	.word	0x40013c00

08003034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
 8003040:	4613      	mov	r3, r2
 8003042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003044:	787b      	ldrb	r3, [r7, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003050:	e003      	b.n	800305a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	041a      	lsls	r2, r3, #16
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	43d9      	mvns	r1, r3
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	400b      	ands	r3, r1
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	@ (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f92a 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e101      	b.n	80032e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f006 f8f9 	bl	80092f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2203      	movs	r2, #3
 8003102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310c:	d102      	bne.n	8003114 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fc7e 	bl	8005a1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7c1a      	ldrb	r2, [r3, #16]
 8003126:	f88d 2000 	strb.w	r2, [sp]
 800312a:	3304      	adds	r3, #4
 800312c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312e:	f002 fb5d 	bl	80057ec <USB_CoreInit>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ce      	b.n	80032e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fc76 	bl	8005a3c <USB_SetCurrentMode>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0bf      	b.n	80032e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e04a      	b.n	80031fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3315      	adds	r3, #21
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3314      	adds	r3, #20
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	b298      	uxth	r0, r3
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	332e      	adds	r3, #46	@ 0x2e
 80031a4:	4602      	mov	r2, r0
 80031a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3318      	adds	r3, #24
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	331c      	adds	r3, #28
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3320      	adds	r3, #32
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3324      	adds	r3, #36	@ 0x24
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	3301      	adds	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	791b      	ldrb	r3, [r3, #4]
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	429a      	cmp	r2, r3
 8003206:	d3af      	bcc.n	8003168 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e044      	b.n	8003298 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	3301      	adds	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	791b      	ldrb	r3, [r3, #4]
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d3b5      	bcc.n	800320e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7c1a      	ldrb	r2, [r3, #16]
 80032aa:	f88d 2000 	strb.w	r2, [sp]
 80032ae:	3304      	adds	r3, #4
 80032b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b2:	f002 fc0f 	bl	8005ad4 <USB_DevInit>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e00c      	b.n	80032e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fc59 	bl	8006b92 <USB_DevDisconnect>

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_PCD_Start+0x1c>
 8003302:	2302      	movs	r3, #2
 8003304:	e022      	b.n	800334c <HAL_PCD_Start+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f002 fb60 	bl	80059f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f003 fc07 	bl	8006b50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b08d      	sub	sp, #52	@ 0x34
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fcc5 	bl	8006cfa <USB_GetMode>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 848c 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fc29 	bl	8006bd4 <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8482 	beq.w	8003c8e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 fc16 	bl	8006bd4 <USB_ReadInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f002 0202 	and.w	r2, r2, #2
 80033c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 fc04 	bl	8006bd4 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d161      	bne.n	800349a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0210 	bic.w	r2, r2, #16
 80033e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800340c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003410:	d124      	bne.n	800345c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d035      	beq.n	800348a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342c:	b29b      	uxth	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	6a38      	ldr	r0, [r7, #32]
 8003432:	f003 fa3b 	bl	80068ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003442:	441a      	add	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003454:	441a      	add	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	615a      	str	r2, [r3, #20]
 800345a:	e016      	b.n	800348a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003466:	d110      	bne.n	800348a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800346e:	2208      	movs	r2, #8
 8003470:	4619      	mov	r1, r3
 8003472:	6a38      	ldr	r0, [r7, #32]
 8003474:	f003 fa1a 	bl	80068ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003484:	441a      	add	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0210 	orr.w	r2, r2, #16
 8003498:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 fb98 	bl	8006bd4 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ae:	f040 80a7 	bne.w	8003600 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 fb9d 	bl	8006bfa <USB_ReadDevAllOutEpInterrupt>
 80034c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034c2:	e099      	b.n	80035f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 808e 	beq.w	80035ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fbc1 	bl	8006c62 <USB_ReadDevOutEPInterrupt>
 80034e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00c      	beq.n	8003506 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	2301      	movs	r3, #1
 80034fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fea3 	bl	800424c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00c      	beq.n	800352a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351c:	461a      	mov	r2, r3
 800351e:	2308      	movs	r3, #8
 8003520:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 ff79 	bl	800441c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003540:	461a      	mov	r2, r3
 8003542:	2310      	movs	r3, #16
 8003544:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d030      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003558:	2b80      	cmp	r3, #128	@ 0x80
 800355a:	d109      	bne.n	8003570 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800356a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800356e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	78db      	ldrb	r3, [r3, #3]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d108      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f005 ffae 	bl	80094fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ac:	461a      	mov	r2, r3
 80035ae:	2302      	movs	r3, #2
 80035b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c8:	461a      	mov	r2, r3
 80035ca:	2320      	movs	r3, #32
 80035cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d009      	beq.n	80035ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e4:	461a      	mov	r2, r3
 80035e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	3301      	adds	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af62 	bne.w	80034c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 fae5 	bl	8006bd4 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003614:	f040 80db 	bne.w	80037ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fb06 	bl	8006c2e <USB_ReadDevAllInEpInterrupt>
 8003622:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003628:	e0cd      	b.n	80037c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80c2 	beq.w	80037ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fb2c 	bl	8006c9e <USB_ReadDevInEPInterrupt>
 8003646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d057      	beq.n	8003702 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	2201      	movs	r2, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	43db      	mvns	r3, r3
 800366c:	69f9      	ldr	r1, [r7, #28]
 800366e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003672:	4013      	ands	r3, r2
 8003674:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003682:	461a      	mov	r2, r3
 8003684:	2301      	movs	r3, #1
 8003686:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	799b      	ldrb	r3, [r3, #6]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d132      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3320      	adds	r3, #32
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4403      	add	r3, r0
 80036b0:	331c      	adds	r3, #28
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4419      	add	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	3320      	adds	r3, #32
 80036c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d113      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x3a2>
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3324      	adds	r3, #36	@ 0x24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036ee:	461a      	mov	r2, r3
 80036f0:	2101      	movs	r1, #1
 80036f2:	f003 fb33 	bl	8006d5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f005 fe78 	bl	80093f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003718:	461a      	mov	r2, r3
 800371a:	2308      	movs	r3, #8
 800371c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003734:	461a      	mov	r2, r3
 8003736:	2310      	movs	r3, #16
 8003738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003750:	461a      	mov	r2, r3
 8003752:	2340      	movs	r3, #64	@ 0x40
 8003754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d023      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003762:	6a38      	ldr	r0, [r7, #32]
 8003764:	f002 fb1a 	bl	8005d9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3310      	adds	r3, #16
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	78db      	ldrb	r3, [r3, #3]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d108      	bne.n	8003796 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2200      	movs	r2, #0
 8003788:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f005 fec5 	bl	8009520 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	2302      	movs	r3, #2
 80037a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fcbd 	bl	8004134 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	3301      	adds	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f af2e 	bne.w	800362a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 f9fe 	bl	8006bd4 <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037e2:	d122      	bne.n	800382a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800380a:	2100      	movs	r1, #0
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fea3 	bl	8004558 <HAL_PCDEx_LPM_Callback>
 8003812:	e002      	b.n	800381a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f005 fe63 	bl	80094e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 f9d0 	bl	8006bd4 <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800383e:	d112      	bne.n	8003866 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d102      	bne.n	8003856 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f005 fe1f 	bl	8009494 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003864:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f003 f9b2 	bl	8006bd4 <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387a:	f040 80b7 	bne.w	80039ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2110      	movs	r1, #16
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fa7f 	bl	8005d9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a2:	e046      	b.n	8003932 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b0:	461a      	mov	r2, r3
 80038b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e4:	461a      	mov	r2, r3
 80038e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800390a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	440a      	add	r2, r1
 8003922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800392a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392e:	3301      	adds	r3, #1
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	791b      	ldrb	r3, [r3, #4]
 8003936:	461a      	mov	r2, r3
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	4293      	cmp	r3, r2
 800393c:	d3b2      	bcc.n	80038a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800394c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003950:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7bdb      	ldrb	r3, [r3, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800396a:	f043 030b 	orr.w	r3, r3, #11
 800396e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003980:	f043 030b 	orr.w	r3, r3, #11
 8003984:	6453      	str	r3, [r2, #68]	@ 0x44
 8003986:	e015      	b.n	80039b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003996:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800399a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800399e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ae:	f043 030b 	orr.w	r3, r3, #11
 80039b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f003 f9c0 	bl	8006d5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 f8ef 	bl	8006bd4 <USB_ReadInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a00:	d123      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 f985 	bl	8006d16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f002 fa3c 	bl	8005e8e <USB_GetDevSpeed>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681c      	ldr	r4, [r3, #0]
 8003a22:	f001 fa39 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8003a26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f001 ff40 	bl	80058b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f005 fd04 	bl	8009442 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 f8c0 	bl	8006bd4 <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d10a      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f005 fce1 	bl	8009426 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f002 0208 	and.w	r2, r2, #8
 8003a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 f8ab 	bl	8006bd4 <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a84:	2b80      	cmp	r3, #128	@ 0x80
 8003a86:	d123      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a94:	2301      	movs	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	e014      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb0a 	bl	80040d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	791b      	ldrb	r3, [r3, #4]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d3e4      	bcc.n	8003a9a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 f87d 	bl	8006bd4 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae4:	d13c      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aea:	e02b      	b.n	8003b44 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3318      	adds	r3, #24
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d115      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da12      	bge.n	8003b3e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3317      	adds	r3, #23
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 faca 	bl	80040d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	791b      	ldrb	r3, [r3, #4]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d3cd      	bcc.n	8003aec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 f835 	bl	8006bd4 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b74:	d156      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b76:	2301      	movs	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7a:	e045      	b.n	8003c08 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d12e      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ba4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da2b      	bge.n	8003c02 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	0c1a      	lsrs	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bb4:	4053      	eors	r3, r2
 8003bb6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d121      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bfe:	6053      	str	r3, [r2, #4]
            break;
 8003c00:	e008      	b.n	8003c14 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	3301      	adds	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	791b      	ldrb	r3, [r3, #4]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d3b3      	bcc.n	8003b7c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 ffd3 	bl	8006bd4 <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d10a      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f005 fc82 	bl	8009544 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f002 ffbd 	bl	8006bd4 <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d115      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f005 fc72 	bl	8009560 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	e000      	b.n	8003c90 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003c8e:	bf00      	nop
    }
  }
}
 8003c90:	3734      	adds	r7, #52	@ 0x34
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd90      	pop	{r4, r7, pc}

08003c96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_PCD_SetAddress+0x1a>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e012      	b.n	8003cd6 <HAL_PCD_SetAddress+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 ff1c 	bl	8006b04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	461a      	mov	r2, r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	70fb      	strb	r3, [r7, #3]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	803b      	strh	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	da0f      	bge.n	8003d24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	3310      	adds	r3, #16
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	3304      	adds	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	705a      	strb	r2, [r3, #1]
 8003d22:	e00f      	b.n	8003d44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d50:	883b      	ldrh	r3, [r7, #0]
 8003d52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	78ba      	ldrb	r2, [r7, #2]
 8003d5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d72:	78bb      	ldrb	r3, [r7, #2]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d102      	bne.n	8003d7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_PCD_EP_Open+0xae>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e00e      	b.n	8003daa <HAL_PCD_EP_Open+0xcc>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 f89c 	bl	8005ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003da8:	7afb      	ldrb	r3, [r7, #11]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da0f      	bge.n	8003de6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3310      	adds	r3, #16
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	705a      	strb	r2, [r3, #1]
 8003de4:	e00f      	b.n	8003e06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_PCD_EP_Close+0x6e>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e00e      	b.n	8003e3e <HAL_PCD_EP_Close+0x8c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68f9      	ldr	r1, [r7, #12]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 f8da 	bl	8005fe8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	460b      	mov	r3, r1
 8003e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2200      	movs	r2, #0
 8003e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e88:	7afb      	ldrb	r3, [r7, #11]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	799b      	ldrb	r3, [r3, #6]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	799b      	ldrb	r3, [r3, #6]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	f002 f977 	bl	80061a0 <USB_EPStartXfer>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efc:	7afb      	ldrb	r3, [r7, #11]
 8003efe:	f003 020f 	and.w	r2, r3, #15
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3310      	adds	r3, #16
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f2c:	7afb      	ldrb	r3, [r7, #11]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	799b      	ldrb	r3, [r3, #6]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d102      	bne.n	8003f46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	799b      	ldrb	r3, [r3, #6]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6979      	ldr	r1, [r7, #20]
 8003f52:	f002 f925 	bl	80061a0 <USB_EPStartXfer>

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	7912      	ldrb	r2, [r2, #4]
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e04f      	b.n	800401e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da0f      	bge.n	8003fa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	3310      	adds	r3, #16
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	705a      	strb	r2, [r3, #1]
 8003fa4:	e00d      	b.n	8003fc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_PCD_EP_SetStall+0x82>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e01d      	b.n	800401e <HAL_PCD_EP_SetStall+0xbe>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fcb3 	bl	800695c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7999      	ldrb	r1, [r3, #6]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800400e:	461a      	mov	r2, r3
 8004010:	f002 fea4 	bl	8006d5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	7912      	ldrb	r2, [r2, #4]
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e042      	b.n	80040ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004048:	2b00      	cmp	r3, #0
 800404a:	da0f      	bge.n	800406c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	3310      	adds	r3, #16
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4413      	add	r3, r2
 8004060:	3304      	adds	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	705a      	strb	r2, [r3, #1]
 800406a:	e00f      	b.n	800408c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_PCD_EP_ClrStall+0x86>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e00e      	b.n	80040ca <HAL_PCD_EP_ClrStall+0xa4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68f9      	ldr	r1, [r7, #12]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f002 fcbc 	bl	8006a38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da0c      	bge.n	8004100 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	3310      	adds	r3, #16
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e00c      	b.n	800411a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 020f 	and.w	r2, r3, #15
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	3304      	adds	r3, #4
 8004118:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	4618      	mov	r0, r3
 8004122:	f002 fadb 	bl	80066dc <USB_EPStopXfer>
 8004126:	4603      	mov	r3, r0
 8004128:	72fb      	strb	r3, [r7, #11]

  return ret;
 800412a:	7afb      	ldrb	r3, [r7, #11]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	3310      	adds	r3, #16
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	3304      	adds	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	429a      	cmp	r2, r3
 8004166:	d901      	bls.n	800416c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e06b      	b.n	8004244 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	429a      	cmp	r2, r3
 8004180:	d902      	bls.n	8004188 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	3303      	adds	r3, #3
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004190:	e02a      	b.n	80041e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d902      	bls.n	80041ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3303      	adds	r3, #3
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68d9      	ldr	r1, [r3, #12]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	4603      	mov	r3, r0
 80041ca:	6978      	ldr	r0, [r7, #20]
 80041cc:	f002 fb30 	bl	8006830 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d809      	bhi.n	8004212 <PCD_WriteEmptyTxFifo+0xde>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004206:	429a      	cmp	r2, r3
 8004208:	d203      	bcs.n	8004212 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1bf      	bne.n	8004192 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	429a      	cmp	r2, r3
 800421c:	d811      	bhi.n	8004242 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2201      	movs	r2, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	43db      	mvns	r3, r3
 8004238:	6939      	ldr	r1, [r7, #16]
 800423a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800423e:	4013      	ands	r3, r2
 8004240:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	333c      	adds	r3, #60	@ 0x3c
 8004264:	3304      	adds	r3, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	799b      	ldrb	r3, [r3, #6]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d17b      	bne.n	800437a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4a61      	ldr	r2, [pc, #388]	@ (8004414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	f240 80b9 	bls.w	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80b3 	beq.w	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b4:	6093      	str	r3, [r2, #8]
 80042b6:	e0a7      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	2320      	movs	r3, #32
 80042d2:	6093      	str	r3, [r2, #8]
 80042d4:	e098      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 8093 	bne.w	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d90f      	bls.n	800430a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	e07e      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	0159      	lsls	r1, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	440b      	add	r3, r1
 800432c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d114      	bne.n	800436c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004354:	461a      	mov	r2, r3
 8004356:	2101      	movs	r1, #1
 8004358:	f002 fd00 	bl	8006d5c <USB_EP0_OutStart>
 800435c:	e006      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f005 f822 	bl	80093bc <HAL_PCD_DataOutStageCallback>
 8004378:	e046      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4a26      	ldr	r2, [pc, #152]	@ (8004418 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d124      	bne.n	80043cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	e032      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2320      	movs	r3, #32
 80043bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f004 fff9 	bl	80093bc <HAL_PCD_DataOutStageCallback>
 80043ca:	e01d      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d114      	bne.n	80043fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043f4:	461a      	mov	r2, r3
 80043f6:	2100      	movs	r1, #0
 80043f8:	f002 fcb0 	bl	8006d5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f004 ffda 	bl	80093bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	4f54300a 	.word	0x4f54300a
 8004418:	4f54310a 	.word	0x4f54310a

0800441c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	333c      	adds	r3, #60	@ 0x3c
 8004434:	3304      	adds	r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a15      	ldr	r2, [pc, #84]	@ (80044a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d90e      	bls.n	8004470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004468:	461a      	mov	r2, r3
 800446a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f004 ff91 	bl	8009398 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d90c      	bls.n	8004498 <PCD_EP_OutSetupPacket_int+0x7c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	799b      	ldrb	r3, [r3, #6]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d108      	bne.n	8004498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004490:	461a      	mov	r2, r3
 8004492:	2101      	movs	r1, #1
 8004494:	f002 fc62 	bl	8006d5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	4f54300a 	.word	0x4f54300a

080044a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
 80044b4:	4613      	mov	r3, r2
 80044b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044c6:	883b      	ldrh	r3, [r7, #0]
 80044c8:	0419      	lsls	r1, r3, #16
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044d4:	e028      	b.n	8004528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]
 80044e8:	e00d      	b.n	8004506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	3340      	adds	r3, #64	@ 0x40
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	3301      	adds	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	3b01      	subs	r3, #1
 800450c:	429a      	cmp	r2, r3
 800450e:	d3ec      	bcc.n	80044ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004510:	883b      	ldrh	r3, [r7, #0]
 8004512:	0418      	lsls	r0, r3, #16
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	3b01      	subs	r3, #1
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4302      	orrs	r2, r0
 8004520:	3340      	adds	r3, #64	@ 0x40
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800457c:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_PWR_EnterSTOPMode+0x58>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 0203 	bic.w	r2, r3, #3
 8004584:	4910      	ldr	r1, [pc, #64]	@ (80045c8 <HAL_PWR_EnterSTOPMode+0x58>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <HAL_PWR_EnterSTOPMode+0x5c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4a0e      	ldr	r2, [pc, #56]	@ (80045cc <HAL_PWR_EnterSTOPMode+0x5c>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800459e:	bf30      	wfi
 80045a0:	e005      	b.n	80045ae <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d001      	beq.n	80045ac <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 80045a8:	bf40      	sev
      __WFE();
 80045aa:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 80045ac:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80045ae:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <HAL_PWR_EnterSTOPMode+0x5c>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4a06      	ldr	r2, [pc, #24]	@ (80045cc <HAL_PWR_EnterSTOPMode+0x5c>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6113      	str	r3, [r2, #16]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e267      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d075      	beq.n	80046da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ee:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d00c      	beq.n	8004614 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004602:	2b08      	cmp	r3, #8
 8004604:	d112      	bne.n	800462c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004606:	4b82      	ldr	r3, [pc, #520]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004612:	d10b      	bne.n	800462c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	4b7e      	ldr	r3, [pc, #504]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d05b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x108>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d157      	bne.n	80046d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e242      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d106      	bne.n	8004644 <HAL_RCC_OscConfig+0x74>
 8004636:	4b76      	ldr	r3, [pc, #472]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xb0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x98>
 800464e:	4b70      	ldr	r3, [pc, #448]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6f      	ldr	r2, [pc, #444]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b6d      	ldr	r3, [pc, #436]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6c      	ldr	r2, [pc, #432]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xb0>
 8004668:	4b69      	ldr	r3, [pc, #420]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b66      	ldr	r3, [pc, #408]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a65      	ldr	r2, [pc, #404]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800467e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fd f936 	bl	80018f8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fd f932 	bl	80018f8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	@ 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e207      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xc0>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd f922 	bl	80018f8 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd f91e 	bl	80018f8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1f3      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b51      	ldr	r3, [pc, #324]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0xe8>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fe:	4b44      	ldr	r3, [pc, #272]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x152>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1c7      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4937      	ldr	r1, [pc, #220]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e03a      	b.n	80047ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b34      	ldr	r3, [pc, #208]	@ (8004814 <HAL_RCC_OscConfig+0x244>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd f8d7 	bl	80018f8 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fd f8d3 	bl	80018f8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e1a8      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	4b2b      	ldr	r3, [pc, #172]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b28      	ldr	r3, [pc, #160]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4925      	ldr	r1, [pc, #148]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b24      	ldr	r3, [pc, #144]	@ (8004814 <HAL_RCC_OscConfig+0x244>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd f8b6 	bl	80018f8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fd f8b2 	bl	80018f8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e187      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d036      	beq.n	8004828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_OscConfig+0x248>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd f896 	bl	80018f8 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fd f892 	bl	80018f8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e167      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80047e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x200>
 80047ee:	e01b      	b.n	8004828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f0:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <HAL_RCC_OscConfig+0x248>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fd f87f 	bl	80018f8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	e00e      	b.n	800481c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fe:	f7fd f87b 	bl	80018f8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d907      	bls.n	800481c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e150      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
 8004810:	40023800 	.word	0x40023800
 8004814:	42470000 	.word	0x42470000
 8004818:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	4b88      	ldr	r3, [pc, #544]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800481e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ea      	bne.n	80047fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8097 	beq.w	8004964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483a:	4b81      	ldr	r3, [pc, #516]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004854:	6413      	str	r3, [r2, #64]	@ 0x40
 8004856:	4b7a      	ldr	r3, [pc, #488]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b77      	ldr	r3, [pc, #476]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d118      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b74      	ldr	r3, [pc, #464]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a73      	ldr	r2, [pc, #460]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487e:	f7fd f83b 	bl	80018f8 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fd f837 	bl	80018f8 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e10c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b6a      	ldr	r3, [pc, #424]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x2ea>
 80048ac:	4b64      	ldr	r3, [pc, #400]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	4a63      	ldr	r2, [pc, #396]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b8:	e01c      	b.n	80048f4 <HAL_RCC_OscConfig+0x324>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x30c>
 80048c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048c8:	f043 0304 	orr.w	r3, r3, #4
 80048cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048da:	e00b      	b.n	80048f4 <HAL_RCC_OscConfig+0x324>
 80048dc:	4b58      	ldr	r3, [pc, #352]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e0:	4a57      	ldr	r2, [pc, #348]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e8:	4b55      	ldr	r3, [pc, #340]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ec:	4a54      	ldr	r2, [pc, #336]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048ee:	f023 0304 	bic.w	r3, r3, #4
 80048f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d015      	beq.n	8004928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fc fffc 	bl	80018f8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004904:	f7fc fff8 	bl	80018f8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e0cb      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	4b49      	ldr	r3, [pc, #292]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0ee      	beq.n	8004904 <HAL_RCC_OscConfig+0x334>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004928:	f7fc ffe6 	bl	80018f8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fc ffe2 	bl	80018f8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e0b5      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004946:	4b3e      	ldr	r3, [pc, #248]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ee      	bne.n	8004930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004958:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	4a38      	ldr	r2, [pc, #224]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004962:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a1 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800496e:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b08      	cmp	r3, #8
 8004978:	d05c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d141      	bne.n	8004a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004982:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <HAL_RCC_OscConfig+0x478>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fc ffb6 	bl	80018f8 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fc ffb2 	bl	80018f8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e087      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	019b      	lsls	r3, r3, #6
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	3b01      	subs	r3, #1
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	491b      	ldr	r1, [pc, #108]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <HAL_RCC_OscConfig+0x478>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fc ff8b 	bl	80018f8 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e6:	f7fc ff87 	bl	80018f8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e05c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f8:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x416>
 8004a04:	e054      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <HAL_RCC_OscConfig+0x478>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fc ff74 	bl	80018f8 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fc ff70 	bl	80018f8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e045      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x444>
 8004a32:	e03d      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e038      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40007000 	.word	0x40007000
 8004a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x4ec>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d028      	beq.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d121      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d11a      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	3b01      	subs	r3, #1
 8004a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0cc      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b68      	ldr	r3, [pc, #416]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d90c      	bls.n	8004afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b65      	ldr	r3, [pc, #404]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b63      	ldr	r3, [pc, #396]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b8      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b14:	4b59      	ldr	r3, [pc, #356]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a58      	ldr	r2, [pc, #352]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a52      	ldr	r2, [pc, #328]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	494d      	ldr	r1, [pc, #308]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d044      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d119      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d003      	beq.n	8004b7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e067      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9e:	4b37      	ldr	r3, [pc, #220]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4934      	ldr	r1, [pc, #208]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7fc fea2 	bl	80018f8 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fc fe9e 	bl	80018f8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e04f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	4b2b      	ldr	r3, [pc, #172]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 020c 	and.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1eb      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d20c      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b22      	ldr	r3, [pc, #136]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e032      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4916      	ldr	r1, [pc, #88]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c46:	f000 f821 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490a      	ldr	r1, [pc, #40]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c4>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fc fe02 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	0800c280 	.word	0x0800c280
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20000004 	.word	0x20000004

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b094      	sub	sp, #80	@ 0x50
 8004c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca4:	4b79      	ldr	r3, [pc, #484]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d00d      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x40>
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	f200 80e1 	bhi.w	8004e78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cbe:	e0db      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b73      	ldr	r3, [pc, #460]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cc4:	e0db      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cc6:	4b73      	ldr	r3, [pc, #460]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cca:	e0d8      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d063      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	2200      	movs	r2, #0
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	0159      	lsls	r1, r3, #5
 8004d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d10:	0150      	lsls	r0, r2, #5
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4621      	mov	r1, r4
 8004d18:	1a51      	subs	r1, r2, r1
 8004d1a:	6139      	str	r1, [r7, #16]
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d30:	4659      	mov	r1, fp
 8004d32:	018b      	lsls	r3, r1, #6
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	018a      	lsls	r2, r1, #6
 8004d3e:	4651      	mov	r1, sl
 8004d40:	ebb2 0801 	subs.w	r8, r2, r1
 8004d44:	4659      	mov	r1, fp
 8004d46:	eb63 0901 	sbc.w	r9, r3, r1
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d5e:	4690      	mov	r8, r2
 8004d60:	4699      	mov	r9, r3
 8004d62:	4623      	mov	r3, r4
 8004d64:	eb18 0303 	adds.w	r3, r8, r3
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	eb49 0303 	adc.w	r3, r9, r3
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	024b      	lsls	r3, r1, #9
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d88:	4621      	mov	r1, r4
 8004d8a:	024a      	lsls	r2, r1, #9
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d9c:	f7fb ff04 	bl	8000ba8 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da8:	e058      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	2200      	movs	r2, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	4611      	mov	r1, r2
 8004db6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	0159      	lsls	r1, r3, #5
 8004dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd6:	0150      	lsls	r0, r2, #5
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4641      	mov	r1, r8
 8004dde:	ebb2 0a01 	subs.w	sl, r2, r1
 8004de2:	4649      	mov	r1, r9
 8004de4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004df4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004df8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dfc:	ebb2 040a 	subs.w	r4, r2, sl
 8004e00:	eb63 050b 	sbc.w	r5, r3, fp
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	00eb      	lsls	r3, r5, #3
 8004e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e12:	00e2      	lsls	r2, r4, #3
 8004e14:	4614      	mov	r4, r2
 8004e16:	461d      	mov	r5, r3
 8004e18:	4643      	mov	r3, r8
 8004e1a:	18e3      	adds	r3, r4, r3
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	eb45 0303 	adc.w	r3, r5, r3
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e32:	4629      	mov	r1, r5
 8004e34:	028b      	lsls	r3, r1, #10
 8004e36:	4621      	mov	r1, r4
 8004e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	028a      	lsls	r2, r1, #10
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e46:	2200      	movs	r2, #0
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	61fa      	str	r2, [r7, #28]
 8004e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e50:	f7fb feaa 	bl	8000ba8 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	3301      	adds	r3, #1
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3750      	adds	r7, #80	@ 0x50
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200

08004e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	@ (8004eac <HAL_RCC_GetHCLKFreq+0x14>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000000 	.word	0x20000000

08004eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e041      	b.n	8004f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc fae8 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f000 faac 	bl	800544c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d001      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e04e      	b.n	8005006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a23      	ldr	r2, [pc, #140]	@ (8005014 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d022      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f92:	d01d      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <HAL_TIM_Base_Start_IT+0xcc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x80>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d111      	bne.n	8004ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d010      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	e007      	b.n	8005004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40010000 	.word	0x40010000
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40010400 	.word	0x40010400
 8005028:	40014000 	.word	0x40014000
 800502c:	40001800 	.word	0x40001800

08005030 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a1a      	ldr	r2, [r3, #32]
 800504e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10f      	bne.n	8005078 <HAL_TIM_Base_Stop_IT+0x48>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005062:	4013      	ands	r3, r2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_TIM_Base_Stop_IT+0x48>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01b      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0202 	mvn.w	r2, #2
 80050c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f999 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 80050de:	e005      	b.n	80050ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f98b 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f99c 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01b      	beq.n	800513e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f06f 0204 	mvn.w	r2, #4
 800510e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f973 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 800512a:	e005      	b.n	8005138 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f965 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f976 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01b      	beq.n	800518a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f06f 0208 	mvn.w	r2, #8
 800515a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2204      	movs	r2, #4
 8005160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f94d 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 8005176:	e005      	b.n	8005184 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f93f 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f950 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01b      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0210 	mvn.w	r2, #16
 80051a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2208      	movs	r2, #8
 80051ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f927 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 80051c2:	e005      	b.n	80051d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f919 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f92a 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00c      	beq.n	80051fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0201 	mvn.w	r2, #1
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fc f86b 	bl	80012d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fadd 	bl	80057d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00c      	beq.n	8005242 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800523a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8fb 	bl	8005438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0220 	mvn.w	r2, #32
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 faaf 	bl	80057c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_ConfigClockSource+0x1c>
 8005286:	2302      	movs	r3, #2
 8005288:	e0b4      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x186>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c2:	d03e      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xd4>
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c8:	f200 8087 	bhi.w	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d0:	f000 8086 	beq.w	80053e0 <HAL_TIM_ConfigClockSource+0x172>
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d8:	d87f      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052da:	2b70      	cmp	r3, #112	@ 0x70
 80052dc:	d01a      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0xa6>
 80052de:	2b70      	cmp	r3, #112	@ 0x70
 80052e0:	d87b      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052e2:	2b60      	cmp	r3, #96	@ 0x60
 80052e4:	d050      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x11a>
 80052e6:	2b60      	cmp	r3, #96	@ 0x60
 80052e8:	d877      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052ea:	2b50      	cmp	r3, #80	@ 0x50
 80052ec:	d03c      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0xfa>
 80052ee:	2b50      	cmp	r3, #80	@ 0x50
 80052f0:	d873      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052f2:	2b40      	cmp	r3, #64	@ 0x40
 80052f4:	d058      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x13a>
 80052f6:	2b40      	cmp	r3, #64	@ 0x40
 80052f8:	d86f      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052fa:	2b30      	cmp	r3, #48	@ 0x30
 80052fc:	d064      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 80052fe:	2b30      	cmp	r3, #48	@ 0x30
 8005300:	d86b      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d060      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 8005306:	2b20      	cmp	r3, #32
 8005308:	d867      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d05c      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 800530e:	2b10      	cmp	r3, #16
 8005310:	d05a      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 8005312:	e062      	b.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005324:	f000 f9b2 	bl	800568c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005336:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e04f      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005352:	f000 f99b 	bl	800568c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005364:	609a      	str	r2, [r3, #8]
      break;
 8005366:	e03c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005374:	461a      	mov	r2, r3
 8005376:	f000 f90f 	bl	8005598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2150      	movs	r1, #80	@ 0x50
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f968 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 8005386:	e02c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005394:	461a      	mov	r2, r3
 8005396:	f000 f92e 	bl	80055f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2160      	movs	r1, #96	@ 0x60
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f958 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 80053a6:	e01c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b4:	461a      	mov	r2, r3
 80053b6:	f000 f8ef 	bl	8005598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2140      	movs	r1, #64	@ 0x40
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f948 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 80053c6:	e00c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 f93f 	bl	8005656 <TIM_ITRx_SetConfig>
      break;
 80053d8:	e003      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
      break;
 80053de:	e000      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a43      	ldr	r2, [pc, #268]	@ (800556c <TIM_Base_SetConfig+0x120>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546a:	d00f      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a40      	ldr	r2, [pc, #256]	@ (8005570 <TIM_Base_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3f      	ldr	r2, [pc, #252]	@ (8005574 <TIM_Base_SetConfig+0x128>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3e      	ldr	r2, [pc, #248]	@ (8005578 <TIM_Base_SetConfig+0x12c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3d      	ldr	r2, [pc, #244]	@ (800557c <TIM_Base_SetConfig+0x130>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a32      	ldr	r2, [pc, #200]	@ (800556c <TIM_Base_SetConfig+0x120>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ac:	d027      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_Base_SetConfig+0x124>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d023      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005574 <TIM_Base_SetConfig+0x128>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01f      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <TIM_Base_SetConfig+0x12c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <TIM_Base_SetConfig+0x130>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d017      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <TIM_Base_SetConfig+0x134>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005584 <TIM_Base_SetConfig+0x138>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a29      	ldr	r2, [pc, #164]	@ (8005588 <TIM_Base_SetConfig+0x13c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a28      	ldr	r2, [pc, #160]	@ (800558c <TIM_Base_SetConfig+0x140>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a27      	ldr	r2, [pc, #156]	@ (8005590 <TIM_Base_SetConfig+0x144>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a26      	ldr	r2, [pc, #152]	@ (8005594 <TIM_Base_SetConfig+0x148>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d108      	bne.n	8005510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a0e      	ldr	r2, [pc, #56]	@ (800556c <TIM_Base_SetConfig+0x120>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0xf2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a10      	ldr	r2, [pc, #64]	@ (800557c <TIM_Base_SetConfig+0x130>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d103      	bne.n	8005546 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	601a      	str	r2, [r3, #0]
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40010400 	.word	0x40010400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800
 800558c:	40001800 	.word	0x40001800
 8005590:	40001c00 	.word	0x40001c00
 8005594:	40002000 	.word	0x40002000

08005598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 030a 	bic.w	r3, r3, #10
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 0210 	bic.w	r2, r3, #16
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	f043 0307 	orr.w	r3, r3, #7
 8005678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e05a      	b.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a21      	ldr	r2, [pc, #132]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d022      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005730:	d01d      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d018      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1a      	ldr	r2, [pc, #104]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a18      	ldr	r2, [pc, #96]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d10c      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4313      	orrs	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40000c00 	.word	0x40000c00
 80057b8:	40010400 	.word	0x40010400
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40001800 	.word	0x40001800

080057c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057ec:	b084      	sub	sp, #16
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	f107 001c 	add.w	r0, r7, #28
 80057fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005802:	2b01      	cmp	r3, #1
 8005804:	d123      	bne.n	800584e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800581a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800582e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005832:	2b01      	cmp	r3, #1
 8005834:	d105      	bne.n	8005842 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 fae8 	bl	8006e18 <USB_CoreReset>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e01b      	b.n	8005886 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fadc 	bl	8006e18 <USB_CoreReset>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005864:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38
 8005878:	e005      	b.n	8005886 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005886:	7fbb      	ldrb	r3, [r7, #30]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10b      	bne.n	80058a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f043 0206 	orr.w	r2, r3, #6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b0:	b004      	add	sp, #16
 80058b2:	4770      	bx	lr

080058b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d165      	bne.n	8005994 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a41      	ldr	r2, [pc, #260]	@ (80059d0 <USB_SetTurnaroundTime+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d906      	bls.n	80058de <USB_SetTurnaroundTime+0x2a>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4a40      	ldr	r2, [pc, #256]	@ (80059d4 <USB_SetTurnaroundTime+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d202      	bcs.n	80058de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058d8:	230f      	movs	r3, #15
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e062      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a3c      	ldr	r2, [pc, #240]	@ (80059d4 <USB_SetTurnaroundTime+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d306      	bcc.n	80058f4 <USB_SetTurnaroundTime+0x40>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4a3b      	ldr	r2, [pc, #236]	@ (80059d8 <USB_SetTurnaroundTime+0x124>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d202      	bcs.n	80058f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058ee:	230e      	movs	r3, #14
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e057      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a38      	ldr	r2, [pc, #224]	@ (80059d8 <USB_SetTurnaroundTime+0x124>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d306      	bcc.n	800590a <USB_SetTurnaroundTime+0x56>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4a37      	ldr	r2, [pc, #220]	@ (80059dc <USB_SetTurnaroundTime+0x128>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d202      	bcs.n	800590a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005904:	230d      	movs	r3, #13
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	e04c      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a33      	ldr	r2, [pc, #204]	@ (80059dc <USB_SetTurnaroundTime+0x128>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d306      	bcc.n	8005920 <USB_SetTurnaroundTime+0x6c>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4a32      	ldr	r2, [pc, #200]	@ (80059e0 <USB_SetTurnaroundTime+0x12c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d802      	bhi.n	8005920 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800591a:	230c      	movs	r3, #12
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e041      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a2f      	ldr	r2, [pc, #188]	@ (80059e0 <USB_SetTurnaroundTime+0x12c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d906      	bls.n	8005936 <USB_SetTurnaroundTime+0x82>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4a2e      	ldr	r2, [pc, #184]	@ (80059e4 <USB_SetTurnaroundTime+0x130>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d802      	bhi.n	8005936 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005930:	230b      	movs	r3, #11
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e036      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a2a      	ldr	r2, [pc, #168]	@ (80059e4 <USB_SetTurnaroundTime+0x130>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d906      	bls.n	800594c <USB_SetTurnaroundTime+0x98>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4a29      	ldr	r2, [pc, #164]	@ (80059e8 <USB_SetTurnaroundTime+0x134>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d802      	bhi.n	800594c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005946:	230a      	movs	r3, #10
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e02b      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a26      	ldr	r2, [pc, #152]	@ (80059e8 <USB_SetTurnaroundTime+0x134>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d906      	bls.n	8005962 <USB_SetTurnaroundTime+0xae>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4a25      	ldr	r2, [pc, #148]	@ (80059ec <USB_SetTurnaroundTime+0x138>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d202      	bcs.n	8005962 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800595c:	2309      	movs	r3, #9
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e020      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <USB_SetTurnaroundTime+0x138>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d306      	bcc.n	8005978 <USB_SetTurnaroundTime+0xc4>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <USB_SetTurnaroundTime+0x13c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d802      	bhi.n	8005978 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005972:	2308      	movs	r3, #8
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e015      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <USB_SetTurnaroundTime+0x13c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d906      	bls.n	800598e <USB_SetTurnaroundTime+0xda>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a1c      	ldr	r2, [pc, #112]	@ (80059f4 <USB_SetTurnaroundTime+0x140>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d202      	bcs.n	800598e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005988:	2307      	movs	r3, #7
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e00a      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800598e:	2306      	movs	r3, #6
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e007      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800599a:	2309      	movs	r3, #9
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e001      	b.n	80059a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059a0:	2309      	movs	r3, #9
 80059a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	029b      	lsls	r3, r3, #10
 80059b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80059bc:	431a      	orrs	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	00d8acbf 	.word	0x00d8acbf
 80059d4:	00e4e1c0 	.word	0x00e4e1c0
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	01067380 	.word	0x01067380
 80059e0:	011a499f 	.word	0x011a499f
 80059e4:	01312cff 	.word	0x01312cff
 80059e8:	014ca43f 	.word	0x014ca43f
 80059ec:	016e3600 	.word	0x016e3600
 80059f0:	01a6ab1f 	.word	0x01a6ab1f
 80059f4:	01e84800 	.word	0x01e84800

080059f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f043 0201 	orr.w	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d115      	bne.n	8005a8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a6a:	200a      	movs	r0, #10
 8005a6c:	f7fb ff50 	bl	8001910 <HAL_Delay>
      ms += 10U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	330a      	adds	r3, #10
 8005a74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f001 f93f 	bl	8006cfa <USB_GetMode>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d01e      	beq.n	8005ac0 <USB_SetCurrentMode+0x84>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a86:	d9f0      	bls.n	8005a6a <USB_SetCurrentMode+0x2e>
 8005a88:	e01a      	b.n	8005ac0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d115      	bne.n	8005abc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a9c:	200a      	movs	r0, #10
 8005a9e:	f7fb ff37 	bl	8001910 <HAL_Delay>
      ms += 10U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	330a      	adds	r3, #10
 8005aa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f926 	bl	8006cfa <USB_GetMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <USB_SetCurrentMode+0x84>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ab8:	d9f0      	bls.n	8005a9c <USB_SetCurrentMode+0x60>
 8005aba:	e001      	b.n	8005ac0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e005      	b.n	8005acc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ac4:	d101      	bne.n	8005aca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e009      	b.n	8005b08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3340      	adds	r3, #64	@ 0x40
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3301      	adds	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b0e      	cmp	r3, #14
 8005b0c:	d9f2      	bls.n	8005af4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11c      	bne.n	8005b50 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b24:	f043 0302 	orr.w	r3, r3, #2
 8005b28:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b4e:	e00b      	b.n	8005b68 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2300      	movs	r3, #0
 8005b72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10d      	bne.n	8005b98 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b84:	2100      	movs	r1, #0
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f968 	bl	8005e5c <USB_SetDevSpeed>
 8005b8c:	e008      	b.n	8005ba0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b8e:	2101      	movs	r1, #1
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f963 	bl	8005e5c <USB_SetDevSpeed>
 8005b96:	e003      	b.n	8005ba0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b98:	2103      	movs	r1, #3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f95e 	bl	8005e5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8fa 	bl	8005d9c <USB_FlushTxFifo>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f924 	bl	8005e00 <USB_FlushRxFifo>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be0:	461a      	mov	r2, r3
 8005be2:	2300      	movs	r3, #0
 8005be4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	e043      	b.n	8005c74 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c02:	d118      	bne.n	8005c36 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c16:	461a      	mov	r2, r3
 8005c18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e013      	b.n	8005c48 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e008      	b.n	8005c48 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c66:	461a      	mov	r2, r3
 8005c68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c78:	461a      	mov	r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d3b5      	bcc.n	8005bec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	e043      	b.n	8005d0e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c9c:	d118      	bne.n	8005cd0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e013      	b.n	8005ce2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e008      	b.n	8005ce2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d00:	461a      	mov	r2, r3
 8005d02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d12:	461a      	mov	r2, r3
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d3b5      	bcc.n	8005c86 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f043 0210 	orr.w	r2, r3, #16
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	4b10      	ldr	r3, [pc, #64]	@ (8005d98 <USB_DevInit+0x2c4>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f043 0208 	orr.w	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d107      	bne.n	8005d88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d80:	f043 0304 	orr.w	r3, r3, #4
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d94:	b004      	add	sp, #16
 8005d96:	4770      	bx	lr
 8005d98:	803c3800 	.word	0x803c3800

08005d9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005db6:	d901      	bls.n	8005dbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e01b      	b.n	8005df4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	daf2      	bge.n	8005daa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	019b      	lsls	r3, r3, #6
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de0:	d901      	bls.n	8005de6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e006      	b.n	8005df4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d0f0      	beq.n	8005dd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e18:	d901      	bls.n	8005e1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e018      	b.n	8005e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	daf2      	bge.n	8005e0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e3c:	d901      	bls.n	8005e42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e006      	b.n	8005e50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d0f0      	beq.n	8005e30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	68f9      	ldr	r1, [r7, #12]
 8005e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b087      	sub	sp, #28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0306 	and.w	r3, r3, #6
 8005ea6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
 8005eb2:	e00a      	b.n	8005eca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d002      	beq.n	8005ec0 <USB_GetDevSpeed+0x32>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d102      	bne.n	8005ec6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	75fb      	strb	r3, [r7, #23]
 8005ec4:	e001      	b.n	8005eca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ec6:	230f      	movs	r3, #15
 8005ec8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d13a      	bne.n	8005f6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d155      	bne.n	8005fd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	791b      	ldrb	r3, [r3, #4]
 8005f46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	059b      	lsls	r3, r3, #22
 8005f4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f50:	4313      	orrs	r3, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e036      	b.n	8005fd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f70:	69da      	ldr	r2, [r3, #28]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d11a      	bne.n	8005fd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	791b      	ldrb	r3, [r3, #4]
 8005fbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d161      	bne.n	80060c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800601a:	d11f      	bne.n	800605c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006036:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800603a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800605a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	2101      	movs	r1, #1
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	b29b      	uxth	r3, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800607c:	4013      	ands	r3, r2
 800607e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2101      	movs	r1, #1
 8006092:	fa01 f303 	lsl.w	r3, r1, r3
 8006096:	b29b      	uxth	r3, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a0:	4013      	ands	r3, r2
 80060a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	0159      	lsls	r1, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	440b      	add	r3, r1
 80060ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060be:	4619      	mov	r1, r3
 80060c0:	4b35      	ldr	r3, [pc, #212]	@ (8006198 <USB_DeactivateEndpoint+0x1b0>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	600b      	str	r3, [r1, #0]
 80060c6:	e060      	b.n	800618a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060de:	d11f      	bne.n	8006120 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800611e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	43db      	mvns	r3, r3
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006140:	4013      	ands	r3, r2
 8006142:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	2101      	movs	r1, #1
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	43db      	mvns	r3, r3
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006164:	4013      	ands	r3, r2
 8006166:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	0159      	lsls	r1, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	440b      	add	r3, r1
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	4619      	mov	r1, r3
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <USB_DeactivateEndpoint+0x1b4>)
 8006186:	4013      	ands	r3, r2
 8006188:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	ec337800 	.word	0xec337800
 800619c:	eff37800 	.word	0xeff37800

080061a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	@ 0x28
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	f040 817f 	bne.w	80064c0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d132      	bne.n	8006230 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006208:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800620c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006228:	0cdb      	lsrs	r3, r3, #19
 800622a:	04db      	lsls	r3, r3, #19
 800622c:	6113      	str	r3, [r2, #16]
 800622e:	e097      	b.n	8006360 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800624a:	0cdb      	lsrs	r3, r3, #19
 800624c:	04db      	lsls	r3, r3, #19
 800624e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800626a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800626e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006272:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11a      	bne.n	80062b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d903      	bls.n	800628e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062ac:	6113      	str	r3, [r2, #16]
 80062ae:	e044      	b.n	800633a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4413      	add	r3, r2
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	04d9      	lsls	r1, r3, #19
 80062d8:	4ba4      	ldr	r3, [pc, #656]	@ (800656c <USB_EPStartXfer+0x3cc>)
 80062da:	400b      	ands	r3, r1
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	0148      	lsls	r0, r1, #5
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	4401      	add	r1, r0
 80062e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d122      	bne.n	800633a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006312:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	8afb      	ldrh	r3, [r7, #22]
 8006324:	075b      	lsls	r3, r3, #29
 8006326:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	0148      	lsls	r0, r1, #5
 800632e:	69f9      	ldr	r1, [r7, #28]
 8006330:	4401      	add	r1, r0
 8006332:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006336:	4313      	orrs	r3, r2
 8006338:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006350:	69b9      	ldr	r1, [r7, #24]
 8006352:	0148      	lsls	r0, r1, #5
 8006354:	69f9      	ldr	r1, [r7, #28]
 8006356:	4401      	add	r1, r0
 8006358:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800635c:	4313      	orrs	r3, r2
 800635e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d14b      	bne.n	80063fe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	791b      	ldrb	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d128      	bne.n	80063dc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d110      	bne.n	80063bc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e00f      	b.n	80063dc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063da:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e166      	b.n	80066cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006418:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800641c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d015      	beq.n	8006452 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 814e 	beq.w	80066cc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	2101      	movs	r1, #1
 8006442:	fa01 f303 	lsl.w	r3, r1, r3
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800644c:	4313      	orrs	r3, r2
 800644e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006450:	e13c      	b.n	80066cc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d110      	bne.n	8006484 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800647c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e00f      	b.n	80064a4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	b298      	uxth	r0, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4603      	mov	r3, r0
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f9b9 	bl	8006830 <USB_WritePacket>
 80064be:	e105      	b.n	80066cc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064da:	0cdb      	lsrs	r3, r3, #19
 80064dc:	04db      	lsls	r3, r3, #19
 80064de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006502:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d132      	bne.n	8006570 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	69b9      	ldr	r1, [r7, #24]
 800653a:	0148      	lsls	r0, r1, #5
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	4401      	add	r1, r0
 8006540:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006544:	4313      	orrs	r3, r2
 8006546:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006562:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006566:	6113      	str	r3, [r2, #16]
 8006568:	e062      	b.n	8006630 <USB_EPStartXfer+0x490>
 800656a:	bf00      	nop
 800656c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d123      	bne.n	80065c0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658e:	69b9      	ldr	r1, [r7, #24]
 8006590:	0148      	lsls	r0, r1, #5
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	4401      	add	r1, r0
 8006596:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800659a:	4313      	orrs	r3, r2
 800659c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065bc:	6113      	str	r3, [r2, #16]
 80065be:	e037      	b.n	8006630 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	1e5a      	subs	r2, r3, #1
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	8afa      	ldrh	r2, [r7, #22]
 80065dc:	fb03 f202 	mul.w	r2, r3, r2
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	8afb      	ldrh	r3, [r7, #22]
 80065f4:	04d9      	lsls	r1, r3, #19
 80065f6:	4b38      	ldr	r3, [pc, #224]	@ (80066d8 <USB_EPStartXfer+0x538>)
 80065f8:	400b      	ands	r3, r1
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	0148      	lsls	r0, r1, #5
 80065fe:	69f9      	ldr	r1, [r7, #28]
 8006600:	4401      	add	r1, r0
 8006602:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006606:	4313      	orrs	r3, r2
 8006608:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	0148      	lsls	r0, r1, #5
 8006624:	69f9      	ldr	r1, [r7, #28]
 8006626:	4401      	add	r1, r0
 8006628:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800662c:	4313      	orrs	r3, r2
 800662e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10d      	bne.n	8006652 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	460a      	mov	r2, r1
 8006650:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	791b      	ldrb	r3, [r3, #4]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d128      	bne.n	80066ac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d110      	bne.n	800668c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006684:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e00f      	b.n	80066ac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	1ff80000 	.word	0x1ff80000

080066dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d14a      	bne.n	8006790 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800670e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006712:	f040 8086 	bne.w	8006822 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006734:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006738:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800675c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f242 7210 	movw	r2, #10000	@ 0x2710
 800676a:	4293      	cmp	r3, r2
 800676c:	d902      	bls.n	8006774 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	75fb      	strb	r3, [r7, #23]
          break;
 8006772:	e056      	b.n	8006822 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800678c:	d0e7      	beq.n	800675e <USB_EPStopXfer+0x82>
 800678e:	e048      	b.n	8006822 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a8:	d13b      	bne.n	8006822 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067fe:	4293      	cmp	r3, r2
 8006800:	d902      	bls.n	8006808 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
          break;
 8006806:	e00c      	b.n	8006822 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006820:	d0e7      	beq.n	80067f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	@ 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	460b      	mov	r3, r1
 8006840:	71fb      	strb	r3, [r7, #7]
 8006842:	4613      	mov	r3, r2
 8006844:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800684e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006852:	2b00      	cmp	r3, #0
 8006854:	d123      	bne.n	800689e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006856:	88bb      	ldrh	r3, [r7, #4]
 8006858:	3303      	adds	r3, #3
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	e018      	b.n	8006896 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	031a      	lsls	r2, r3, #12
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	4413      	add	r3, r2
 800686c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006870:	461a      	mov	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	3301      	adds	r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3301      	adds	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3301      	adds	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3301      	adds	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d3e2      	bcc.n	8006864 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3724      	adds	r7, #36	@ 0x24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b08b      	sub	sp, #44	@ 0x2c
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	623b      	str	r3, [r7, #32]
 80068d6:	e014      	b.n	8006902 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	3301      	adds	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	3301      	adds	r3, #1
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	3301      	adds	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	3301      	adds	r3, #1
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	3301      	adds	r3, #1
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	429a      	cmp	r2, r3
 8006908:	d3e6      	bcc.n	80068d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800690a:	8bfb      	ldrh	r3, [r7, #30]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01e      	beq.n	800694e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691a:	461a      	mov	r2, r3
 800691c:	f107 0310 	add.w	r3, r7, #16
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
 8006930:	b2da      	uxtb	r2, r3
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	701a      	strb	r2, [r3, #0]
      i++;
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	3301      	adds	r3, #1
 800693a:	623b      	str	r3, [r7, #32]
      pDest++;
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	3301      	adds	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006942:	8bfb      	ldrh	r3, [r7, #30]
 8006944:	3b01      	subs	r3, #1
 8006946:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006948:	8bfb      	ldrh	r3, [r7, #30]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ea      	bne.n	8006924 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006950:	4618      	mov	r0, r3
 8006952:	372c      	adds	r7, #44	@ 0x2c
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d12c      	bne.n	80069d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db12      	blt.n	80069b0 <USB_EPSetStall+0x54>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e02b      	b.n	8006a2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db12      	blt.n	8006a0a <USB_EPSetStall+0xae>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00f      	beq.n	8006a0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d128      	bne.n	8006aa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	791b      	ldrb	r3, [r3, #4]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d003      	beq.n	8006a84 <USB_EPClearStall+0x4c>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	791b      	ldrb	r3, [r3, #4]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d138      	bne.n	8006af6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	e027      	b.n	8006af6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ac4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d003      	beq.n	8006ad6 <USB_EPClearStall+0x9e>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	791b      	ldrb	r3, [r3, #4]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d10f      	bne.n	8006af6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006af4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b38:	68f9      	ldr	r1, [r7, #12]
 8006b3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b7e:	f023 0302 	bic.w	r3, r3, #2
 8006b82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bac:	f023 0303 	bic.w	r3, r3, #3
 8006bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bec:	68fb      	ldr	r3, [r7, #12]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0c1b      	lsrs	r3, r3, #16
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	b29b      	uxth	r3, r3
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c90:	68bb      	ldr	r3, [r7, #8]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	01db      	lsls	r3, r3, #7
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cec:	68bb      	ldr	r3, [r7, #8]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0301 	and.w	r3, r3, #1
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	460b      	mov	r3, r1
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	333c      	adds	r3, #60	@ 0x3c
 8006d72:	3304      	adds	r3, #4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4a26      	ldr	r2, [pc, #152]	@ (8006e14 <USB_EP0_OutStart+0xb8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d90a      	bls.n	8006d96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d90:	d101      	bne.n	8006d96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e037      	b.n	8006e06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc4:	f043 0318 	orr.w	r3, r3, #24
 8006dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dd8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ddc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10f      	bne.n	8006e04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dfe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	4f54300a 	.word	0x4f54300a

08006e18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e30:	d901      	bls.n	8006e36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e022      	b.n	8006e7c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	daf2      	bge.n	8006e24 <USB_CoreReset+0xc>

  count = 10U;
 8006e3e:	230a      	movs	r3, #10
 8006e40:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006e42:	e002      	b.n	8006e4a <USB_CoreReset+0x32>
  {
    count--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f9      	bne.n	8006e44 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f043 0201 	orr.w	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e68:	d901      	bls.n	8006e6e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e006      	b.n	8006e7c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d0f0      	beq.n	8006e5c <USB_CoreReset+0x44>

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e98:	f002 fcfa 	bl	8009890 <USBD_static_malloc>
 8006e9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32b0      	adds	r2, #176	@ 0xb0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0d4      	b.n	8007062 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006eb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f003 fa85 	bl	800a3ce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32b0      	adds	r2, #176	@ 0xb0
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32b0      	adds	r2, #176	@ 0xb0
 8006ede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7c1b      	ldrb	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d138      	bne.n	8006f62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800706c <USBD_CDC_Init+0x1e4>)
 8006ef2:	7819      	ldrb	r1, [r3, #0]
 8006ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ef8:	2202      	movs	r2, #2
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f002 fba5 	bl	800964a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f00:	4b5a      	ldr	r3, [pc, #360]	@ (800706c <USBD_CDC_Init+0x1e4>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 020f 	and.w	r2, r3, #15
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	3323      	adds	r3, #35	@ 0x23
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f1a:	4b55      	ldr	r3, [pc, #340]	@ (8007070 <USBD_CDC_Init+0x1e8>)
 8006f1c:	7819      	ldrb	r1, [r3, #0]
 8006f1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f22:	2202      	movs	r2, #2
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f002 fb90 	bl	800964a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f2a:	4b51      	ldr	r3, [pc, #324]	@ (8007070 <USBD_CDC_Init+0x1e8>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f003 020f 	and.w	r2, r3, #15
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f42:	2201      	movs	r2, #1
 8006f44:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f46:	4b4b      	ldr	r3, [pc, #300]	@ (8007074 <USBD_CDC_Init+0x1ec>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 020f 	and.w	r2, r3, #15
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	331c      	adds	r3, #28
 8006f5c:	2210      	movs	r2, #16
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e035      	b.n	8006fce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f62:	4b42      	ldr	r3, [pc, #264]	@ (800706c <USBD_CDC_Init+0x1e4>)
 8006f64:	7819      	ldrb	r1, [r3, #0]
 8006f66:	2340      	movs	r3, #64	@ 0x40
 8006f68:	2202      	movs	r2, #2
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f002 fb6d 	bl	800964a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f70:	4b3e      	ldr	r3, [pc, #248]	@ (800706c <USBD_CDC_Init+0x1e4>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3323      	adds	r3, #35	@ 0x23
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f8a:	4b39      	ldr	r3, [pc, #228]	@ (8007070 <USBD_CDC_Init+0x1e8>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	2340      	movs	r3, #64	@ 0x40
 8006f90:	2202      	movs	r2, #2
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fb59 	bl	800964a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f98:	4b35      	ldr	r3, [pc, #212]	@ (8007070 <USBD_CDC_Init+0x1e8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 020f 	and.w	r2, r3, #15
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8007074 <USBD_CDC_Init+0x1ec>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	331c      	adds	r3, #28
 8006fca:	2210      	movs	r2, #16
 8006fcc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fce:	4b29      	ldr	r3, [pc, #164]	@ (8007074 <USBD_CDC_Init+0x1ec>)
 8006fd0:	7819      	ldrb	r1, [r3, #0]
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f002 fb37 	bl	800964a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006fdc:	4b25      	ldr	r3, [pc, #148]	@ (8007074 <USBD_CDC_Init+0x1ec>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3323      	adds	r3, #35	@ 0x23
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	33b0      	adds	r3, #176	@ 0xb0
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800702c:	2302      	movs	r3, #2
 800702e:	e018      	b.n	8007062 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7c1b      	ldrb	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007038:	4b0d      	ldr	r3, [pc, #52]	@ (8007070 <USBD_CDC_Init+0x1e8>)
 800703a:	7819      	ldrb	r1, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fbee 	bl	8009828 <USBD_LL_PrepareReceive>
 800704c:	e008      	b.n	8007060 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800704e:	4b08      	ldr	r3, [pc, #32]	@ (8007070 <USBD_CDC_Init+0x1e8>)
 8007050:	7819      	ldrb	r1, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007058:	2340      	movs	r3, #64	@ 0x40
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f002 fbe4 	bl	8009828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000093 	.word	0x20000093
 8007070:	20000094 	.word	0x20000094
 8007074:	20000095 	.word	0x20000095

08007078 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007084:	4b3a      	ldr	r3, [pc, #232]	@ (8007170 <USBD_CDC_DeInit+0xf8>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f002 fb03 	bl	8009696 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007090:	4b37      	ldr	r3, [pc, #220]	@ (8007170 <USBD_CDC_DeInit+0xf8>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	3323      	adds	r3, #35	@ 0x23
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80070aa:	4b32      	ldr	r3, [pc, #200]	@ (8007174 <USBD_CDC_DeInit+0xfc>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f002 faf0 	bl	8009696 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007174 <USBD_CDC_DeInit+0xfc>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f003 020f 	and.w	r2, r3, #15
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070d2:	4b29      	ldr	r3, [pc, #164]	@ (8007178 <USBD_CDC_DeInit+0x100>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 fadc 	bl	8009696 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070de:	4b26      	ldr	r3, [pc, #152]	@ (8007178 <USBD_CDC_DeInit+0x100>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	3323      	adds	r3, #35	@ 0x23
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007178 <USBD_CDC_DeInit+0x100>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	331c      	adds	r3, #28
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	32b0      	adds	r2, #176	@ 0xb0
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01f      	beq.n	8007164 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	33b0      	adds	r3, #176	@ 0xb0
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32b0      	adds	r2, #176	@ 0xb0
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	4618      	mov	r0, r3
 8007148:	f002 fbb0 	bl	80098ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32b0      	adds	r2, #176	@ 0xb0
 8007156:	2100      	movs	r1, #0
 8007158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000093 	.word	0x20000093
 8007174:	20000094 	.word	0x20000094
 8007178:	20000095 	.word	0x20000095

0800717c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	32b0      	adds	r2, #176	@ 0xb0
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e0bf      	b.n	800732c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d050      	beq.n	800725a <USBD_CDC_Setup+0xde>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	f040 80af 	bne.w	800731c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88db      	ldrh	r3, [r3, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d03a      	beq.n	800723c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da1b      	bge.n	8007208 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	33b0      	adds	r3, #176	@ 0xb0
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	88d2      	ldrh	r2, [r2, #6]
 80071ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	2b07      	cmp	r3, #7
 80071f4:	bf28      	it	cs
 80071f6:	2307      	movcs	r3, #7
 80071f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	89fa      	ldrh	r2, [r7, #14]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fda9 	bl	8008d58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007206:	e090      	b.n	800732a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	785a      	ldrb	r2, [r3, #1]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	88db      	ldrh	r3, [r3, #6]
 8007216:	2b3f      	cmp	r3, #63	@ 0x3f
 8007218:	d803      	bhi.n	8007222 <USBD_CDC_Setup+0xa6>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	88db      	ldrh	r3, [r3, #6]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	e000      	b.n	8007224 <USBD_CDC_Setup+0xa8>
 8007222:	2240      	movs	r2, #64	@ 0x40
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800722a:	6939      	ldr	r1, [r7, #16]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007232:	461a      	mov	r2, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fdbe 	bl	8008db6 <USBD_CtlPrepareRx>
      break;
 800723a:	e076      	b.n	800732a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	33b0      	adds	r3, #176	@ 0xb0
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	7850      	ldrb	r0, [r2, #1]
 8007252:	2200      	movs	r2, #0
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	4798      	blx	r3
      break;
 8007258:	e067      	b.n	800732a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b0b      	cmp	r3, #11
 8007260:	d851      	bhi.n	8007306 <USBD_CDC_Setup+0x18a>
 8007262:	a201      	add	r2, pc, #4	@ (adr r2, 8007268 <USBD_CDC_Setup+0xec>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	08007299 	.word	0x08007299
 800726c:	08007315 	.word	0x08007315
 8007270:	08007307 	.word	0x08007307
 8007274:	08007307 	.word	0x08007307
 8007278:	08007307 	.word	0x08007307
 800727c:	08007307 	.word	0x08007307
 8007280:	08007307 	.word	0x08007307
 8007284:	08007307 	.word	0x08007307
 8007288:	08007307 	.word	0x08007307
 800728c:	08007307 	.word	0x08007307
 8007290:	080072c3 	.word	0x080072c3
 8007294:	080072ed 	.word	0x080072ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d107      	bne.n	80072b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072a4:	f107 030a 	add.w	r3, r7, #10
 80072a8:	2202      	movs	r2, #2
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fd53 	bl	8008d58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072b2:	e032      	b.n	800731a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fcd1 	bl	8008c5e <USBD_CtlError>
            ret = USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	75fb      	strb	r3, [r7, #23]
          break;
 80072c0:	e02b      	b.n	800731a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d107      	bne.n	80072de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072ce:	f107 030d 	add.w	r3, r7, #13
 80072d2:	2201      	movs	r2, #1
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fd3e 	bl	8008d58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072dc:	e01d      	b.n	800731a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fcbc 	bl	8008c5e <USBD_CtlError>
            ret = USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ea:	e016      	b.n	800731a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d00f      	beq.n	8007318 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fcaf 	bl	8008c5e <USBD_CtlError>
            ret = USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007304:	e008      	b.n	8007318 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fca8 	bl	8008c5e <USBD_CtlError>
          ret = USBD_FAIL;
 800730e:	2303      	movs	r3, #3
 8007310:	75fb      	strb	r3, [r7, #23]
          break;
 8007312:	e002      	b.n	800731a <USBD_CDC_Setup+0x19e>
          break;
 8007314:	bf00      	nop
 8007316:	e008      	b.n	800732a <USBD_CDC_Setup+0x1ae>
          break;
 8007318:	bf00      	nop
      }
      break;
 800731a:	e006      	b.n	800732a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fc9d 	bl	8008c5e <USBD_CtlError>
      ret = USBD_FAIL;
 8007324:	2303      	movs	r3, #3
 8007326:	75fb      	strb	r3, [r7, #23]
      break;
 8007328:	bf00      	nop
  }

  return (uint8_t)ret;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007346:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32b0      	adds	r2, #176	@ 0xb0
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	e065      	b.n	800742a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32b0      	adds	r2, #176	@ 0xb0
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f003 020f 	and.w	r2, r3, #15
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	440b      	add	r3, r1
 8007380:	3314      	adds	r3, #20
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d02f      	beq.n	80073e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	3314      	adds	r3, #20
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	f003 010f 	and.w	r1, r3, #15
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	460b      	mov	r3, r1
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	440b      	add	r3, r1
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4403      	add	r3, r0
 80073b0:	331c      	adds	r3, #28
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d112      	bne.n	80073e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	f003 020f 	and.w	r2, r3, #15
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	3314      	adds	r3, #20
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073da:	78f9      	ldrb	r1, [r7, #3]
 80073dc:	2300      	movs	r3, #0
 80073de:	2200      	movs	r2, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 fa00 	bl	80097e6 <USBD_LL_Transmit>
 80073e6:	e01f      	b.n	8007428 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	33b0      	adds	r3, #176	@ 0xb0
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	33b0      	adds	r3, #176	@ 0xb0
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	32b0      	adds	r2, #176	@ 0xb0
 8007448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	32b0      	adds	r2, #176	@ 0xb0
 8007458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	e01a      	b.n	800749a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f002 f9fe 	bl	800986a <USBD_LL_GetRxDataSize>
 800746e:	4602      	mov	r2, r0
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	33b0      	adds	r3, #176	@ 0xb0
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007494:	4611      	mov	r1, r2
 8007496:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	32b0      	adds	r2, #176	@ 0xb0
 80074b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e024      	b.n	800750e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	33b0      	adds	r3, #176	@ 0xb0
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d019      	beq.n	800750c <USBD_CDC_EP0_RxReady+0x6a>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80074de:	2bff      	cmp	r3, #255	@ 0xff
 80074e0:	d014      	beq.n	800750c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	33b0      	adds	r3, #176	@ 0xb0
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80074fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007502:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	22ff      	movs	r2, #255	@ 0xff
 8007508:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007520:	2182      	movs	r1, #130	@ 0x82
 8007522:	4818      	ldr	r0, [pc, #96]	@ (8007584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007524:	f000 fd62 	bl	8007fec <USBD_GetEpDesc>
 8007528:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800752a:	2101      	movs	r1, #1
 800752c:	4815      	ldr	r0, [pc, #84]	@ (8007584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800752e:	f000 fd5d 	bl	8007fec <USBD_GetEpDesc>
 8007532:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007534:	2181      	movs	r1, #129	@ 0x81
 8007536:	4813      	ldr	r0, [pc, #76]	@ (8007584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007538:	f000 fd58 	bl	8007fec <USBD_GetEpDesc>
 800753c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2210      	movs	r2, #16
 8007548:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2200      	movs	r2, #0
 8007554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007558:	711a      	strb	r2, [r3, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d006      	beq.n	8007572 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800756c:	711a      	strb	r2, [r3, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2243      	movs	r2, #67	@ 0x43
 8007576:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007578:	4b02      	ldr	r3, [pc, #8]	@ (8007584 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000050 	.word	0x20000050

08007588 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007590:	2182      	movs	r1, #130	@ 0x82
 8007592:	4818      	ldr	r0, [pc, #96]	@ (80075f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007594:	f000 fd2a 	bl	8007fec <USBD_GetEpDesc>
 8007598:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800759a:	2101      	movs	r1, #1
 800759c:	4815      	ldr	r0, [pc, #84]	@ (80075f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800759e:	f000 fd25 	bl	8007fec <USBD_GetEpDesc>
 80075a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075a4:	2181      	movs	r1, #129	@ 0x81
 80075a6:	4813      	ldr	r0, [pc, #76]	@ (80075f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075a8:	f000 fd20 	bl	8007fec <USBD_GetEpDesc>
 80075ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2210      	movs	r2, #16
 80075b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2200      	movs	r2, #0
 80075c4:	711a      	strb	r2, [r3, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f042 0202 	orr.w	r2, r2, #2
 80075cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d006      	beq.n	80075e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	711a      	strb	r2, [r3, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f042 0202 	orr.w	r2, r2, #2
 80075e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2243      	movs	r2, #67	@ 0x43
 80075e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075e8:	4b02      	ldr	r3, [pc, #8]	@ (80075f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000050 	.word	0x20000050

080075f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007600:	2182      	movs	r1, #130	@ 0x82
 8007602:	4818      	ldr	r0, [pc, #96]	@ (8007664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007604:	f000 fcf2 	bl	8007fec <USBD_GetEpDesc>
 8007608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800760a:	2101      	movs	r1, #1
 800760c:	4815      	ldr	r0, [pc, #84]	@ (8007664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800760e:	f000 fced 	bl	8007fec <USBD_GetEpDesc>
 8007612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007614:	2181      	movs	r1, #129	@ 0x81
 8007616:	4813      	ldr	r0, [pc, #76]	@ (8007664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007618:	f000 fce8 	bl	8007fec <USBD_GetEpDesc>
 800761c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2210      	movs	r2, #16
 8007628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2200      	movs	r2, #0
 8007634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007638:	711a      	strb	r2, [r3, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800764c:	711a      	strb	r2, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2243      	movs	r2, #67	@ 0x43
 8007656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007658:	4b02      	ldr	r3, [pc, #8]	@ (8007664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000050 	.word	0x20000050

08007668 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	220a      	movs	r2, #10
 8007674:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007676:	4b03      	ldr	r3, [pc, #12]	@ (8007684 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	2000000c 	.word	0x2000000c

08007688 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007698:	2303      	movs	r3, #3
 800769a:	e009      	b.n	80076b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	33b0      	adds	r3, #176	@ 0xb0
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	32b0      	adds	r2, #176	@ 0xb0
 80076d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076de:	2303      	movs	r3, #3
 80076e0:	e008      	b.n	80076f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	32b0      	adds	r2, #176	@ 0xb0
 8007714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007718:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	e004      	b.n	800772e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
	...

0800773c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	32b0      	adds	r2, #176	@ 0xb0
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	e025      	b.n	80077ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007768:	2b00      	cmp	r3, #0
 800776a:	d11f      	bne.n	80077ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2201      	movs	r2, #1
 8007770:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007774:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <USBD_CDC_TransmitPacket+0x7c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4403      	add	r3, r0
 800778e:	3314      	adds	r3, #20
 8007790:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007792:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <USBD_CDC_TransmitPacket+0x7c>)
 8007794:	7819      	ldrb	r1, [r3, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f002 f81f 	bl	80097e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000093 	.word	0x20000093

080077bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32b0      	adds	r2, #176	@ 0xb0
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	32b0      	adds	r2, #176	@ 0xb0
 80077de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e018      	b.n	800781c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	7c1b      	ldrb	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <USBD_CDC_ReceivePacket+0x68>)
 80077f4:	7819      	ldrb	r1, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f002 f811 	bl	8009828 <USBD_LL_PrepareReceive>
 8007806:	e008      	b.n	800781a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <USBD_CDC_ReceivePacket+0x68>)
 800780a:	7819      	ldrb	r1, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007812:	2340      	movs	r3, #64	@ 0x40
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f002 f807 	bl	8009828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000094 	.word	0x20000094

08007828 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e01f      	b.n	8007880 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	79fa      	ldrb	r2, [r7, #7]
 8007872:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 fe81 	bl	800957c <USBD_LL_Init>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	e025      	b.n	80078ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	32ae      	adds	r2, #174	@ 0xae
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00f      	beq.n	80078dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	@ 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	f107 020e 	add.w	r2, r7, #14
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	4602      	mov	r2, r0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fe89 	bl	8009614 <USBD_LL_Start>
 8007902:	4603      	mov	r3, r0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	4611      	mov	r1, r2
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 f922 	bl	8008bea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d01a      	beq.n	8007a00 <USBD_LL_SetupStage+0x72>
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d822      	bhi.n	8007a14 <USBD_LL_SetupStage+0x86>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <USBD_LL_SetupStage+0x4a>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d00a      	beq.n	80079ec <USBD_LL_SetupStage+0x5e>
 80079d6:	e01d      	b.n	8007a14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb77 	bl	80080d4 <USBD_StdDevReq>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ea:	e020      	b.n	8007a2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fbdf 	bl	80081b8 <USBD_StdItfReq>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
      break;
 80079fe:	e016      	b.n	8007a2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc41 	bl	8008290 <USBD_StdEPReq>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73fb      	strb	r3, [r7, #15]
      break;
 8007a12:	e00c      	b.n	8007a2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 fe56 	bl	80096d4 <USBD_LL_StallEP>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2c:	bf00      	nop
  }

  return ret;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	460b      	mov	r3, r1
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d177      	bne.n	8007b40 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f040 80a1 	bne.w	8007ba6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	8992      	ldrh	r2, [r2, #12]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d91c      	bls.n	8007aaa <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	8992      	ldrh	r2, [r2, #12]
 8007a78:	1a9a      	subs	r2, r3, r2
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	8992      	ldrh	r2, [r2, #12]
 8007a86:	441a      	add	r2, r3
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6919      	ldr	r1, [r3, #16]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	899b      	ldrh	r3, [r3, #12]
 8007a94:	461a      	mov	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	bf38      	it	cc
 8007a9e:	4613      	movcc	r3, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f001 f9a8 	bl	8008df8 <USBD_CtlContinueRx>
 8007aa8:	e07d      	b.n	8007ba6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ab0:	f003 031f 	and.w	r3, r3, #31
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d014      	beq.n	8007ae2 <USBD_LL_DataOutStage+0xaa>
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d81d      	bhi.n	8007af8 <USBD_LL_DataOutStage+0xc0>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <USBD_LL_DataOutStage+0x8e>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d003      	beq.n	8007acc <USBD_LL_DataOutStage+0x94>
 8007ac4:	e018      	b.n	8007af8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8007aca:	e018      	b.n	8007afe <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fa6e 	bl	8007fb8 <USBD_CoreFindIF>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75bb      	strb	r3, [r7, #22]
            break;
 8007ae0:	e00d      	b.n	8007afe <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fa70 	bl	8007fd2 <USBD_CoreFindEP>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75bb      	strb	r3, [r7, #22]
            break;
 8007af6:	e002      	b.n	8007afe <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75bb      	strb	r3, [r7, #22]
            break;
 8007afc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d119      	bne.n	8007b38 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d113      	bne.n	8007b38 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b10:	7dba      	ldrb	r2, [r7, #22]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	32ae      	adds	r2, #174	@ 0xae
 8007b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007b20:	7dba      	ldrb	r2, [r7, #22]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b28:	7dba      	ldrb	r2, [r7, #22]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	32ae      	adds	r2, #174	@ 0xae
 8007b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f001 f96e 	bl	8008e1a <USBD_CtlSendStatus>
 8007b3e:	e032      	b.n	8007ba6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fa41 	bl	8007fd2 <USBD_CoreFindEP>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b54:	7dbb      	ldrb	r3, [r7, #22]
 8007b56:	2bff      	cmp	r3, #255	@ 0xff
 8007b58:	d025      	beq.n	8007ba6 <USBD_LL_DataOutStage+0x16e>
 8007b5a:	7dbb      	ldrb	r3, [r7, #22]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d122      	bne.n	8007ba6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d117      	bne.n	8007b9c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b6c:	7dba      	ldrb	r2, [r7, #22]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	32ae      	adds	r2, #174	@ 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00f      	beq.n	8007b9c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007b7c:	7dba      	ldrb	r2, [r7, #22]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b84:	7dba      	ldrb	r2, [r7, #22]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	32ae      	adds	r2, #174	@ 0xae
 8007b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	7afa      	ldrb	r2, [r7, #11]
 8007b92:	4611      	mov	r1, r2
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	4798      	blx	r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	e000      	b.n	8007ba8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d178      	bne.n	8007cb6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d163      	bne.n	8007c9c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	8992      	ldrh	r2, [r2, #12]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d91c      	bls.n	8007c1a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	8992      	ldrh	r2, [r2, #12]
 8007be8:	1a9a      	subs	r2, r3, r2
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	8992      	ldrh	r2, [r2, #12]
 8007bf6:	441a      	add	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6919      	ldr	r1, [r3, #16]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 f8c4 	bl	8008d94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f001 fe08 	bl	8009828 <USBD_LL_PrepareReceive>
 8007c18:	e040      	b.n	8007c9c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	899b      	ldrh	r3, [r3, #12]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d11c      	bne.n	8007c62 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d316      	bcc.n	8007c62 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d20f      	bcs.n	8007c62 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f001 f8a4 	bl	8008d94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c54:	2300      	movs	r3, #0
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f001 fde4 	bl	8009828 <USBD_LL_PrepareReceive>
 8007c60:	e01c      	b.n	8007c9c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d10f      	bne.n	8007c8e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c8e:	2180      	movs	r1, #128	@ 0x80
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f001 fd1f 	bl	80096d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f001 f8d2 	bl	8008e40 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d03a      	beq.n	8007d1c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff fe30 	bl	800790c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007cb4:	e032      	b.n	8007d1c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f986 	bl	8007fd2 <USBD_CoreFindEP>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2bff      	cmp	r3, #255	@ 0xff
 8007cce:	d025      	beq.n	8007d1c <USBD_LL_DataInStage+0x16c>
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d122      	bne.n	8007d1c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d11c      	bne.n	8007d1c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ce2:	7dfa      	ldrb	r2, [r7, #23]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	32ae      	adds	r2, #174	@ 0xae
 8007ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d014      	beq.n	8007d1c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007cf2:	7dfa      	ldrb	r2, [r7, #23]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cfa:	7dfa      	ldrb	r2, [r7, #23]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	32ae      	adds	r2, #174	@ 0xae
 8007d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	7afa      	ldrb	r2, [r7, #11]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	4798      	blx	r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d12:	7dbb      	ldrb	r3, [r7, #22]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007d18:	7dbb      	ldrb	r3, [r7, #22]
 8007d1a:	e000      	b.n	8007d1e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d014      	beq.n	8007d8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6852      	ldr	r2, [r2, #4]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d8c:	2340      	movs	r3, #64	@ 0x40
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fc59 	bl	800964a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2240      	movs	r2, #64	@ 0x40
 8007da4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007da8:	2340      	movs	r3, #64	@ 0x40
 8007daa:	2200      	movs	r2, #0
 8007dac:	2180      	movs	r1, #128	@ 0x80
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 fc4b 	bl	800964a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2240      	movs	r2, #64	@ 0x40
 8007dc0:	841a      	strh	r2, [r3, #32]

  return ret;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d006      	beq.n	8007e0e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2204      	movs	r2, #4
 8007e12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d106      	bne.n	8007e46 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d110      	bne.n	8007e8a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	32ae      	adds	r2, #174	@ 0xae
 8007eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e01c      	b.n	8007ef0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d115      	bne.n	8007eee <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	32ae      	adds	r2, #174	@ 0xae
 8007ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32ae      	adds	r2, #174	@ 0xae
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	32ae      	adds	r2, #174	@ 0xae
 8007f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e01c      	b.n	8007f54 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d115      	bne.n	8007f52 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	32ae      	adds	r2, #174	@ 0xae
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	32ae      	adds	r2, #174	@ 0xae
 8007f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00e      	beq.n	8007fae <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6852      	ldr	r2, [r2, #4]
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007faa:	2303      	movs	r3, #3
 8007fac:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	885b      	ldrh	r3, [r3, #2]
 8008008:	b29b      	uxth	r3, r3
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	7812      	ldrb	r2, [r2, #0]
 800800e:	4293      	cmp	r3, r2
 8008010:	d91f      	bls.n	8008052 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008018:	e013      	b.n	8008042 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800801a:	f107 030a 	add.w	r3, r7, #10
 800801e:	4619      	mov	r1, r3
 8008020:	6978      	ldr	r0, [r7, #20]
 8008022:	f000 f81b 	bl	800805c <USBD_GetNextDesc>
 8008026:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b05      	cmp	r3, #5
 800802e:	d108      	bne.n	8008042 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	789b      	ldrb	r3, [r3, #2]
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	429a      	cmp	r2, r3
 800803c:	d008      	beq.n	8008050 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	b29a      	uxth	r2, r3
 8008048:	897b      	ldrh	r3, [r7, #10]
 800804a:	429a      	cmp	r2, r3
 800804c:	d8e5      	bhi.n	800801a <USBD_GetEpDesc+0x2e>
 800804e:	e000      	b.n	8008052 <USBD_GetEpDesc+0x66>
          break;
 8008050:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008052:	693b      	ldr	r3, [r7, #16]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	4413      	add	r3, r2
 8008074:	b29a      	uxth	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	3301      	adds	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	b21a      	sxth	r2, r3
 80080ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080be:	4313      	orrs	r3, r2
 80080c0:	b21b      	sxth	r3, r3
 80080c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080c4:	89fb      	ldrh	r3, [r7, #14]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d005      	beq.n	80080fa <USBD_StdDevReq+0x26>
 80080ee:	2b40      	cmp	r3, #64	@ 0x40
 80080f0:	d857      	bhi.n	80081a2 <USBD_StdDevReq+0xce>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00f      	beq.n	8008116 <USBD_StdDevReq+0x42>
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d153      	bne.n	80081a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	32ae      	adds	r2, #174	@ 0xae
 8008104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
      break;
 8008114:	e04a      	b.n	80081ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b09      	cmp	r3, #9
 800811c:	d83b      	bhi.n	8008196 <USBD_StdDevReq+0xc2>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <USBD_StdDevReq+0x50>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008179 	.word	0x08008179
 8008128:	0800818d 	.word	0x0800818d
 800812c:	08008197 	.word	0x08008197
 8008130:	08008183 	.word	0x08008183
 8008134:	08008197 	.word	0x08008197
 8008138:	08008157 	.word	0x08008157
 800813c:	0800814d 	.word	0x0800814d
 8008140:	08008197 	.word	0x08008197
 8008144:	0800816f 	.word	0x0800816f
 8008148:	08008161 	.word	0x08008161
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa3e 	bl	80085d0 <USBD_GetDescriptor>
          break;
 8008154:	e024      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fba3 	bl	80088a4 <USBD_SetAddress>
          break;
 800815e:	e01f      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fbe2 	bl	800892c <USBD_SetConfig>
 8008168:	4603      	mov	r3, r0
 800816a:	73fb      	strb	r3, [r7, #15]
          break;
 800816c:	e018      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc85 	bl	8008a80 <USBD_GetConfig>
          break;
 8008176:	e013      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fcb6 	bl	8008aec <USBD_GetStatus>
          break;
 8008180:	e00e      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fce5 	bl	8008b54 <USBD_SetFeature>
          break;
 800818a:	e009      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fd09 	bl	8008ba6 <USBD_ClrFeature>
          break;
 8008194:	e004      	b.n	80081a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd60 	bl	8008c5e <USBD_CtlError>
          break;
 800819e:	bf00      	nop
      }
      break;
 80081a0:	e004      	b.n	80081ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fd5a 	bl	8008c5e <USBD_CtlError>
      break;
 80081aa:	bf00      	nop
  }

  return ret;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop

080081b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081ce:	2b40      	cmp	r3, #64	@ 0x40
 80081d0:	d005      	beq.n	80081de <USBD_StdItfReq+0x26>
 80081d2:	2b40      	cmp	r3, #64	@ 0x40
 80081d4:	d852      	bhi.n	800827c <USBD_StdItfReq+0xc4>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <USBD_StdItfReq+0x26>
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d14e      	bne.n	800827c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d840      	bhi.n	800826e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	889b      	ldrh	r3, [r3, #4]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d836      	bhi.n	8008264 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	889b      	ldrh	r3, [r3, #4]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff feda 	bl	8007fb8 <USBD_CoreFindIF>
 8008204:	4603      	mov	r3, r0
 8008206:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2bff      	cmp	r3, #255	@ 0xff
 800820c:	d01d      	beq.n	800824a <USBD_StdItfReq+0x92>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d11a      	bne.n	800824a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008214:	7bba      	ldrb	r2, [r7, #14]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32ae      	adds	r2, #174	@ 0xae
 800821a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00f      	beq.n	8008244 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008224:	7bba      	ldrb	r2, [r7, #14]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800822c:	7bba      	ldrb	r2, [r7, #14]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	32ae      	adds	r2, #174	@ 0xae
 8008232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008242:	e004      	b.n	800824e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008248:	e001      	b.n	800824e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	88db      	ldrh	r3, [r3, #6]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d110      	bne.n	8008278 <USBD_StdItfReq+0xc0>
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10d      	bne.n	8008278 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fddc 	bl	8008e1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008262:	e009      	b.n	8008278 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fcf9 	bl	8008c5e <USBD_CtlError>
          break;
 800826c:	e004      	b.n	8008278 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fcf4 	bl	8008c5e <USBD_CtlError>
          break;
 8008276:	e000      	b.n	800827a <USBD_StdItfReq+0xc2>
          break;
 8008278:	bf00      	nop
      }
      break;
 800827a:	e004      	b.n	8008286 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fced 	bl	8008c5e <USBD_CtlError>
      break;
 8008284:	bf00      	nop
  }

  return ret;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082ac:	2b40      	cmp	r3, #64	@ 0x40
 80082ae:	d007      	beq.n	80082c0 <USBD_StdEPReq+0x30>
 80082b0:	2b40      	cmp	r3, #64	@ 0x40
 80082b2:	f200 8181 	bhi.w	80085b8 <USBD_StdEPReq+0x328>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02a      	beq.n	8008310 <USBD_StdEPReq+0x80>
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	f040 817c 	bne.w	80085b8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fe84 	bl	8007fd2 <USBD_CoreFindEP>
 80082ca:	4603      	mov	r3, r0
 80082cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082ce:	7b7b      	ldrb	r3, [r7, #13]
 80082d0:	2bff      	cmp	r3, #255	@ 0xff
 80082d2:	f000 8176 	beq.w	80085c2 <USBD_StdEPReq+0x332>
 80082d6:	7b7b      	ldrb	r3, [r7, #13]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 8172 	bne.w	80085c2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80082de:	7b7a      	ldrb	r2, [r7, #13]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082e6:	7b7a      	ldrb	r2, [r7, #13]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	32ae      	adds	r2, #174	@ 0xae
 80082ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8165 	beq.w	80085c2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082f8:	7b7a      	ldrb	r2, [r7, #13]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	32ae      	adds	r2, #174	@ 0xae
 80082fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800830e:	e158      	b.n	80085c2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d008      	beq.n	800832a <USBD_StdEPReq+0x9a>
 8008318:	2b03      	cmp	r3, #3
 800831a:	f300 8147 	bgt.w	80085ac <USBD_StdEPReq+0x31c>
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 809b 	beq.w	800845a <USBD_StdEPReq+0x1ca>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d03c      	beq.n	80083a2 <USBD_StdEPReq+0x112>
 8008328:	e140      	b.n	80085ac <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d002      	beq.n	800833c <USBD_StdEPReq+0xac>
 8008336:	2b03      	cmp	r3, #3
 8008338:	d016      	beq.n	8008368 <USBD_StdEPReq+0xd8>
 800833a:	e02c      	b.n	8008396 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00d      	beq.n	800835e <USBD_StdEPReq+0xce>
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b80      	cmp	r3, #128	@ 0x80
 8008346:	d00a      	beq.n	800835e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 f9c1 	bl	80096d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008352:	2180      	movs	r1, #128	@ 0x80
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f9bd 	bl	80096d4 <USBD_LL_StallEP>
 800835a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800835c:	e020      	b.n	80083a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fc7c 	bl	8008c5e <USBD_CtlError>
              break;
 8008366:	e01b      	b.n	80083a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10e      	bne.n	800838e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <USBD_StdEPReq+0xfe>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b80      	cmp	r3, #128	@ 0x80
 800837a:	d008      	beq.n	800838e <USBD_StdEPReq+0xfe>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	88db      	ldrh	r3, [r3, #6]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d104      	bne.n	800838e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 f9a3 	bl	80096d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fd43 	bl	8008e1a <USBD_CtlSendStatus>

              break;
 8008394:	e004      	b.n	80083a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fc60 	bl	8008c5e <USBD_CtlError>
              break;
 800839e:	bf00      	nop
          }
          break;
 80083a0:	e109      	b.n	80085b6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d002      	beq.n	80083b4 <USBD_StdEPReq+0x124>
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d016      	beq.n	80083e0 <USBD_StdEPReq+0x150>
 80083b2:	e04b      	b.n	800844c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00d      	beq.n	80083d6 <USBD_StdEPReq+0x146>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b80      	cmp	r3, #128	@ 0x80
 80083be:	d00a      	beq.n	80083d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f985 	bl	80096d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083ca:	2180      	movs	r1, #128	@ 0x80
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f981 	bl	80096d4 <USBD_LL_StallEP>
 80083d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083d4:	e040      	b.n	8008458 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc40 	bl	8008c5e <USBD_CtlError>
              break;
 80083de:	e03b      	b.n	8008458 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	885b      	ldrh	r3, [r3, #2]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d136      	bne.n	8008456 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 f98b 	bl	8009712 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fd0c 	bl	8008e1a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fde3 	bl	8007fd2 <USBD_CoreFindEP>
 800840c:	4603      	mov	r3, r0
 800840e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008410:	7b7b      	ldrb	r3, [r7, #13]
 8008412:	2bff      	cmp	r3, #255	@ 0xff
 8008414:	d01f      	beq.n	8008456 <USBD_StdEPReq+0x1c6>
 8008416:	7b7b      	ldrb	r3, [r7, #13]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11c      	bne.n	8008456 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800841c:	7b7a      	ldrb	r2, [r7, #13]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008424:	7b7a      	ldrb	r2, [r7, #13]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	32ae      	adds	r2, #174	@ 0xae
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d010      	beq.n	8008456 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008434:	7b7a      	ldrb	r2, [r7, #13]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	32ae      	adds	r2, #174	@ 0xae
 800843a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800844a:	e004      	b.n	8008456 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fc05 	bl	8008c5e <USBD_CtlError>
              break;
 8008454:	e000      	b.n	8008458 <USBD_StdEPReq+0x1c8>
              break;
 8008456:	bf00      	nop
          }
          break;
 8008458:	e0ad      	b.n	80085b6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d002      	beq.n	800846c <USBD_StdEPReq+0x1dc>
 8008466:	2b03      	cmp	r3, #3
 8008468:	d033      	beq.n	80084d2 <USBD_StdEPReq+0x242>
 800846a:	e099      	b.n	80085a0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <USBD_StdEPReq+0x1f2>
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b80      	cmp	r3, #128	@ 0x80
 8008476:	d004      	beq.n	8008482 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fbef 	bl	8008c5e <USBD_CtlError>
                break;
 8008480:	e093      	b.n	80085aa <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	da0b      	bge.n	80084a2 <USBD_StdEPReq+0x212>
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	3310      	adds	r3, #16
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	3304      	adds	r3, #4
 80084a0:	e00b      	b.n	80084ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4413      	add	r3, r2
 80084b8:	3304      	adds	r3, #4
 80084ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	330e      	adds	r3, #14
 80084c6:	2202      	movs	r2, #2
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc44 	bl	8008d58 <USBD_CtlSendData>
              break;
 80084d0:	e06b      	b.n	80085aa <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da11      	bge.n	80084fe <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	3323      	adds	r3, #35	@ 0x23
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d117      	bne.n	8008524 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fbb1 	bl	8008c5e <USBD_CtlError>
                  break;
 80084fc:	e055      	b.n	80085aa <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	f003 020f 	and.w	r2, r3, #15
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fb9e 	bl	8008c5e <USBD_CtlError>
                  break;
 8008522:	e042      	b.n	80085aa <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da0b      	bge.n	8008544 <USBD_StdEPReq+0x2b4>
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	3310      	adds	r3, #16
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	4413      	add	r3, r2
 8008540:	3304      	adds	r3, #4
 8008542:	e00b      	b.n	800855c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	4413      	add	r3, r2
 800855a:	3304      	adds	r3, #4
 800855c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <USBD_StdEPReq+0x2da>
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b80      	cmp	r3, #128	@ 0x80
 8008568:	d103      	bne.n	8008572 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	739a      	strb	r2, [r3, #14]
 8008570:	e00e      	b.n	8008590 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f8ea 	bl	8009750 <USBD_LL_IsStallEP>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2201      	movs	r2, #1
 8008586:	739a      	strb	r2, [r3, #14]
 8008588:	e002      	b.n	8008590 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2200      	movs	r2, #0
 800858e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	330e      	adds	r3, #14
 8008594:	2202      	movs	r2, #2
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fbdd 	bl	8008d58 <USBD_CtlSendData>
              break;
 800859e:	e004      	b.n	80085aa <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fb5b 	bl	8008c5e <USBD_CtlError>
              break;
 80085a8:	bf00      	nop
          }
          break;
 80085aa:	e004      	b.n	80085b6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fb55 	bl	8008c5e <USBD_CtlError>
          break;
 80085b4:	bf00      	nop
      }
      break;
 80085b6:	e005      	b.n	80085c4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fb4f 	bl	8008c5e <USBD_CtlError>
      break;
 80085c0:	e000      	b.n	80085c4 <USBD_StdEPReq+0x334>
      break;
 80085c2:	bf00      	nop
  }

  return ret;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	885b      	ldrh	r3, [r3, #2]
 80085ea:	0a1b      	lsrs	r3, r3, #8
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b06      	cmp	r3, #6
 80085f2:	f200 8128 	bhi.w	8008846 <USBD_GetDescriptor+0x276>
 80085f6:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <USBD_GetDescriptor+0x2c>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008631 	.word	0x08008631
 8008604:	08008671 	.word	0x08008671
 8008608:	08008847 	.word	0x08008847
 800860c:	08008847 	.word	0x08008847
 8008610:	080087e7 	.word	0x080087e7
 8008614:	08008813 	.word	0x08008813
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
      break;
 800862e:	e112      	b.n	8008856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7c1b      	ldrb	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10d      	bne.n	8008654 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	f107 0208 	add.w	r2, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	2202      	movs	r2, #2
 8008650:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008652:	e100      	b.n	8008856 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	f107 0208 	add.w	r2, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	2202      	movs	r2, #2
 800866c:	701a      	strb	r2, [r3, #0]
      break;
 800866e:	e0f2      	b.n	8008856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b05      	cmp	r3, #5
 8008678:	f200 80ac 	bhi.w	80087d4 <USBD_GetDescriptor+0x204>
 800867c:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <USBD_GetDescriptor+0xb4>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	0800869d 	.word	0x0800869d
 8008688:	080086d1 	.word	0x080086d1
 800868c:	08008705 	.word	0x08008705
 8008690:	08008739 	.word	0x08008739
 8008694:	0800876d 	.word	0x0800876d
 8008698:	080087a1 	.word	0x080087a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	7c12      	ldrb	r2, [r2, #16]
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086be:	e091      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 facb 	bl	8008c5e <USBD_CtlError>
            err++;
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	3301      	adds	r3, #1
 80086cc:	72fb      	strb	r3, [r7, #11]
          break;
 80086ce:	e089      	b.n	80087e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7c12      	ldrb	r2, [r2, #16]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f2:	e077      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fab1 	bl	8008c5e <USBD_CtlError>
            err++;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	3301      	adds	r3, #1
 8008700:	72fb      	strb	r3, [r7, #11]
          break;
 8008702:	e06f      	b.n	80087e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	7c12      	ldrb	r2, [r2, #16]
 800871c:	f107 0108 	add.w	r1, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008726:	e05d      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa97 	bl	8008c5e <USBD_CtlError>
            err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
          break;
 8008736:	e055      	b.n	80087e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	7c12      	ldrb	r2, [r2, #16]
 8008750:	f107 0108 	add.w	r1, r7, #8
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
 8008758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800875a:	e043      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa7d 	bl	8008c5e <USBD_CtlError>
            err++;
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	3301      	adds	r3, #1
 8008768:	72fb      	strb	r3, [r7, #11]
          break;
 800876a:	e03b      	b.n	80087e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	f107 0108 	add.w	r1, r7, #8
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800878e:	e029      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa63 	bl	8008c5e <USBD_CtlError>
            err++;
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	3301      	adds	r3, #1
 800879c:	72fb      	strb	r3, [r7, #11]
          break;
 800879e:	e021      	b.n	80087e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	7c12      	ldrb	r2, [r2, #16]
 80087b8:	f107 0108 	add.w	r1, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087c2:	e00f      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa49 	bl	8008c5e <USBD_CtlError>
            err++;
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
          break;
 80087d2:	e007      	b.n	80087e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa41 	bl	8008c5e <USBD_CtlError>
          err++;
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	3301      	adds	r3, #1
 80087e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087e2:	bf00      	nop
      }
      break;
 80087e4:	e037      	b.n	8008856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7c1b      	ldrb	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d109      	bne.n	8008802 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f6:	f107 0208 	add.w	r2, r7, #8
 80087fa:	4610      	mov	r0, r2
 80087fc:	4798      	blx	r3
 80087fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008800:	e029      	b.n	8008856 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa2a 	bl	8008c5e <USBD_CtlError>
        err++;
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	3301      	adds	r3, #1
 800880e:	72fb      	strb	r3, [r7, #11]
      break;
 8008810:	e021      	b.n	8008856 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7c1b      	ldrb	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10d      	bne.n	8008836 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008822:	f107 0208 	add.w	r2, r7, #8
 8008826:	4610      	mov	r0, r2
 8008828:	4798      	blx	r3
 800882a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	2207      	movs	r2, #7
 8008832:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008834:	e00f      	b.n	8008856 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fa10 	bl	8008c5e <USBD_CtlError>
        err++;
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	3301      	adds	r3, #1
 8008842:	72fb      	strb	r3, [r7, #11]
      break;
 8008844:	e007      	b.n	8008856 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa08 	bl	8008c5e <USBD_CtlError>
      err++;
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	3301      	adds	r3, #1
 8008852:	72fb      	strb	r3, [r7, #11]
      break;
 8008854:	bf00      	nop
  }

  if (err != 0U)
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d11e      	bne.n	800889a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	88db      	ldrh	r3, [r3, #6]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d016      	beq.n	8008892 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008864:	893b      	ldrh	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00e      	beq.n	8008888 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	88da      	ldrh	r2, [r3, #6]
 800886e:	893b      	ldrh	r3, [r7, #8]
 8008870:	4293      	cmp	r3, r2
 8008872:	bf28      	it	cs
 8008874:	4613      	movcs	r3, r2
 8008876:	b29b      	uxth	r3, r3
 8008878:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800887a:	893b      	ldrh	r3, [r7, #8]
 800887c:	461a      	mov	r2, r3
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa69 	bl	8008d58 <USBD_CtlSendData>
 8008886:	e009      	b.n	800889c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9e7 	bl	8008c5e <USBD_CtlError>
 8008890:	e004      	b.n	800889c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fac1 	bl	8008e1a <USBD_CtlSendStatus>
 8008898:	e000      	b.n	800889c <USBD_GetDescriptor+0x2cc>
    return;
 800889a:	bf00      	nop
  }
}
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop

080088a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	889b      	ldrh	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d131      	bne.n	800891a <USBD_SetAddress+0x76>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d12d      	bne.n	800891a <USBD_SetAddress+0x76>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	885b      	ldrh	r3, [r3, #2]
 80088c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80088c4:	d829      	bhi.n	800891a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	885b      	ldrh	r3, [r3, #2]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d104      	bne.n	80088e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f9bc 	bl	8008c5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e6:	e01d      	b.n	8008924 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7bfa      	ldrb	r2, [r7, #15]
 80088ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 ff57 	bl	80097a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa8d 	bl	8008e1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890e:	e009      	b.n	8008924 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	e004      	b.n	8008924 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f99e 	bl	8008c5e <USBD_CtlError>
  }
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	4b4e      	ldr	r3, [pc, #312]	@ (8008a7c <USBD_SetConfig+0x150>)
 8008942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008944:	4b4d      	ldr	r3, [pc, #308]	@ (8008a7c <USBD_SetConfig+0x150>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d905      	bls.n	8008958 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f985 	bl	8008c5e <USBD_CtlError>
    return USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e08c      	b.n	8008a72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d002      	beq.n	800896a <USBD_SetConfig+0x3e>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d029      	beq.n	80089bc <USBD_SetConfig+0x90>
 8008968:	e075      	b.n	8008a56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800896a:	4b44      	ldr	r3, [pc, #272]	@ (8008a7c <USBD_SetConfig+0x150>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d020      	beq.n	80089b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008972:	4b42      	ldr	r3, [pc, #264]	@ (8008a7c <USBD_SetConfig+0x150>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800897c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a7c <USBD_SetConfig+0x150>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7fe ffcd 	bl	8007922 <USBD_SetClassConfig>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d008      	beq.n	80089a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f962 	bl	8008c5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2202      	movs	r2, #2
 800899e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089a2:	e065      	b.n	8008a70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa38 	bl	8008e1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2203      	movs	r2, #3
 80089ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80089b2:	e05d      	b.n	8008a70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fa30 	bl	8008e1a <USBD_CtlSendStatus>
      break;
 80089ba:	e059      	b.n	8008a70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089bc:	4b2f      	ldr	r3, [pc, #188]	@ (8008a7c <USBD_SetConfig+0x150>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d112      	bne.n	80089ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80089cc:	4b2b      	ldr	r3, [pc, #172]	@ (8008a7c <USBD_SetConfig+0x150>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089d6:	4b29      	ldr	r3, [pc, #164]	@ (8008a7c <USBD_SetConfig+0x150>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7fe ffbc 	bl	800795a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa19 	bl	8008e1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089e8:	e042      	b.n	8008a70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089ea:	4b24      	ldr	r3, [pc, #144]	@ (8008a7c <USBD_SetConfig+0x150>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d02a      	beq.n	8008a4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7fe ffaa 	bl	800795a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a06:	4b1d      	ldr	r3, [pc, #116]	@ (8008a7c <USBD_SetConfig+0x150>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a10:	4b1a      	ldr	r3, [pc, #104]	@ (8008a7c <USBD_SetConfig+0x150>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fe ff83 	bl	8007922 <USBD_SetClassConfig>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00f      	beq.n	8008a46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f918 	bl	8008c5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fe ff8f 	bl	800795a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a44:	e014      	b.n	8008a70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f9e7 	bl	8008e1a <USBD_CtlSendStatus>
      break;
 8008a4c:	e010      	b.n	8008a70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f9e3 	bl	8008e1a <USBD_CtlSendStatus>
      break;
 8008a54:	e00c      	b.n	8008a70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f900 	bl	8008c5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a5e:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <USBD_SetConfig+0x150>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fe ff78 	bl	800795a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6e:	bf00      	nop
  }

  return ret;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000480 	.word	0x20000480

08008a80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	88db      	ldrh	r3, [r3, #6]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d004      	beq.n	8008a9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f8e2 	bl	8008c5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a9a:	e023      	b.n	8008ae4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	dc02      	bgt.n	8008aae <USBD_GetConfig+0x2e>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dc03      	bgt.n	8008ab4 <USBD_GetConfig+0x34>
 8008aac:	e015      	b.n	8008ada <USBD_GetConfig+0x5a>
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d00b      	beq.n	8008aca <USBD_GetConfig+0x4a>
 8008ab2:	e012      	b.n	8008ada <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3308      	adds	r3, #8
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f948 	bl	8008d58 <USBD_CtlSendData>
        break;
 8008ac8:	e00c      	b.n	8008ae4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f940 	bl	8008d58 <USBD_CtlSendData>
        break;
 8008ad8:	e004      	b.n	8008ae4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f8be 	bl	8008c5e <USBD_CtlError>
        break;
 8008ae2:	bf00      	nop
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	3b01      	subs	r3, #1
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d81e      	bhi.n	8008b42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	88db      	ldrh	r3, [r3, #6]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d004      	beq.n	8008b16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f8a5 	bl	8008c5e <USBD_CtlError>
        break;
 8008b14:	e01a      	b.n	8008b4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f043 0202 	orr.w	r2, r3, #2
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	330c      	adds	r3, #12
 8008b36:	2202      	movs	r2, #2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f90c 	bl	8008d58 <USBD_CtlSendData>
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f88a 	bl	8008c5e <USBD_CtlError>
      break;
 8008b4a:	bf00      	nop
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d107      	bne.n	8008b76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f953 	bl	8008e1a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b74:	e013      	b.n	8008b9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	885b      	ldrh	r3, [r3, #2]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d10b      	bne.n	8008b96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	889b      	ldrh	r3, [r3, #4]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f943 	bl	8008e1a <USBD_CtlSendStatus>
}
 8008b94:	e003      	b.n	8008b9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f860 	bl	8008c5e <USBD_CtlError>
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d80b      	bhi.n	8008bd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d10c      	bne.n	8008be0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f923 	bl	8008e1a <USBD_CtlSendStatus>
      }
      break;
 8008bd4:	e004      	b.n	8008be0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f840 	bl	8008c5e <USBD_CtlError>
      break;
 8008bde:	e000      	b.n	8008be2 <USBD_ClrFeature+0x3c>
      break;
 8008be0:	bf00      	nop
  }
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3301      	adds	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7ff fa3d 	bl	8008094 <SWAPBYTE>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3301      	adds	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fa30 	bl	8008094 <SWAPBYTE>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3301      	adds	r3, #1
 8008c46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff fa23 	bl	8008094 <SWAPBYTE>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	461a      	mov	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	80da      	strh	r2, [r3, #6]
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c68:	2180      	movs	r1, #128	@ 0x80
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fd32 	bl	80096d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c70:	2100      	movs	r1, #0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fd2e 	bl	80096d4 <USBD_LL_StallEP>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d042      	beq.n	8008d1c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c9a:	6938      	ldr	r0, [r7, #16]
 8008c9c:	f000 f842 	bl	8008d24 <USBD_GetLen>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008caa:	d808      	bhi.n	8008cbe <USBD_GetString+0x3e>
 8008cac:	6938      	ldr	r0, [r7, #16]
 8008cae:	f000 f839 	bl	8008d24 <USBD_GetLen>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	e001      	b.n	8008cc2 <USBD_GetString+0x42>
 8008cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	4413      	add	r3, r2
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7812      	ldrb	r2, [r2, #0]
 8008cd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	2203      	movs	r2, #3
 8008ce0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ce8:	e013      	b.n	8008d12 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	4413      	add	r3, r2
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	7812      	ldrb	r2, [r2, #0]
 8008cf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]
    idx++;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	4413      	add	r3, r2
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e7      	bne.n	8008cea <USBD_GetString+0x6a>
 8008d1a:	e000      	b.n	8008d1e <USBD_GetString+0x9e>
    return;
 8008d1c:	bf00      	nop
  }
}
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d34:	e005      	b.n	8008d42 <USBD_GetLen+0x1e>
  {
    len++;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f5      	bne.n	8008d36 <USBD_GetLen+0x12>
  }

  return len;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	2100      	movs	r1, #0
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fd2e 	bl	80097e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	2100      	movs	r1, #0
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 fd1d 	bl	80097e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	2100      	movs	r1, #0
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 fd1d 	bl	8009828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fd0c 	bl	8009828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2204      	movs	r2, #4
 8008e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2100      	movs	r1, #0
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fcd8 	bl	80097e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e50:	2300      	movs	r3, #0
 8008e52:	2200      	movs	r2, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fce6 	bl	8009828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4912      	ldr	r1, [pc, #72]	@ (8008eb8 <MX_USB_DEVICE_Init+0x50>)
 8008e70:	4812      	ldr	r0, [pc, #72]	@ (8008ebc <MX_USB_DEVICE_Init+0x54>)
 8008e72:	f7fe fcd9 	bl	8007828 <USBD_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e7c:	f7f8 fa58 	bl	8001330 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e80:	490f      	ldr	r1, [pc, #60]	@ (8008ec0 <MX_USB_DEVICE_Init+0x58>)
 8008e82:	480e      	ldr	r0, [pc, #56]	@ (8008ebc <MX_USB_DEVICE_Init+0x54>)
 8008e84:	f7fe fd00 	bl	8007888 <USBD_RegisterClass>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e8e:	f7f8 fa4f 	bl	8001330 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e92:	490c      	ldr	r1, [pc, #48]	@ (8008ec4 <MX_USB_DEVICE_Init+0x5c>)
 8008e94:	4809      	ldr	r0, [pc, #36]	@ (8008ebc <MX_USB_DEVICE_Init+0x54>)
 8008e96:	f7fe fbf7 	bl	8007688 <USBD_CDC_RegisterInterface>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ea0:	f7f8 fa46 	bl	8001330 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ea4:	4805      	ldr	r0, [pc, #20]	@ (8008ebc <MX_USB_DEVICE_Init+0x54>)
 8008ea6:	f7fe fd25 	bl	80078f4 <USBD_Start>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008eb0:	f7f8 fa3e 	bl	8001330 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008eb4:	bf00      	nop
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	200000ac 	.word	0x200000ac
 8008ebc:	20000484 	.word	0x20000484
 8008ec0:	20000018 	.word	0x20000018
 8008ec4:	20000098 	.word	0x20000098

08008ec8 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4905      	ldr	r1, [pc, #20]	@ (8008ee4 <CDC_Init_FS+0x1c>)
 8008ed0:	4805      	ldr	r0, [pc, #20]	@ (8008ee8 <CDC_Init_FS+0x20>)
 8008ed2:	f7fe fbf3 	bl	80076bc <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ed6:	4905      	ldr	r1, [pc, #20]	@ (8008eec <CDC_Init_FS+0x24>)
 8008ed8:	4803      	ldr	r0, [pc, #12]	@ (8008ee8 <CDC_Init_FS+0x20>)
 8008eda:	f7fe fc11 	bl	8007700 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008ede:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000f60 	.word	0x20000f60
 8008ee8:	20000484 	.word	0x20000484
 8008eec:	20000760 	.word	0x20000760

08008ef0 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8008ef4:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	2b23      	cmp	r3, #35	@ 0x23
 8008f14:	d84a      	bhi.n	8008fac <CDC_Control_FS+0xac>
 8008f16:	a201      	add	r2, pc, #4	@ (adr r2, 8008f1c <CDC_Control_FS+0x1c>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008fad 	.word	0x08008fad
 8008f20:	08008fad 	.word	0x08008fad
 8008f24:	08008fad 	.word	0x08008fad
 8008f28:	08008fad 	.word	0x08008fad
 8008f2c:	08008fad 	.word	0x08008fad
 8008f30:	08008fad 	.word	0x08008fad
 8008f34:	08008fad 	.word	0x08008fad
 8008f38:	08008fad 	.word	0x08008fad
 8008f3c:	08008fad 	.word	0x08008fad
 8008f40:	08008fad 	.word	0x08008fad
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	08008fad 	.word	0x08008fad
 8008f4c:	08008fad 	.word	0x08008fad
 8008f50:	08008fad 	.word	0x08008fad
 8008f54:	08008fad 	.word	0x08008fad
 8008f58:	08008fad 	.word	0x08008fad
 8008f5c:	08008fad 	.word	0x08008fad
 8008f60:	08008fad 	.word	0x08008fad
 8008f64:	08008fad 	.word	0x08008fad
 8008f68:	08008fad 	.word	0x08008fad
 8008f6c:	08008fad 	.word	0x08008fad
 8008f70:	08008fad 	.word	0x08008fad
 8008f74:	08008fad 	.word	0x08008fad
 8008f78:	08008fad 	.word	0x08008fad
 8008f7c:	08008fad 	.word	0x08008fad
 8008f80:	08008fad 	.word	0x08008fad
 8008f84:	08008fad 	.word	0x08008fad
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	08008fad 	.word	0x08008fad
 8008f94:	08008fad 	.word	0x08008fad
 8008f98:	08008fad 	.word	0x08008fad
 8008f9c:	08008fad 	.word	0x08008fad
 8008fa0:	08008fad 	.word	0x08008fad
 8008fa4:	08008fad 	.word	0x08008fad
 8008fa8:	08008fad 	.word	0x08008fad
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008fac:	bf00      	nop
	}

	return (USBD_OK);
 8008fae:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4805      	ldr	r0, [pc, #20]	@ (8008fe0 <CDC_Receive_FS+0x24>)
 8008fca:	f7fe fb99 	bl	8007700 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fce:	4804      	ldr	r0, [pc, #16]	@ (8008fe0 <CDC_Receive_FS+0x24>)
 8008fd0:	f7fe fbf4 	bl	80077bc <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008fd4:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000484 	.word	0x20000484

08008fe4 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800902c <CDC_Transmit_FS+0x48>)
 8008ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ffa:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8009006:	2301      	movs	r3, #1
 8009008:	e00b      	b.n	8009022 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800900a:	887b      	ldrh	r3, [r7, #2]
 800900c:	461a      	mov	r2, r3
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	4806      	ldr	r0, [pc, #24]	@ (800902c <CDC_Transmit_FS+0x48>)
 8009012:	f7fe fb53 	bl	80076bc <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009016:	4805      	ldr	r0, [pc, #20]	@ (800902c <CDC_Transmit_FS+0x48>)
 8009018:	f7fe fb90 	bl	800773c <USBD_CDC_TransmitPacket>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000484 	.word	0x20000484

08009030 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8009042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009046:	4618      	mov	r0, r3
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <_write>:

int _write(int fd, char *buf, int len)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
	if(fd != 1 || fd != 2){ //stdout or stderr
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d102      	bne.n	800906c <_write+0x18>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b02      	cmp	r3, #2
 800906a:	d001      	beq.n	8009070 <_write+0x1c>
		return 0;
 800906c:	2300      	movs	r3, #0
 800906e:	e029      	b.n	80090c4 <_write+0x70>
	}

	if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) //USB not configured yet? drop out
 8009070:	4b16      	ldr	r3, [pc, #88]	@ (80090cc <_write+0x78>)
 8009072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b03      	cmp	r3, #3
 800907a:	d001      	beq.n	8009080 <_write+0x2c>
		return len;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	e021      	b.n	80090c4 <_write+0x70>

	if(CDC_Transmit_FS((uint8_t *)buf, len) == USBD_OK) //Try once
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	b29b      	uxth	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	68b8      	ldr	r0, [r7, #8]
 8009088:	f7ff ffac 	bl	8008fe4 <CDC_Transmit_FS>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <_write+0x42>
		return len;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	e016      	b.n	80090c4 <_write+0x70>

	uint32_t t0 = HAL_GetTick();
 8009096:	f7f8 fc2f 	bl	80018f8 <HAL_GetTick>
 800909a:	6178      	str	r0, [r7, #20]
	while (CDC_Transmit_FS((uint8_t*)buf, len) == USBD_BUSY)
 800909c:	e006      	b.n	80090ac <_write+0x58>
		if (HAL_GetTick() - t0 > 2) break;     // 2 ms guard
 800909e:	f7f8 fc2b 	bl	80018f8 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d809      	bhi.n	80090c0 <_write+0x6c>
	while (CDC_Transmit_FS((uint8_t*)buf, len) == USBD_BUSY)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	4619      	mov	r1, r3
 80090b2:	68b8      	ldr	r0, [r7, #8]
 80090b4:	f7ff ff96 	bl	8008fe4 <CDC_Transmit_FS>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d0ef      	beq.n	800909e <_write+0x4a>
 80090be:	e000      	b.n	80090c2 <_write+0x6e>
		if (HAL_GetTick() - t0 > 2) break;     // 2 ms guard
 80090c0:	bf00      	nop

	return len;
 80090c2:	687b      	ldr	r3, [r7, #4]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20000484 	.word	0x20000484

080090d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2212      	movs	r2, #18
 80090e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090e2:	4b03      	ldr	r3, [pc, #12]	@ (80090f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	200000c8 	.word	0x200000c8

080090f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2204      	movs	r2, #4
 8009104:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009106:	4b03      	ldr	r3, [pc, #12]	@ (8009114 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	200000dc 	.word	0x200000dc

08009118 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4907      	ldr	r1, [pc, #28]	@ (800914c <USBD_FS_ProductStrDescriptor+0x34>)
 800912e:	4808      	ldr	r0, [pc, #32]	@ (8009150 <USBD_FS_ProductStrDescriptor+0x38>)
 8009130:	f7ff fda6 	bl	8008c80 <USBD_GetString>
 8009134:	e004      	b.n	8009140 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4904      	ldr	r1, [pc, #16]	@ (800914c <USBD_FS_ProductStrDescriptor+0x34>)
 800913a:	4805      	ldr	r0, [pc, #20]	@ (8009150 <USBD_FS_ProductStrDescriptor+0x38>)
 800913c:	f7ff fda0 	bl	8008c80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009140:	4b02      	ldr	r3, [pc, #8]	@ (800914c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20001760 	.word	0x20001760
 8009150:	0800c238 	.word	0x0800c238

08009154 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	4904      	ldr	r1, [pc, #16]	@ (8009174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009164:	4804      	ldr	r0, [pc, #16]	@ (8009178 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009166:	f7ff fd8b 	bl	8008c80 <USBD_GetString>
  return USBD_StrDesc;
 800916a:	4b02      	ldr	r3, [pc, #8]	@ (8009174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	20001760 	.word	0x20001760
 8009178:	0800c250 	.word	0x0800c250

0800917c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	221a      	movs	r2, #26
 800918c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800918e:	f000 f843 	bl	8009218 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009192:	4b02      	ldr	r3, [pc, #8]	@ (800919c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	200000e0 	.word	0x200000e0

080091a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d105      	bne.n	80091be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4907      	ldr	r1, [pc, #28]	@ (80091d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091b6:	4808      	ldr	r0, [pc, #32]	@ (80091d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091b8:	f7ff fd62 	bl	8008c80 <USBD_GetString>
 80091bc:	e004      	b.n	80091c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	4904      	ldr	r1, [pc, #16]	@ (80091d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091c2:	4805      	ldr	r0, [pc, #20]	@ (80091d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091c4:	f7ff fd5c 	bl	8008c80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091c8:	4b02      	ldr	r3, [pc, #8]	@ (80091d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20001760 	.word	0x20001760
 80091d8:	0800c264 	.word	0x0800c264

080091dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	6039      	str	r1, [r7, #0]
 80091e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d105      	bne.n	80091fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4907      	ldr	r1, [pc, #28]	@ (8009210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091f2:	4808      	ldr	r0, [pc, #32]	@ (8009214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091f4:	f7ff fd44 	bl	8008c80 <USBD_GetString>
 80091f8:	e004      	b.n	8009204 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	4904      	ldr	r1, [pc, #16]	@ (8009210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091fe:	4805      	ldr	r0, [pc, #20]	@ (8009214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009200:	f7ff fd3e 	bl	8008c80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009204:	4b02      	ldr	r3, [pc, #8]	@ (8009210 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20001760 	.word	0x20001760
 8009214:	0800c270 	.word	0x0800c270

08009218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800921e:	4b0f      	ldr	r3, [pc, #60]	@ (800925c <Get_SerialNum+0x44>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009224:	4b0e      	ldr	r3, [pc, #56]	@ (8009260 <Get_SerialNum+0x48>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800922a:	4b0e      	ldr	r3, [pc, #56]	@ (8009264 <Get_SerialNum+0x4c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800923e:	2208      	movs	r2, #8
 8009240:	4909      	ldr	r1, [pc, #36]	@ (8009268 <Get_SerialNum+0x50>)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f814 	bl	8009270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009248:	2204      	movs	r2, #4
 800924a:	4908      	ldr	r1, [pc, #32]	@ (800926c <Get_SerialNum+0x54>)
 800924c:	68b8      	ldr	r0, [r7, #8]
 800924e:	f000 f80f 	bl	8009270 <IntToUnicode>
  }
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	1fff7a10 	.word	0x1fff7a10
 8009260:	1fff7a14 	.word	0x1fff7a14
 8009264:	1fff7a18 	.word	0x1fff7a18
 8009268:	200000e2 	.word	0x200000e2
 800926c:	200000f2 	.word	0x200000f2

08009270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
 8009286:	e027      	b.n	80092d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	0f1b      	lsrs	r3, r3, #28
 800928c:	2b09      	cmp	r3, #9
 800928e:	d80b      	bhi.n	80092a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0f1b      	lsrs	r3, r3, #28
 8009294:	b2da      	uxtb	r2, r3
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4619      	mov	r1, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	440b      	add	r3, r1
 80092a0:	3230      	adds	r2, #48	@ 0x30
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e00a      	b.n	80092be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	0f1b      	lsrs	r3, r3, #28
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	4619      	mov	r1, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	440b      	add	r3, r1
 80092b8:	3237      	adds	r2, #55	@ 0x37
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	3301      	adds	r3, #1
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	3301      	adds	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]
 80092d8:	7dfa      	ldrb	r2, [r7, #23]
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d3d3      	bcc.n	8009288 <IntToUnicode+0x18>
  }
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	@ 0x28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f8:	f107 0314 	add.w	r3, r7, #20
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	605a      	str	r2, [r3, #4]
 8009302:	609a      	str	r2, [r3, #8]
 8009304:	60da      	str	r2, [r3, #12]
 8009306:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009310:	d13a      	bne.n	8009388 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009312:	2300      	movs	r3, #0
 8009314:	613b      	str	r3, [r7, #16]
 8009316:	4b1e      	ldr	r3, [pc, #120]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 8009318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931a:	4a1d      	ldr	r2, [pc, #116]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 800931c:	f043 0301 	orr.w	r3, r3, #1
 8009320:	6313      	str	r3, [r2, #48]	@ 0x30
 8009322:	4b1b      	ldr	r3, [pc, #108]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800932e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009334:	2302      	movs	r3, #2
 8009336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009338:	2300      	movs	r3, #0
 800933a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800933c:	2303      	movs	r3, #3
 800933e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009340:	230a      	movs	r3, #10
 8009342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009344:	f107 0314 	add.w	r3, r7, #20
 8009348:	4619      	mov	r1, r3
 800934a:	4812      	ldr	r0, [pc, #72]	@ (8009394 <HAL_PCD_MspInit+0xa4>)
 800934c:	f7f9 fcd6 	bl	8002cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009350:	4b0f      	ldr	r3, [pc, #60]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 8009352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009354:	4a0e      	ldr	r2, [pc, #56]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 8009356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800935a:	6353      	str	r3, [r2, #52]	@ 0x34
 800935c:	2300      	movs	r3, #0
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 8009362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009364:	4a0a      	ldr	r2, [pc, #40]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 8009366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800936a:	6453      	str	r3, [r2, #68]	@ 0x44
 800936c:	4b08      	ldr	r3, [pc, #32]	@ (8009390 <HAL_PCD_MspInit+0xa0>)
 800936e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	2043      	movs	r0, #67	@ 0x43
 800937e:	f7f9 f916 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009382:	2043      	movs	r0, #67	@ 0x43
 8009384:	f7f9 f92f 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009388:	bf00      	nop
 800938a:	3728      	adds	r7, #40	@ 0x28
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40023800 	.word	0x40023800
 8009394:	40020000 	.word	0x40020000

08009398 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7fe faed 	bl	800798e <USBD_LL_SetupStage>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	4619      	mov	r1, r3
 80093e6:	f7fe fb27 	bl	8007a38 <USBD_LL_DataOutStage>
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	3320      	adds	r3, #32
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	4619      	mov	r1, r3
 800941a:	f7fe fbc9 	bl	8007bb0 <USBD_LL_DataInStage>
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe fd0d 	bl	8007e54 <USBD_LL_SOF>
}
 800943a:	bf00      	nop
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800944a:	2301      	movs	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	79db      	ldrb	r3, [r3, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
 800945a:	e008      	b.n	800946e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	79db      	ldrb	r3, [r3, #7]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d102      	bne.n	800946a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009464:	2301      	movs	r3, #1
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	e001      	b.n	800946e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800946a:	f7f7 ff61 	bl	8001330 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009474:	7bfa      	ldrb	r2, [r7, #15]
 8009476:	4611      	mov	r1, r2
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe fca7 	bl	8007dcc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fc4e 	bl	8007d26 <USBD_LL_Reset>
}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe fca2 	bl	8007dec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6812      	ldr	r2, [r2, #0]
 80094b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7adb      	ldrb	r3, [r3, #11]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c8:	4b04      	ldr	r3, [pc, #16]	@ (80094dc <HAL_PCD_SuspendCallback+0x48>)
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	4a03      	ldr	r2, [pc, #12]	@ (80094dc <HAL_PCD_SuspendCallback+0x48>)
 80094ce:	f043 0306 	orr.w	r3, r3, #6
 80094d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	e000ed00 	.word	0xe000ed00

080094e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fc98 	bl	8007e24 <USBD_LL_Resume>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800950e:	78fa      	ldrb	r2, [r7, #3]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fcf0 	bl	8007ef8 <USBD_LL_IsoOUTIncomplete>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fcac 	bl	8007e94 <USBD_LL_IsoINIncomplete>
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fd02 	bl	8007f5c <USBD_LL_DevConnected>
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fcff 	bl	8007f72 <USBD_LL_DevDisconnected>
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d13c      	bne.n	8009606 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800958c:	4a20      	ldr	r2, [pc, #128]	@ (8009610 <USBD_LL_Init+0x94>)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a1e      	ldr	r2, [pc, #120]	@ (8009610 <USBD_LL_Init+0x94>)
 8009598:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800959c:	4b1c      	ldr	r3, [pc, #112]	@ (8009610 <USBD_LL_Init+0x94>)
 800959e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009610 <USBD_LL_Init+0x94>)
 80095a6:	2204      	movs	r2, #4
 80095a8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095aa:	4b19      	ldr	r3, [pc, #100]	@ (8009610 <USBD_LL_Init+0x94>)
 80095ac:	2202      	movs	r2, #2
 80095ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095b0:	4b17      	ldr	r3, [pc, #92]	@ (8009610 <USBD_LL_Init+0x94>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095b6:	4b16      	ldr	r3, [pc, #88]	@ (8009610 <USBD_LL_Init+0x94>)
 80095b8:	2202      	movs	r2, #2
 80095ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095bc:	4b14      	ldr	r3, [pc, #80]	@ (8009610 <USBD_LL_Init+0x94>)
 80095be:	2200      	movs	r2, #0
 80095c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095c2:	4b13      	ldr	r3, [pc, #76]	@ (8009610 <USBD_LL_Init+0x94>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095c8:	4b11      	ldr	r3, [pc, #68]	@ (8009610 <USBD_LL_Init+0x94>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095ce:	4b10      	ldr	r3, [pc, #64]	@ (8009610 <USBD_LL_Init+0x94>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009610 <USBD_LL_Init+0x94>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095da:	480d      	ldr	r0, [pc, #52]	@ (8009610 <USBD_LL_Init+0x94>)
 80095dc:	f7f9 fd76 	bl	80030cc <HAL_PCD_Init>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095e6:	f7f7 fea3 	bl	8001330 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095ea:	2180      	movs	r1, #128	@ 0x80
 80095ec:	4808      	ldr	r0, [pc, #32]	@ (8009610 <USBD_LL_Init+0x94>)
 80095ee:	f7fa ffa2 	bl	8004536 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095f2:	2240      	movs	r2, #64	@ 0x40
 80095f4:	2100      	movs	r1, #0
 80095f6:	4806      	ldr	r0, [pc, #24]	@ (8009610 <USBD_LL_Init+0x94>)
 80095f8:	f7fa ff56 	bl	80044a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095fc:	2280      	movs	r2, #128	@ 0x80
 80095fe:	2101      	movs	r1, #1
 8009600:	4803      	ldr	r0, [pc, #12]	@ (8009610 <USBD_LL_Init+0x94>)
 8009602:	f7fa ff51 	bl	80044a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20001960 	.word	0x20001960

08009614 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800962a:	4618      	mov	r0, r3
 800962c:	f7f9 fe5d 	bl	80032ea <HAL_PCD_Start>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f942 	bl	80098c0 <USBD_Get_USB_Status>
 800963c:	4603      	mov	r3, r0
 800963e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009640:	7bbb      	ldrb	r3, [r7, #14]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	461a      	mov	r2, r3
 8009658:	4603      	mov	r3, r0
 800965a:	70fb      	strb	r3, [r7, #3]
 800965c:	460b      	mov	r3, r1
 800965e:	70bb      	strb	r3, [r7, #2]
 8009660:	4613      	mov	r3, r2
 8009662:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009672:	78bb      	ldrb	r3, [r7, #2]
 8009674:	883a      	ldrh	r2, [r7, #0]
 8009676:	78f9      	ldrb	r1, [r7, #3]
 8009678:	f7fa fb31 	bl	8003cde <HAL_PCD_EP_Open>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f91c 	bl	80098c0 <USBD_Get_USB_Status>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968c:	7bbb      	ldrb	r3, [r7, #14]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fa fb7c 	bl	8003db2 <HAL_PCD_EP_Close>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f8fd 	bl	80098c0 <USBD_Get_USB_Status>
 80096c6:	4603      	mov	r3, r0
 80096c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fa fc34 	bl	8003f60 <HAL_PCD_EP_SetStall>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f8de 	bl	80098c0 <USBD_Get_USB_Status>
 8009704:	4603      	mov	r3, r0
 8009706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009708:	7bbb      	ldrb	r3, [r7, #14]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f7fa fc78 	bl	8004026 <HAL_PCD_EP_ClrStall>
 8009736:	4603      	mov	r3, r0
 8009738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	4618      	mov	r0, r3
 800973e:	f000 f8bf 	bl	80098c0 <USBD_Get_USB_Status>
 8009742:	4603      	mov	r3, r0
 8009744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009746:	7bbb      	ldrb	r3, [r7, #14]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009762:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009768:	2b00      	cmp	r3, #0
 800976a:	da0b      	bge.n	8009784 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	4613      	mov	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	3316      	adds	r3, #22
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	e00b      	b.n	800979c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800979a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097c2:	78fa      	ldrb	r2, [r7, #3]
 80097c4:	4611      	mov	r1, r2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fa fa65 	bl	8003c96 <HAL_PCD_SetAddress>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f874 	bl	80098c0 <USBD_Get_USB_Status>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b086      	sub	sp, #24
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	460b      	mov	r3, r1
 80097f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009804:	7af9      	ldrb	r1, [r7, #11]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	f7fa fb6f 	bl	8003eec <HAL_PCD_EP_Transmit>
 800980e:	4603      	mov	r3, r0
 8009810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 f853 	bl	80098c0 <USBD_Get_USB_Status>
 800981a:	4603      	mov	r3, r0
 800981c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800981e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	460b      	mov	r3, r1
 8009836:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009846:	7af9      	ldrb	r1, [r7, #11]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	f7fa fafb 	bl	8003e46 <HAL_PCD_EP_Receive>
 8009850:	4603      	mov	r3, r0
 8009852:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f832 	bl	80098c0 <USBD_Get_USB_Status>
 800985c:	4603      	mov	r3, r0
 800985e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009860:	7dbb      	ldrb	r3, [r7, #22]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f7fa fb1b 	bl	8003ebc <HAL_PCD_EP_GetRxCount>
 8009886:	4603      	mov	r3, r0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009898:	4b03      	ldr	r3, [pc, #12]	@ (80098a8 <USBD_static_malloc+0x18>)
}
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20001e44 	.word	0x20001e44

080098ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]

}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d817      	bhi.n	8009904 <USBD_Get_USB_Status+0x44>
 80098d4:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <USBD_Get_USB_Status+0x1c>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	080098f3 	.word	0x080098f3
 80098e4:	080098f9 	.word	0x080098f9
 80098e8:	080098ff 	.word	0x080098ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
    break;
 80098f0:	e00b      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098f2:	2303      	movs	r3, #3
 80098f4:	73fb      	strb	r3, [r7, #15]
    break;
 80098f6:	e008      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
    break;
 80098fc:	e005      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098fe:	2303      	movs	r3, #3
 8009900:	73fb      	strb	r3, [r7, #15]
    break;
 8009902:	e002      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	bf00      	nop
  }
  return usb_status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <__cvt>:
 8009918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	ec57 6b10 	vmov	r6, r7, d0
 8009920:	2f00      	cmp	r7, #0
 8009922:	460c      	mov	r4, r1
 8009924:	4619      	mov	r1, r3
 8009926:	463b      	mov	r3, r7
 8009928:	bfbb      	ittet	lt
 800992a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800992e:	461f      	movlt	r7, r3
 8009930:	2300      	movge	r3, #0
 8009932:	232d      	movlt	r3, #45	@ 0x2d
 8009934:	700b      	strb	r3, [r1, #0]
 8009936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800993c:	4691      	mov	r9, r2
 800993e:	f023 0820 	bic.w	r8, r3, #32
 8009942:	bfbc      	itt	lt
 8009944:	4632      	movlt	r2, r6
 8009946:	4616      	movlt	r6, r2
 8009948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800994c:	d005      	beq.n	800995a <__cvt+0x42>
 800994e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009952:	d100      	bne.n	8009956 <__cvt+0x3e>
 8009954:	3401      	adds	r4, #1
 8009956:	2102      	movs	r1, #2
 8009958:	e000      	b.n	800995c <__cvt+0x44>
 800995a:	2103      	movs	r1, #3
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	ab02      	add	r3, sp, #8
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	ec47 6b10 	vmov	d0, r6, r7
 8009968:	4653      	mov	r3, sl
 800996a:	4622      	mov	r2, r4
 800996c:	f000 fe38 	bl	800a5e0 <_dtoa_r>
 8009970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009974:	4605      	mov	r5, r0
 8009976:	d119      	bne.n	80099ac <__cvt+0x94>
 8009978:	f019 0f01 	tst.w	r9, #1
 800997c:	d00e      	beq.n	800999c <__cvt+0x84>
 800997e:	eb00 0904 	add.w	r9, r0, r4
 8009982:	2200      	movs	r2, #0
 8009984:	2300      	movs	r3, #0
 8009986:	4630      	mov	r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	f7f7 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800998e:	b108      	cbz	r0, 8009994 <__cvt+0x7c>
 8009990:	f8cd 900c 	str.w	r9, [sp, #12]
 8009994:	2230      	movs	r2, #48	@ 0x30
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	454b      	cmp	r3, r9
 800999a:	d31e      	bcc.n	80099da <__cvt+0xc2>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099a0:	1b5b      	subs	r3, r3, r5
 80099a2:	4628      	mov	r0, r5
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	b004      	add	sp, #16
 80099a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b0:	eb00 0904 	add.w	r9, r0, r4
 80099b4:	d1e5      	bne.n	8009982 <__cvt+0x6a>
 80099b6:	7803      	ldrb	r3, [r0, #0]
 80099b8:	2b30      	cmp	r3, #48	@ 0x30
 80099ba:	d10a      	bne.n	80099d2 <__cvt+0xba>
 80099bc:	2200      	movs	r2, #0
 80099be:	2300      	movs	r3, #0
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80099c8:	b918      	cbnz	r0, 80099d2 <__cvt+0xba>
 80099ca:	f1c4 0401 	rsb	r4, r4, #1
 80099ce:	f8ca 4000 	str.w	r4, [sl]
 80099d2:	f8da 3000 	ldr.w	r3, [sl]
 80099d6:	4499      	add	r9, r3
 80099d8:	e7d3      	b.n	8009982 <__cvt+0x6a>
 80099da:	1c59      	adds	r1, r3, #1
 80099dc:	9103      	str	r1, [sp, #12]
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e7d9      	b.n	8009996 <__cvt+0x7e>

080099e2 <__exponent>:
 80099e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e4:	2900      	cmp	r1, #0
 80099e6:	bfba      	itte	lt
 80099e8:	4249      	neglt	r1, r1
 80099ea:	232d      	movlt	r3, #45	@ 0x2d
 80099ec:	232b      	movge	r3, #43	@ 0x2b
 80099ee:	2909      	cmp	r1, #9
 80099f0:	7002      	strb	r2, [r0, #0]
 80099f2:	7043      	strb	r3, [r0, #1]
 80099f4:	dd29      	ble.n	8009a4a <__exponent+0x68>
 80099f6:	f10d 0307 	add.w	r3, sp, #7
 80099fa:	461d      	mov	r5, r3
 80099fc:	270a      	movs	r7, #10
 80099fe:	461a      	mov	r2, r3
 8009a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a04:	fb07 1416 	mls	r4, r7, r6, r1
 8009a08:	3430      	adds	r4, #48	@ 0x30
 8009a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a0e:	460c      	mov	r4, r1
 8009a10:	2c63      	cmp	r4, #99	@ 0x63
 8009a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a16:	4631      	mov	r1, r6
 8009a18:	dcf1      	bgt.n	80099fe <__exponent+0x1c>
 8009a1a:	3130      	adds	r1, #48	@ 0x30
 8009a1c:	1e94      	subs	r4, r2, #2
 8009a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a22:	1c41      	adds	r1, r0, #1
 8009a24:	4623      	mov	r3, r4
 8009a26:	42ab      	cmp	r3, r5
 8009a28:	d30a      	bcc.n	8009a40 <__exponent+0x5e>
 8009a2a:	f10d 0309 	add.w	r3, sp, #9
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ac      	cmp	r4, r5
 8009a32:	bf88      	it	hi
 8009a34:	2300      	movhi	r3, #0
 8009a36:	3302      	adds	r3, #2
 8009a38:	4403      	add	r3, r0
 8009a3a:	1a18      	subs	r0, r3, r0
 8009a3c:	b003      	add	sp, #12
 8009a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a48:	e7ed      	b.n	8009a26 <__exponent+0x44>
 8009a4a:	2330      	movs	r3, #48	@ 0x30
 8009a4c:	3130      	adds	r1, #48	@ 0x30
 8009a4e:	7083      	strb	r3, [r0, #2]
 8009a50:	70c1      	strb	r1, [r0, #3]
 8009a52:	1d03      	adds	r3, r0, #4
 8009a54:	e7f1      	b.n	8009a3a <__exponent+0x58>
	...

08009a58 <_printf_float>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	b08d      	sub	sp, #52	@ 0x34
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a64:	4616      	mov	r6, r2
 8009a66:	461f      	mov	r7, r3
 8009a68:	4605      	mov	r5, r0
 8009a6a:	f000 fcb9 	bl	800a3e0 <_localeconv_r>
 8009a6e:	6803      	ldr	r3, [r0, #0]
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f6 fbfc 	bl	8000270 <strlen>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a80:	9005      	str	r0, [sp, #20]
 8009a82:	3307      	adds	r3, #7
 8009a84:	f023 0307 	bic.w	r3, r3, #7
 8009a88:	f103 0208 	add.w	r2, r3, #8
 8009a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a90:	f8d4 b000 	ldr.w	fp, [r4]
 8009a94:	f8c8 2000 	str.w	r2, [r8]
 8009a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aae:	4b9c      	ldr	r3, [pc, #624]	@ (8009d20 <_printf_float+0x2c8>)
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab4:	f7f7 f83a 	bl	8000b2c <__aeabi_dcmpun>
 8009ab8:	bb70      	cbnz	r0, 8009b18 <_printf_float+0xc0>
 8009aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009abe:	4b98      	ldr	r3, [pc, #608]	@ (8009d20 <_printf_float+0x2c8>)
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	f7f7 f814 	bl	8000af0 <__aeabi_dcmple>
 8009ac8:	bb30      	cbnz	r0, 8009b18 <_printf_float+0xc0>
 8009aca:	2200      	movs	r2, #0
 8009acc:	2300      	movs	r3, #0
 8009ace:	4640      	mov	r0, r8
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	f7f7 f803 	bl	8000adc <__aeabi_dcmplt>
 8009ad6:	b110      	cbz	r0, 8009ade <_printf_float+0x86>
 8009ad8:	232d      	movs	r3, #45	@ 0x2d
 8009ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ade:	4a91      	ldr	r2, [pc, #580]	@ (8009d24 <_printf_float+0x2cc>)
 8009ae0:	4b91      	ldr	r3, [pc, #580]	@ (8009d28 <_printf_float+0x2d0>)
 8009ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ae6:	bf8c      	ite	hi
 8009ae8:	4690      	movhi	r8, r2
 8009aea:	4698      	movls	r8, r3
 8009aec:	2303      	movs	r3, #3
 8009aee:	6123      	str	r3, [r4, #16]
 8009af0:	f02b 0304 	bic.w	r3, fp, #4
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	f04f 0900 	mov.w	r9, #0
 8009afa:	9700      	str	r7, [sp, #0]
 8009afc:	4633      	mov	r3, r6
 8009afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b00:	4621      	mov	r1, r4
 8009b02:	4628      	mov	r0, r5
 8009b04:	f000 f9d2 	bl	8009eac <_printf_common>
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f040 808d 	bne.w	8009c28 <_printf_float+0x1d0>
 8009b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b12:	b00d      	add	sp, #52	@ 0x34
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	4649      	mov	r1, r9
 8009b20:	f7f7 f804 	bl	8000b2c <__aeabi_dcmpun>
 8009b24:	b140      	cbz	r0, 8009b38 <_printf_float+0xe0>
 8009b26:	464b      	mov	r3, r9
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfbc      	itt	lt
 8009b2c:	232d      	movlt	r3, #45	@ 0x2d
 8009b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b32:	4a7e      	ldr	r2, [pc, #504]	@ (8009d2c <_printf_float+0x2d4>)
 8009b34:	4b7e      	ldr	r3, [pc, #504]	@ (8009d30 <_printf_float+0x2d8>)
 8009b36:	e7d4      	b.n	8009ae2 <_printf_float+0x8a>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b3e:	9206      	str	r2, [sp, #24]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	d13b      	bne.n	8009bbc <_printf_float+0x164>
 8009b44:	2306      	movs	r3, #6
 8009b46:	6063      	str	r3, [r4, #4]
 8009b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6022      	str	r2, [r4, #0]
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b58:	ab09      	add	r3, sp, #36	@ 0x24
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	6861      	ldr	r1, [r4, #4]
 8009b5e:	ec49 8b10 	vmov	d0, r8, r9
 8009b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b66:	4628      	mov	r0, r5
 8009b68:	f7ff fed6 	bl	8009918 <__cvt>
 8009b6c:	9b06      	ldr	r3, [sp, #24]
 8009b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b70:	2b47      	cmp	r3, #71	@ 0x47
 8009b72:	4680      	mov	r8, r0
 8009b74:	d129      	bne.n	8009bca <_printf_float+0x172>
 8009b76:	1cc8      	adds	r0, r1, #3
 8009b78:	db02      	blt.n	8009b80 <_printf_float+0x128>
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	dd41      	ble.n	8009c04 <_printf_float+0x1ac>
 8009b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b84:	fa5f fa8a 	uxtb.w	sl, sl
 8009b88:	3901      	subs	r1, #1
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b92:	f7ff ff26 	bl	80099e2 <__exponent>
 8009b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b98:	1813      	adds	r3, r2, r0
 8009b9a:	2a01      	cmp	r2, #1
 8009b9c:	4681      	mov	r9, r0
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	dc02      	bgt.n	8009ba8 <_printf_float+0x150>
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	07d2      	lsls	r2, r2, #31
 8009ba6:	d501      	bpl.n	8009bac <_printf_float+0x154>
 8009ba8:	3301      	adds	r3, #1
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0a2      	beq.n	8009afa <_printf_float+0xa2>
 8009bb4:	232d      	movs	r3, #45	@ 0x2d
 8009bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bba:	e79e      	b.n	8009afa <_printf_float+0xa2>
 8009bbc:	9a06      	ldr	r2, [sp, #24]
 8009bbe:	2a47      	cmp	r2, #71	@ 0x47
 8009bc0:	d1c2      	bne.n	8009b48 <_printf_float+0xf0>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1c0      	bne.n	8009b48 <_printf_float+0xf0>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7bd      	b.n	8009b46 <_printf_float+0xee>
 8009bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bce:	d9db      	bls.n	8009b88 <_printf_float+0x130>
 8009bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bd4:	d118      	bne.n	8009c08 <_printf_float+0x1b0>
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	6863      	ldr	r3, [r4, #4]
 8009bda:	dd0b      	ble.n	8009bf4 <_printf_float+0x19c>
 8009bdc:	6121      	str	r1, [r4, #16]
 8009bde:	b913      	cbnz	r3, 8009be6 <_printf_float+0x18e>
 8009be0:	6822      	ldr	r2, [r4, #0]
 8009be2:	07d0      	lsls	r0, r2, #31
 8009be4:	d502      	bpl.n	8009bec <_printf_float+0x194>
 8009be6:	3301      	adds	r3, #1
 8009be8:	440b      	add	r3, r1
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bee:	f04f 0900 	mov.w	r9, #0
 8009bf2:	e7db      	b.n	8009bac <_printf_float+0x154>
 8009bf4:	b913      	cbnz	r3, 8009bfc <_printf_float+0x1a4>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	07d2      	lsls	r2, r2, #31
 8009bfa:	d501      	bpl.n	8009c00 <_printf_float+0x1a8>
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	e7f4      	b.n	8009bea <_printf_float+0x192>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f2      	b.n	8009bea <_printf_float+0x192>
 8009c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	db05      	blt.n	8009c1a <_printf_float+0x1c2>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	6121      	str	r1, [r4, #16]
 8009c12:	07d8      	lsls	r0, r3, #31
 8009c14:	d5ea      	bpl.n	8009bec <_printf_float+0x194>
 8009c16:	1c4b      	adds	r3, r1, #1
 8009c18:	e7e7      	b.n	8009bea <_printf_float+0x192>
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	bfd4      	ite	le
 8009c1e:	f1c1 0202 	rsble	r2, r1, #2
 8009c22:	2201      	movgt	r2, #1
 8009c24:	4413      	add	r3, r2
 8009c26:	e7e0      	b.n	8009bea <_printf_float+0x192>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	055a      	lsls	r2, r3, #21
 8009c2c:	d407      	bmi.n	8009c3e <_printf_float+0x1e6>
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	4642      	mov	r2, r8
 8009c32:	4631      	mov	r1, r6
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d12b      	bne.n	8009c94 <_printf_float+0x23c>
 8009c3c:	e767      	b.n	8009b0e <_printf_float+0xb6>
 8009c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c42:	f240 80dd 	bls.w	8009e00 <_printf_float+0x3a8>
 8009c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f7f6 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d033      	beq.n	8009cbe <_printf_float+0x266>
 8009c56:	4a37      	ldr	r2, [pc, #220]	@ (8009d34 <_printf_float+0x2dc>)
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f af54 	beq.w	8009b0e <_printf_float+0xb6>
 8009c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c6a:	4543      	cmp	r3, r8
 8009c6c:	db02      	blt.n	8009c74 <_printf_float+0x21c>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	07d8      	lsls	r0, r3, #31
 8009c72:	d50f      	bpl.n	8009c94 <_printf_float+0x23c>
 8009c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f af45 	beq.w	8009b0e <_printf_float+0xb6>
 8009c84:	f04f 0900 	mov.w	r9, #0
 8009c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c8c:	f104 0a1a 	add.w	sl, r4, #26
 8009c90:	45c8      	cmp	r8, r9
 8009c92:	dc09      	bgt.n	8009ca8 <_printf_float+0x250>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	079b      	lsls	r3, r3, #30
 8009c98:	f100 8103 	bmi.w	8009ea2 <_printf_float+0x44a>
 8009c9c:	68e0      	ldr	r0, [r4, #12]
 8009c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ca0:	4298      	cmp	r0, r3
 8009ca2:	bfb8      	it	lt
 8009ca4:	4618      	movlt	r0, r3
 8009ca6:	e734      	b.n	8009b12 <_printf_float+0xba>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4652      	mov	r2, sl
 8009cac:	4631      	mov	r1, r6
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f43f af2b 	beq.w	8009b0e <_printf_float+0xb6>
 8009cb8:	f109 0901 	add.w	r9, r9, #1
 8009cbc:	e7e8      	b.n	8009c90 <_printf_float+0x238>
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc39      	bgt.n	8009d38 <_printf_float+0x2e0>
 8009cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d34 <_printf_float+0x2dc>)
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f af1d 	beq.w	8009b0e <_printf_float+0xb6>
 8009cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8009cdc:	d102      	bne.n	8009ce4 <_printf_float+0x28c>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	07d9      	lsls	r1, r3, #31
 8009ce2:	d5d7      	bpl.n	8009c94 <_printf_float+0x23c>
 8009ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f43f af0d 	beq.w	8009b0e <_printf_float+0xb6>
 8009cf4:	f04f 0a00 	mov.w	sl, #0
 8009cf8:	f104 0b1a 	add.w	fp, r4, #26
 8009cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfe:	425b      	negs	r3, r3
 8009d00:	4553      	cmp	r3, sl
 8009d02:	dc01      	bgt.n	8009d08 <_printf_float+0x2b0>
 8009d04:	464b      	mov	r3, r9
 8009d06:	e793      	b.n	8009c30 <_printf_float+0x1d8>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	465a      	mov	r2, fp
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f aefb 	beq.w	8009b0e <_printf_float+0xb6>
 8009d18:	f10a 0a01 	add.w	sl, sl, #1
 8009d1c:	e7ee      	b.n	8009cfc <_printf_float+0x2a4>
 8009d1e:	bf00      	nop
 8009d20:	7fefffff 	.word	0x7fefffff
 8009d24:	0800c29c 	.word	0x0800c29c
 8009d28:	0800c298 	.word	0x0800c298
 8009d2c:	0800c2a4 	.word	0x0800c2a4
 8009d30:	0800c2a0 	.word	0x0800c2a0
 8009d34:	0800c2a8 	.word	0x0800c2a8
 8009d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d3e:	4553      	cmp	r3, sl
 8009d40:	bfa8      	it	ge
 8009d42:	4653      	movge	r3, sl
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	4699      	mov	r9, r3
 8009d48:	dc36      	bgt.n	8009db8 <_printf_float+0x360>
 8009d4a:	f04f 0b00 	mov.w	fp, #0
 8009d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d52:	f104 021a 	add.w	r2, r4, #26
 8009d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d58:	9306      	str	r3, [sp, #24]
 8009d5a:	eba3 0309 	sub.w	r3, r3, r9
 8009d5e:	455b      	cmp	r3, fp
 8009d60:	dc31      	bgt.n	8009dc6 <_printf_float+0x36e>
 8009d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d64:	459a      	cmp	sl, r3
 8009d66:	dc3a      	bgt.n	8009dde <_printf_float+0x386>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	07da      	lsls	r2, r3, #31
 8009d6c:	d437      	bmi.n	8009dde <_printf_float+0x386>
 8009d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d70:	ebaa 0903 	sub.w	r9, sl, r3
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	ebaa 0303 	sub.w	r3, sl, r3
 8009d7a:	4599      	cmp	r9, r3
 8009d7c:	bfa8      	it	ge
 8009d7e:	4699      	movge	r9, r3
 8009d80:	f1b9 0f00 	cmp.w	r9, #0
 8009d84:	dc33      	bgt.n	8009dee <_printf_float+0x396>
 8009d86:	f04f 0800 	mov.w	r8, #0
 8009d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d8e:	f104 0b1a 	add.w	fp, r4, #26
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	ebaa 0303 	sub.w	r3, sl, r3
 8009d98:	eba3 0309 	sub.w	r3, r3, r9
 8009d9c:	4543      	cmp	r3, r8
 8009d9e:	f77f af79 	ble.w	8009c94 <_printf_float+0x23c>
 8009da2:	2301      	movs	r3, #1
 8009da4:	465a      	mov	r2, fp
 8009da6:	4631      	mov	r1, r6
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b8      	blx	r7
 8009dac:	3001      	adds	r0, #1
 8009dae:	f43f aeae 	beq.w	8009b0e <_printf_float+0xb6>
 8009db2:	f108 0801 	add.w	r8, r8, #1
 8009db6:	e7ec      	b.n	8009d92 <_printf_float+0x33a>
 8009db8:	4642      	mov	r2, r8
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d1c2      	bne.n	8009d4a <_printf_float+0x2f2>
 8009dc4:	e6a3      	b.n	8009b0e <_printf_float+0xb6>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	9206      	str	r2, [sp, #24]
 8009dce:	47b8      	blx	r7
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f43f ae9c 	beq.w	8009b0e <_printf_float+0xb6>
 8009dd6:	9a06      	ldr	r2, [sp, #24]
 8009dd8:	f10b 0b01 	add.w	fp, fp, #1
 8009ddc:	e7bb      	b.n	8009d56 <_printf_float+0x2fe>
 8009dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	d1c0      	bne.n	8009d6e <_printf_float+0x316>
 8009dec:	e68f      	b.n	8009b0e <_printf_float+0xb6>
 8009dee:	9a06      	ldr	r2, [sp, #24]
 8009df0:	464b      	mov	r3, r9
 8009df2:	4442      	add	r2, r8
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d1c3      	bne.n	8009d86 <_printf_float+0x32e>
 8009dfe:	e686      	b.n	8009b0e <_printf_float+0xb6>
 8009e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e04:	f1ba 0f01 	cmp.w	sl, #1
 8009e08:	dc01      	bgt.n	8009e0e <_printf_float+0x3b6>
 8009e0a:	07db      	lsls	r3, r3, #31
 8009e0c:	d536      	bpl.n	8009e7c <_printf_float+0x424>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4642      	mov	r2, r8
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f ae78 	beq.w	8009b0e <_printf_float+0xb6>
 8009e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f43f ae70 	beq.w	8009b0e <_printf_float+0xb6>
 8009e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e32:	2200      	movs	r2, #0
 8009e34:	2300      	movs	r3, #0
 8009e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e3a:	f7f6 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e3e:	b9c0      	cbnz	r0, 8009e72 <_printf_float+0x41a>
 8009e40:	4653      	mov	r3, sl
 8009e42:	f108 0201 	add.w	r2, r8, #1
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d10c      	bne.n	8009e6a <_printf_float+0x412>
 8009e50:	e65d      	b.n	8009b0e <_printf_float+0xb6>
 8009e52:	2301      	movs	r3, #1
 8009e54:	465a      	mov	r2, fp
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae56 	beq.w	8009b0e <_printf_float+0xb6>
 8009e62:	f108 0801 	add.w	r8, r8, #1
 8009e66:	45d0      	cmp	r8, sl
 8009e68:	dbf3      	blt.n	8009e52 <_printf_float+0x3fa>
 8009e6a:	464b      	mov	r3, r9
 8009e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e70:	e6df      	b.n	8009c32 <_printf_float+0x1da>
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	f104 0b1a 	add.w	fp, r4, #26
 8009e7a:	e7f4      	b.n	8009e66 <_printf_float+0x40e>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4642      	mov	r2, r8
 8009e80:	e7e1      	b.n	8009e46 <_printf_float+0x3ee>
 8009e82:	2301      	movs	r3, #1
 8009e84:	464a      	mov	r2, r9
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f43f ae3e 	beq.w	8009b0e <_printf_float+0xb6>
 8009e92:	f108 0801 	add.w	r8, r8, #1
 8009e96:	68e3      	ldr	r3, [r4, #12]
 8009e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e9a:	1a5b      	subs	r3, r3, r1
 8009e9c:	4543      	cmp	r3, r8
 8009e9e:	dcf0      	bgt.n	8009e82 <_printf_float+0x42a>
 8009ea0:	e6fc      	b.n	8009c9c <_printf_float+0x244>
 8009ea2:	f04f 0800 	mov.w	r8, #0
 8009ea6:	f104 0919 	add.w	r9, r4, #25
 8009eaa:	e7f4      	b.n	8009e96 <_printf_float+0x43e>

08009eac <_printf_common>:
 8009eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	4698      	mov	r8, r3
 8009eb4:	688a      	ldr	r2, [r1, #8]
 8009eb6:	690b      	ldr	r3, [r1, #16]
 8009eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	bfb8      	it	lt
 8009ec0:	4613      	movlt	r3, r2
 8009ec2:	6033      	str	r3, [r6, #0]
 8009ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ec8:	4607      	mov	r7, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b10a      	cbz	r2, 8009ed2 <_printf_common+0x26>
 8009ece:	3301      	adds	r3, #1
 8009ed0:	6033      	str	r3, [r6, #0]
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	0699      	lsls	r1, r3, #26
 8009ed6:	bf42      	ittt	mi
 8009ed8:	6833      	ldrmi	r3, [r6, #0]
 8009eda:	3302      	addmi	r3, #2
 8009edc:	6033      	strmi	r3, [r6, #0]
 8009ede:	6825      	ldr	r5, [r4, #0]
 8009ee0:	f015 0506 	ands.w	r5, r5, #6
 8009ee4:	d106      	bne.n	8009ef4 <_printf_common+0x48>
 8009ee6:	f104 0a19 	add.w	sl, r4, #25
 8009eea:	68e3      	ldr	r3, [r4, #12]
 8009eec:	6832      	ldr	r2, [r6, #0]
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	dc26      	bgt.n	8009f42 <_printf_common+0x96>
 8009ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	3b00      	subs	r3, #0
 8009efc:	bf18      	it	ne
 8009efe:	2301      	movne	r3, #1
 8009f00:	0692      	lsls	r2, r2, #26
 8009f02:	d42b      	bmi.n	8009f5c <_printf_common+0xb0>
 8009f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f08:	4641      	mov	r1, r8
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	47c8      	blx	r9
 8009f0e:	3001      	adds	r0, #1
 8009f10:	d01e      	beq.n	8009f50 <_printf_common+0xa4>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	6922      	ldr	r2, [r4, #16]
 8009f16:	f003 0306 	and.w	r3, r3, #6
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	bf02      	ittt	eq
 8009f1e:	68e5      	ldreq	r5, [r4, #12]
 8009f20:	6833      	ldreq	r3, [r6, #0]
 8009f22:	1aed      	subeq	r5, r5, r3
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	bf0c      	ite	eq
 8009f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f2c:	2500      	movne	r5, #0
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	bfc4      	itt	gt
 8009f32:	1a9b      	subgt	r3, r3, r2
 8009f34:	18ed      	addgt	r5, r5, r3
 8009f36:	2600      	movs	r6, #0
 8009f38:	341a      	adds	r4, #26
 8009f3a:	42b5      	cmp	r5, r6
 8009f3c:	d11a      	bne.n	8009f74 <_printf_common+0xc8>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e008      	b.n	8009f54 <_printf_common+0xa8>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4652      	mov	r2, sl
 8009f46:	4641      	mov	r1, r8
 8009f48:	4638      	mov	r0, r7
 8009f4a:	47c8      	blx	r9
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d103      	bne.n	8009f58 <_printf_common+0xac>
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f58:	3501      	adds	r5, #1
 8009f5a:	e7c6      	b.n	8009eea <_printf_common+0x3e>
 8009f5c:	18e1      	adds	r1, r4, r3
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	2030      	movs	r0, #48	@ 0x30
 8009f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f66:	4422      	add	r2, r4
 8009f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f70:	3302      	adds	r3, #2
 8009f72:	e7c7      	b.n	8009f04 <_printf_common+0x58>
 8009f74:	2301      	movs	r3, #1
 8009f76:	4622      	mov	r2, r4
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	47c8      	blx	r9
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d0e6      	beq.n	8009f50 <_printf_common+0xa4>
 8009f82:	3601      	adds	r6, #1
 8009f84:	e7d9      	b.n	8009f3a <_printf_common+0x8e>
	...

08009f88 <_printf_i>:
 8009f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	7e0f      	ldrb	r7, [r1, #24]
 8009f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f90:	2f78      	cmp	r7, #120	@ 0x78
 8009f92:	4691      	mov	r9, r2
 8009f94:	4680      	mov	r8, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	469a      	mov	sl, r3
 8009f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f9e:	d807      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fa0:	2f62      	cmp	r7, #98	@ 0x62
 8009fa2:	d80a      	bhi.n	8009fba <_printf_i+0x32>
 8009fa4:	2f00      	cmp	r7, #0
 8009fa6:	f000 80d1 	beq.w	800a14c <_printf_i+0x1c4>
 8009faa:	2f58      	cmp	r7, #88	@ 0x58
 8009fac:	f000 80b8 	beq.w	800a120 <_printf_i+0x198>
 8009fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fb8:	e03a      	b.n	800a030 <_printf_i+0xa8>
 8009fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fbe:	2b15      	cmp	r3, #21
 8009fc0:	d8f6      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fc8 <_printf_i+0x40>)
 8009fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc8:	0800a021 	.word	0x0800a021
 8009fcc:	0800a035 	.word	0x0800a035
 8009fd0:	08009fb1 	.word	0x08009fb1
 8009fd4:	08009fb1 	.word	0x08009fb1
 8009fd8:	08009fb1 	.word	0x08009fb1
 8009fdc:	08009fb1 	.word	0x08009fb1
 8009fe0:	0800a035 	.word	0x0800a035
 8009fe4:	08009fb1 	.word	0x08009fb1
 8009fe8:	08009fb1 	.word	0x08009fb1
 8009fec:	08009fb1 	.word	0x08009fb1
 8009ff0:	08009fb1 	.word	0x08009fb1
 8009ff4:	0800a133 	.word	0x0800a133
 8009ff8:	0800a05f 	.word	0x0800a05f
 8009ffc:	0800a0ed 	.word	0x0800a0ed
 800a000:	08009fb1 	.word	0x08009fb1
 800a004:	08009fb1 	.word	0x08009fb1
 800a008:	0800a155 	.word	0x0800a155
 800a00c:	08009fb1 	.word	0x08009fb1
 800a010:	0800a05f 	.word	0x0800a05f
 800a014:	08009fb1 	.word	0x08009fb1
 800a018:	08009fb1 	.word	0x08009fb1
 800a01c:	0800a0f5 	.word	0x0800a0f5
 800a020:	6833      	ldr	r3, [r6, #0]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6032      	str	r2, [r6, #0]
 800a028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a030:	2301      	movs	r3, #1
 800a032:	e09c      	b.n	800a16e <_printf_i+0x1e6>
 800a034:	6833      	ldr	r3, [r6, #0]
 800a036:	6820      	ldr	r0, [r4, #0]
 800a038:	1d19      	adds	r1, r3, #4
 800a03a:	6031      	str	r1, [r6, #0]
 800a03c:	0606      	lsls	r6, r0, #24
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0xbc>
 800a040:	681d      	ldr	r5, [r3, #0]
 800a042:	e003      	b.n	800a04c <_printf_i+0xc4>
 800a044:	0645      	lsls	r5, r0, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0xb8>
 800a048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	da03      	bge.n	800a058 <_printf_i+0xd0>
 800a050:	232d      	movs	r3, #45	@ 0x2d
 800a052:	426d      	negs	r5, r5
 800a054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a058:	4858      	ldr	r0, [pc, #352]	@ (800a1bc <_printf_i+0x234>)
 800a05a:	230a      	movs	r3, #10
 800a05c:	e011      	b.n	800a082 <_printf_i+0xfa>
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	6833      	ldr	r3, [r6, #0]
 800a062:	0608      	lsls	r0, r1, #24
 800a064:	f853 5b04 	ldr.w	r5, [r3], #4
 800a068:	d402      	bmi.n	800a070 <_printf_i+0xe8>
 800a06a:	0649      	lsls	r1, r1, #25
 800a06c:	bf48      	it	mi
 800a06e:	b2ad      	uxthmi	r5, r5
 800a070:	2f6f      	cmp	r7, #111	@ 0x6f
 800a072:	4852      	ldr	r0, [pc, #328]	@ (800a1bc <_printf_i+0x234>)
 800a074:	6033      	str	r3, [r6, #0]
 800a076:	bf14      	ite	ne
 800a078:	230a      	movne	r3, #10
 800a07a:	2308      	moveq	r3, #8
 800a07c:	2100      	movs	r1, #0
 800a07e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a082:	6866      	ldr	r6, [r4, #4]
 800a084:	60a6      	str	r6, [r4, #8]
 800a086:	2e00      	cmp	r6, #0
 800a088:	db05      	blt.n	800a096 <_printf_i+0x10e>
 800a08a:	6821      	ldr	r1, [r4, #0]
 800a08c:	432e      	orrs	r6, r5
 800a08e:	f021 0104 	bic.w	r1, r1, #4
 800a092:	6021      	str	r1, [r4, #0]
 800a094:	d04b      	beq.n	800a12e <_printf_i+0x1a6>
 800a096:	4616      	mov	r6, r2
 800a098:	fbb5 f1f3 	udiv	r1, r5, r3
 800a09c:	fb03 5711 	mls	r7, r3, r1, r5
 800a0a0:	5dc7      	ldrb	r7, [r0, r7]
 800a0a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0a6:	462f      	mov	r7, r5
 800a0a8:	42bb      	cmp	r3, r7
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	d9f4      	bls.n	800a098 <_printf_i+0x110>
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	d10b      	bne.n	800a0ca <_printf_i+0x142>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	07df      	lsls	r7, r3, #31
 800a0b6:	d508      	bpl.n	800a0ca <_printf_i+0x142>
 800a0b8:	6923      	ldr	r3, [r4, #16]
 800a0ba:	6861      	ldr	r1, [r4, #4]
 800a0bc:	4299      	cmp	r1, r3
 800a0be:	bfde      	ittt	le
 800a0c0:	2330      	movle	r3, #48	@ 0x30
 800a0c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ca:	1b92      	subs	r2, r2, r6
 800a0cc:	6122      	str	r2, [r4, #16]
 800a0ce:	f8cd a000 	str.w	sl, [sp]
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	aa03      	add	r2, sp, #12
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4640      	mov	r0, r8
 800a0da:	f7ff fee7 	bl	8009eac <_printf_common>
 800a0de:	3001      	adds	r0, #1
 800a0e0:	d14a      	bne.n	800a178 <_printf_i+0x1f0>
 800a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e6:	b004      	add	sp, #16
 800a0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	f043 0320 	orr.w	r3, r3, #32
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	4832      	ldr	r0, [pc, #200]	@ (800a1c0 <_printf_i+0x238>)
 800a0f6:	2778      	movs	r7, #120	@ 0x78
 800a0f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	6831      	ldr	r1, [r6, #0]
 800a100:	061f      	lsls	r7, r3, #24
 800a102:	f851 5b04 	ldr.w	r5, [r1], #4
 800a106:	d402      	bmi.n	800a10e <_printf_i+0x186>
 800a108:	065f      	lsls	r7, r3, #25
 800a10a:	bf48      	it	mi
 800a10c:	b2ad      	uxthmi	r5, r5
 800a10e:	6031      	str	r1, [r6, #0]
 800a110:	07d9      	lsls	r1, r3, #31
 800a112:	bf44      	itt	mi
 800a114:	f043 0320 	orrmi.w	r3, r3, #32
 800a118:	6023      	strmi	r3, [r4, #0]
 800a11a:	b11d      	cbz	r5, 800a124 <_printf_i+0x19c>
 800a11c:	2310      	movs	r3, #16
 800a11e:	e7ad      	b.n	800a07c <_printf_i+0xf4>
 800a120:	4826      	ldr	r0, [pc, #152]	@ (800a1bc <_printf_i+0x234>)
 800a122:	e7e9      	b.n	800a0f8 <_printf_i+0x170>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	f023 0320 	bic.w	r3, r3, #32
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	e7f6      	b.n	800a11c <_printf_i+0x194>
 800a12e:	4616      	mov	r6, r2
 800a130:	e7bd      	b.n	800a0ae <_printf_i+0x126>
 800a132:	6833      	ldr	r3, [r6, #0]
 800a134:	6825      	ldr	r5, [r4, #0]
 800a136:	6961      	ldr	r1, [r4, #20]
 800a138:	1d18      	adds	r0, r3, #4
 800a13a:	6030      	str	r0, [r6, #0]
 800a13c:	062e      	lsls	r6, r5, #24
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	d501      	bpl.n	800a146 <_printf_i+0x1be>
 800a142:	6019      	str	r1, [r3, #0]
 800a144:	e002      	b.n	800a14c <_printf_i+0x1c4>
 800a146:	0668      	lsls	r0, r5, #25
 800a148:	d5fb      	bpl.n	800a142 <_printf_i+0x1ba>
 800a14a:	8019      	strh	r1, [r3, #0]
 800a14c:	2300      	movs	r3, #0
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	4616      	mov	r6, r2
 800a152:	e7bc      	b.n	800a0ce <_printf_i+0x146>
 800a154:	6833      	ldr	r3, [r6, #0]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	6032      	str	r2, [r6, #0]
 800a15a:	681e      	ldr	r6, [r3, #0]
 800a15c:	6862      	ldr	r2, [r4, #4]
 800a15e:	2100      	movs	r1, #0
 800a160:	4630      	mov	r0, r6
 800a162:	f7f6 f835 	bl	80001d0 <memchr>
 800a166:	b108      	cbz	r0, 800a16c <_printf_i+0x1e4>
 800a168:	1b80      	subs	r0, r0, r6
 800a16a:	6060      	str	r0, [r4, #4]
 800a16c:	6863      	ldr	r3, [r4, #4]
 800a16e:	6123      	str	r3, [r4, #16]
 800a170:	2300      	movs	r3, #0
 800a172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a176:	e7aa      	b.n	800a0ce <_printf_i+0x146>
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	4632      	mov	r2, r6
 800a17c:	4649      	mov	r1, r9
 800a17e:	4640      	mov	r0, r8
 800a180:	47d0      	blx	sl
 800a182:	3001      	adds	r0, #1
 800a184:	d0ad      	beq.n	800a0e2 <_printf_i+0x15a>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	079b      	lsls	r3, r3, #30
 800a18a:	d413      	bmi.n	800a1b4 <_printf_i+0x22c>
 800a18c:	68e0      	ldr	r0, [r4, #12]
 800a18e:	9b03      	ldr	r3, [sp, #12]
 800a190:	4298      	cmp	r0, r3
 800a192:	bfb8      	it	lt
 800a194:	4618      	movlt	r0, r3
 800a196:	e7a6      	b.n	800a0e6 <_printf_i+0x15e>
 800a198:	2301      	movs	r3, #1
 800a19a:	4632      	mov	r2, r6
 800a19c:	4649      	mov	r1, r9
 800a19e:	4640      	mov	r0, r8
 800a1a0:	47d0      	blx	sl
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d09d      	beq.n	800a0e2 <_printf_i+0x15a>
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	68e3      	ldr	r3, [r4, #12]
 800a1aa:	9903      	ldr	r1, [sp, #12]
 800a1ac:	1a5b      	subs	r3, r3, r1
 800a1ae:	42ab      	cmp	r3, r5
 800a1b0:	dcf2      	bgt.n	800a198 <_printf_i+0x210>
 800a1b2:	e7eb      	b.n	800a18c <_printf_i+0x204>
 800a1b4:	2500      	movs	r5, #0
 800a1b6:	f104 0619 	add.w	r6, r4, #25
 800a1ba:	e7f5      	b.n	800a1a8 <_printf_i+0x220>
 800a1bc:	0800c2aa 	.word	0x0800c2aa
 800a1c0:	0800c2bb 	.word	0x0800c2bb

0800a1c4 <std>:
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d2:	6083      	str	r3, [r0, #8]
 800a1d4:	8181      	strh	r1, [r0, #12]
 800a1d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1d8:	81c2      	strh	r2, [r0, #14]
 800a1da:	6183      	str	r3, [r0, #24]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2208      	movs	r2, #8
 800a1e0:	305c      	adds	r0, #92	@ 0x5c
 800a1e2:	f000 f8f4 	bl	800a3ce <memset>
 800a1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a21c <std+0x58>)
 800a1e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <std+0x5c>)
 800a1ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <std+0x60>)
 800a1f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <std+0x64>)
 800a1f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a22c <std+0x68>)
 800a1f8:	6224      	str	r4, [r4, #32]
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d006      	beq.n	800a20c <std+0x48>
 800a1fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a202:	4294      	cmp	r4, r2
 800a204:	d002      	beq.n	800a20c <std+0x48>
 800a206:	33d0      	adds	r3, #208	@ 0xd0
 800a208:	429c      	cmp	r4, r3
 800a20a:	d105      	bne.n	800a218 <std+0x54>
 800a20c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	f000 b958 	b.w	800a4c8 <__retarget_lock_init_recursive>
 800a218:	bd10      	pop	{r4, pc}
 800a21a:	bf00      	nop
 800a21c:	0800a349 	.word	0x0800a349
 800a220:	0800a36b 	.word	0x0800a36b
 800a224:	0800a3a3 	.word	0x0800a3a3
 800a228:	0800a3c7 	.word	0x0800a3c7
 800a22c:	20002064 	.word	0x20002064

0800a230 <stdio_exit_handler>:
 800a230:	4a02      	ldr	r2, [pc, #8]	@ (800a23c <stdio_exit_handler+0xc>)
 800a232:	4903      	ldr	r1, [pc, #12]	@ (800a240 <stdio_exit_handler+0x10>)
 800a234:	4803      	ldr	r0, [pc, #12]	@ (800a244 <stdio_exit_handler+0x14>)
 800a236:	f000 b869 	b.w	800a30c <_fwalk_sglue>
 800a23a:	bf00      	nop
 800a23c:	200000fc 	.word	0x200000fc
 800a240:	0800be01 	.word	0x0800be01
 800a244:	2000010c 	.word	0x2000010c

0800a248 <cleanup_stdio>:
 800a248:	6841      	ldr	r1, [r0, #4]
 800a24a:	4b0c      	ldr	r3, [pc, #48]	@ (800a27c <cleanup_stdio+0x34>)
 800a24c:	4299      	cmp	r1, r3
 800a24e:	b510      	push	{r4, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	d001      	beq.n	800a258 <cleanup_stdio+0x10>
 800a254:	f001 fdd4 	bl	800be00 <_fflush_r>
 800a258:	68a1      	ldr	r1, [r4, #8]
 800a25a:	4b09      	ldr	r3, [pc, #36]	@ (800a280 <cleanup_stdio+0x38>)
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <cleanup_stdio+0x1e>
 800a260:	4620      	mov	r0, r4
 800a262:	f001 fdcd 	bl	800be00 <_fflush_r>
 800a266:	68e1      	ldr	r1, [r4, #12]
 800a268:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <cleanup_stdio+0x3c>)
 800a26a:	4299      	cmp	r1, r3
 800a26c:	d004      	beq.n	800a278 <cleanup_stdio+0x30>
 800a26e:	4620      	mov	r0, r4
 800a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a274:	f001 bdc4 	b.w	800be00 <_fflush_r>
 800a278:	bd10      	pop	{r4, pc}
 800a27a:	bf00      	nop
 800a27c:	20002064 	.word	0x20002064
 800a280:	200020cc 	.word	0x200020cc
 800a284:	20002134 	.word	0x20002134

0800a288 <global_stdio_init.part.0>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <global_stdio_init.part.0+0x30>)
 800a28c:	4c0b      	ldr	r4, [pc, #44]	@ (800a2bc <global_stdio_init.part.0+0x34>)
 800a28e:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c0 <global_stdio_init.part.0+0x38>)
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	4620      	mov	r0, r4
 800a294:	2200      	movs	r2, #0
 800a296:	2104      	movs	r1, #4
 800a298:	f7ff ff94 	bl	800a1c4 <std>
 800a29c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	2109      	movs	r1, #9
 800a2a4:	f7ff ff8e 	bl	800a1c4 <std>
 800a2a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b2:	2112      	movs	r1, #18
 800a2b4:	f7ff bf86 	b.w	800a1c4 <std>
 800a2b8:	2000219c 	.word	0x2000219c
 800a2bc:	20002064 	.word	0x20002064
 800a2c0:	0800a231 	.word	0x0800a231

0800a2c4 <__sfp_lock_acquire>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	@ (800a2cc <__sfp_lock_acquire+0x8>)
 800a2c6:	f000 b900 	b.w	800a4ca <__retarget_lock_acquire_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	200021a5 	.word	0x200021a5

0800a2d0 <__sfp_lock_release>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	@ (800a2d8 <__sfp_lock_release+0x8>)
 800a2d2:	f000 b8fb 	b.w	800a4cc <__retarget_lock_release_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	200021a5 	.word	0x200021a5

0800a2dc <__sinit>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f7ff fff0 	bl	800a2c4 <__sfp_lock_acquire>
 800a2e4:	6a23      	ldr	r3, [r4, #32]
 800a2e6:	b11b      	cbz	r3, 800a2f0 <__sinit+0x14>
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	f7ff bff0 	b.w	800a2d0 <__sfp_lock_release>
 800a2f0:	4b04      	ldr	r3, [pc, #16]	@ (800a304 <__sinit+0x28>)
 800a2f2:	6223      	str	r3, [r4, #32]
 800a2f4:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <__sinit+0x2c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f5      	bne.n	800a2e8 <__sinit+0xc>
 800a2fc:	f7ff ffc4 	bl	800a288 <global_stdio_init.part.0>
 800a300:	e7f2      	b.n	800a2e8 <__sinit+0xc>
 800a302:	bf00      	nop
 800a304:	0800a249 	.word	0x0800a249
 800a308:	2000219c 	.word	0x2000219c

0800a30c <_fwalk_sglue>:
 800a30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a310:	4607      	mov	r7, r0
 800a312:	4688      	mov	r8, r1
 800a314:	4614      	mov	r4, r2
 800a316:	2600      	movs	r6, #0
 800a318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a31c:	f1b9 0901 	subs.w	r9, r9, #1
 800a320:	d505      	bpl.n	800a32e <_fwalk_sglue+0x22>
 800a322:	6824      	ldr	r4, [r4, #0]
 800a324:	2c00      	cmp	r4, #0
 800a326:	d1f7      	bne.n	800a318 <_fwalk_sglue+0xc>
 800a328:	4630      	mov	r0, r6
 800a32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d907      	bls.n	800a344 <_fwalk_sglue+0x38>
 800a334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a338:	3301      	adds	r3, #1
 800a33a:	d003      	beq.n	800a344 <_fwalk_sglue+0x38>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4638      	mov	r0, r7
 800a340:	47c0      	blx	r8
 800a342:	4306      	orrs	r6, r0
 800a344:	3568      	adds	r5, #104	@ 0x68
 800a346:	e7e9      	b.n	800a31c <_fwalk_sglue+0x10>

0800a348 <__sread>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	460c      	mov	r4, r1
 800a34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a350:	f000 f86c 	bl	800a42c <_read_r>
 800a354:	2800      	cmp	r0, #0
 800a356:	bfab      	itete	ge
 800a358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a35a:	89a3      	ldrhlt	r3, [r4, #12]
 800a35c:	181b      	addge	r3, r3, r0
 800a35e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a362:	bfac      	ite	ge
 800a364:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a366:	81a3      	strhlt	r3, [r4, #12]
 800a368:	bd10      	pop	{r4, pc}

0800a36a <__swrite>:
 800a36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36e:	461f      	mov	r7, r3
 800a370:	898b      	ldrh	r3, [r1, #12]
 800a372:	05db      	lsls	r3, r3, #23
 800a374:	4605      	mov	r5, r0
 800a376:	460c      	mov	r4, r1
 800a378:	4616      	mov	r6, r2
 800a37a:	d505      	bpl.n	800a388 <__swrite+0x1e>
 800a37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a380:	2302      	movs	r3, #2
 800a382:	2200      	movs	r2, #0
 800a384:	f000 f840 	bl	800a408 <_lseek_r>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a38e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a392:	81a3      	strh	r3, [r4, #12]
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	4628      	mov	r0, r5
 800a39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	f000 b857 	b.w	800a450 <_write_r>

0800a3a2 <__sseek>:
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3aa:	f000 f82d 	bl	800a408 <_lseek_r>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	bf15      	itete	ne
 800a3b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3be:	81a3      	strheq	r3, [r4, #12]
 800a3c0:	bf18      	it	ne
 800a3c2:	81a3      	strhne	r3, [r4, #12]
 800a3c4:	bd10      	pop	{r4, pc}

0800a3c6 <__sclose>:
 800a3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ca:	f000 b80d 	b.w	800a3e8 <_close_r>

0800a3ce <memset>:
 800a3ce:	4402      	add	r2, r0
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d100      	bne.n	800a3d8 <memset+0xa>
 800a3d6:	4770      	bx	lr
 800a3d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3dc:	e7f9      	b.n	800a3d2 <memset+0x4>
	...

0800a3e0 <_localeconv_r>:
 800a3e0:	4800      	ldr	r0, [pc, #0]	@ (800a3e4 <_localeconv_r+0x4>)
 800a3e2:	4770      	bx	lr
 800a3e4:	20000248 	.word	0x20000248

0800a3e8 <_close_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d06      	ldr	r5, [pc, #24]	@ (800a404 <_close_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f7f7 f91e 	bl	8001634 <_close>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_close_r+0x1a>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_close_r+0x1a>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	200021a0 	.word	0x200021a0

0800a408 <_lseek_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d07      	ldr	r5, [pc, #28]	@ (800a428 <_lseek_r+0x20>)
 800a40c:	4604      	mov	r4, r0
 800a40e:	4608      	mov	r0, r1
 800a410:	4611      	mov	r1, r2
 800a412:	2200      	movs	r2, #0
 800a414:	602a      	str	r2, [r5, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	f7f7 f933 	bl	8001682 <_lseek>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_lseek_r+0x1e>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_lseek_r+0x1e>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	200021a0 	.word	0x200021a0

0800a42c <_read_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d07      	ldr	r5, [pc, #28]	@ (800a44c <_read_r+0x20>)
 800a430:	4604      	mov	r4, r0
 800a432:	4608      	mov	r0, r1
 800a434:	4611      	mov	r1, r2
 800a436:	2200      	movs	r2, #0
 800a438:	602a      	str	r2, [r5, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	f7f7 f8dd 	bl	80015fa <_read>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d102      	bne.n	800a44a <_read_r+0x1e>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	b103      	cbz	r3, 800a44a <_read_r+0x1e>
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	200021a0 	.word	0x200021a0

0800a450 <_write_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4d07      	ldr	r5, [pc, #28]	@ (800a470 <_write_r+0x20>)
 800a454:	4604      	mov	r4, r0
 800a456:	4608      	mov	r0, r1
 800a458:	4611      	mov	r1, r2
 800a45a:	2200      	movs	r2, #0
 800a45c:	602a      	str	r2, [r5, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	f7fe fdf8 	bl	8009054 <_write>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_write_r+0x1e>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_write_r+0x1e>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	200021a0 	.word	0x200021a0

0800a474 <__errno>:
 800a474:	4b01      	ldr	r3, [pc, #4]	@ (800a47c <__errno+0x8>)
 800a476:	6818      	ldr	r0, [r3, #0]
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	20000108 	.word	0x20000108

0800a480 <__libc_init_array>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	4d0d      	ldr	r5, [pc, #52]	@ (800a4b8 <__libc_init_array+0x38>)
 800a484:	4c0d      	ldr	r4, [pc, #52]	@ (800a4bc <__libc_init_array+0x3c>)
 800a486:	1b64      	subs	r4, r4, r5
 800a488:	10a4      	asrs	r4, r4, #2
 800a48a:	2600      	movs	r6, #0
 800a48c:	42a6      	cmp	r6, r4
 800a48e:	d109      	bne.n	800a4a4 <__libc_init_array+0x24>
 800a490:	4d0b      	ldr	r5, [pc, #44]	@ (800a4c0 <__libc_init_array+0x40>)
 800a492:	4c0c      	ldr	r4, [pc, #48]	@ (800a4c4 <__libc_init_array+0x44>)
 800a494:	f001 fec2 	bl	800c21c <_init>
 800a498:	1b64      	subs	r4, r4, r5
 800a49a:	10a4      	asrs	r4, r4, #2
 800a49c:	2600      	movs	r6, #0
 800a49e:	42a6      	cmp	r6, r4
 800a4a0:	d105      	bne.n	800a4ae <__libc_init_array+0x2e>
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a8:	4798      	blx	r3
 800a4aa:	3601      	adds	r6, #1
 800a4ac:	e7ee      	b.n	800a48c <__libc_init_array+0xc>
 800a4ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b2:	4798      	blx	r3
 800a4b4:	3601      	adds	r6, #1
 800a4b6:	e7f2      	b.n	800a49e <__libc_init_array+0x1e>
 800a4b8:	0800c614 	.word	0x0800c614
 800a4bc:	0800c614 	.word	0x0800c614
 800a4c0:	0800c614 	.word	0x0800c614
 800a4c4:	0800c618 	.word	0x0800c618

0800a4c8 <__retarget_lock_init_recursive>:
 800a4c8:	4770      	bx	lr

0800a4ca <__retarget_lock_acquire_recursive>:
 800a4ca:	4770      	bx	lr

0800a4cc <__retarget_lock_release_recursive>:
 800a4cc:	4770      	bx	lr

0800a4ce <quorem>:
 800a4ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d2:	6903      	ldr	r3, [r0, #16]
 800a4d4:	690c      	ldr	r4, [r1, #16]
 800a4d6:	42a3      	cmp	r3, r4
 800a4d8:	4607      	mov	r7, r0
 800a4da:	db7e      	blt.n	800a5da <quorem+0x10c>
 800a4dc:	3c01      	subs	r4, #1
 800a4de:	f101 0814 	add.w	r8, r1, #20
 800a4e2:	00a3      	lsls	r3, r4, #2
 800a4e4:	f100 0514 	add.w	r5, r0, #20
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a500:	fbb2 f6f3 	udiv	r6, r2, r3
 800a504:	d32e      	bcc.n	800a564 <quorem+0x96>
 800a506:	f04f 0a00 	mov.w	sl, #0
 800a50a:	46c4      	mov	ip, r8
 800a50c:	46ae      	mov	lr, r5
 800a50e:	46d3      	mov	fp, sl
 800a510:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a514:	b298      	uxth	r0, r3
 800a516:	fb06 a000 	mla	r0, r6, r0, sl
 800a51a:	0c02      	lsrs	r2, r0, #16
 800a51c:	0c1b      	lsrs	r3, r3, #16
 800a51e:	fb06 2303 	mla	r3, r6, r3, r2
 800a522:	f8de 2000 	ldr.w	r2, [lr]
 800a526:	b280      	uxth	r0, r0
 800a528:	b292      	uxth	r2, r2
 800a52a:	1a12      	subs	r2, r2, r0
 800a52c:	445a      	add	r2, fp
 800a52e:	f8de 0000 	ldr.w	r0, [lr]
 800a532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a536:	b29b      	uxth	r3, r3
 800a538:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a53c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a540:	b292      	uxth	r2, r2
 800a542:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a546:	45e1      	cmp	r9, ip
 800a548:	f84e 2b04 	str.w	r2, [lr], #4
 800a54c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a550:	d2de      	bcs.n	800a510 <quorem+0x42>
 800a552:	9b00      	ldr	r3, [sp, #0]
 800a554:	58eb      	ldr	r3, [r5, r3]
 800a556:	b92b      	cbnz	r3, 800a564 <quorem+0x96>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	3b04      	subs	r3, #4
 800a55c:	429d      	cmp	r5, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	d32f      	bcc.n	800a5c2 <quorem+0xf4>
 800a562:	613c      	str	r4, [r7, #16]
 800a564:	4638      	mov	r0, r7
 800a566:	f001 f97d 	bl	800b864 <__mcmp>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	db25      	blt.n	800a5ba <quorem+0xec>
 800a56e:	4629      	mov	r1, r5
 800a570:	2000      	movs	r0, #0
 800a572:	f858 2b04 	ldr.w	r2, [r8], #4
 800a576:	f8d1 c000 	ldr.w	ip, [r1]
 800a57a:	fa1f fe82 	uxth.w	lr, r2
 800a57e:	fa1f f38c 	uxth.w	r3, ip
 800a582:	eba3 030e 	sub.w	r3, r3, lr
 800a586:	4403      	add	r3, r0
 800a588:	0c12      	lsrs	r2, r2, #16
 800a58a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a58e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a598:	45c1      	cmp	r9, r8
 800a59a:	f841 3b04 	str.w	r3, [r1], #4
 800a59e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5a2:	d2e6      	bcs.n	800a572 <quorem+0xa4>
 800a5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ac:	b922      	cbnz	r2, 800a5b8 <quorem+0xea>
 800a5ae:	3b04      	subs	r3, #4
 800a5b0:	429d      	cmp	r5, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	d30b      	bcc.n	800a5ce <quorem+0x100>
 800a5b6:	613c      	str	r4, [r7, #16]
 800a5b8:	3601      	adds	r6, #1
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	b003      	add	sp, #12
 800a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c2:	6812      	ldr	r2, [r2, #0]
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	d1cb      	bne.n	800a562 <quorem+0x94>
 800a5ca:	3c01      	subs	r4, #1
 800a5cc:	e7c6      	b.n	800a55c <quorem+0x8e>
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d1ef      	bne.n	800a5b6 <quorem+0xe8>
 800a5d6:	3c01      	subs	r4, #1
 800a5d8:	e7ea      	b.n	800a5b0 <quorem+0xe2>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	e7ee      	b.n	800a5bc <quorem+0xee>
	...

0800a5e0 <_dtoa_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	69c7      	ldr	r7, [r0, #28]
 800a5e6:	b097      	sub	sp, #92	@ 0x5c
 800a5e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a5ec:	ec55 4b10 	vmov	r4, r5, d0
 800a5f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a5f2:	9107      	str	r1, [sp, #28]
 800a5f4:	4681      	mov	r9, r0
 800a5f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a5f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5fa:	b97f      	cbnz	r7, 800a61c <_dtoa_r+0x3c>
 800a5fc:	2010      	movs	r0, #16
 800a5fe:	f000 fe09 	bl	800b214 <malloc>
 800a602:	4602      	mov	r2, r0
 800a604:	f8c9 001c 	str.w	r0, [r9, #28]
 800a608:	b920      	cbnz	r0, 800a614 <_dtoa_r+0x34>
 800a60a:	4ba9      	ldr	r3, [pc, #676]	@ (800a8b0 <_dtoa_r+0x2d0>)
 800a60c:	21ef      	movs	r1, #239	@ 0xef
 800a60e:	48a9      	ldr	r0, [pc, #676]	@ (800a8b4 <_dtoa_r+0x2d4>)
 800a610:	f001 fcd0 	bl	800bfb4 <__assert_func>
 800a614:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a618:	6007      	str	r7, [r0, #0]
 800a61a:	60c7      	str	r7, [r0, #12]
 800a61c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a620:	6819      	ldr	r1, [r3, #0]
 800a622:	b159      	cbz	r1, 800a63c <_dtoa_r+0x5c>
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	604a      	str	r2, [r1, #4]
 800a628:	2301      	movs	r3, #1
 800a62a:	4093      	lsls	r3, r2
 800a62c:	608b      	str	r3, [r1, #8]
 800a62e:	4648      	mov	r0, r9
 800a630:	f000 fee6 	bl	800b400 <_Bfree>
 800a634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	1e2b      	subs	r3, r5, #0
 800a63e:	bfb9      	ittee	lt
 800a640:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a644:	9305      	strlt	r3, [sp, #20]
 800a646:	2300      	movge	r3, #0
 800a648:	6033      	strge	r3, [r6, #0]
 800a64a:	9f05      	ldr	r7, [sp, #20]
 800a64c:	4b9a      	ldr	r3, [pc, #616]	@ (800a8b8 <_dtoa_r+0x2d8>)
 800a64e:	bfbc      	itt	lt
 800a650:	2201      	movlt	r2, #1
 800a652:	6032      	strlt	r2, [r6, #0]
 800a654:	43bb      	bics	r3, r7
 800a656:	d112      	bne.n	800a67e <_dtoa_r+0x9e>
 800a658:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a65a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a664:	4323      	orrs	r3, r4
 800a666:	f000 855a 	beq.w	800b11e <_dtoa_r+0xb3e>
 800a66a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a66c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a8cc <_dtoa_r+0x2ec>
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 855c 	beq.w	800b12e <_dtoa_r+0xb4e>
 800a676:	f10a 0303 	add.w	r3, sl, #3
 800a67a:	f000 bd56 	b.w	800b12a <_dtoa_r+0xb4a>
 800a67e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a682:	2200      	movs	r2, #0
 800a684:	ec51 0b17 	vmov	r0, r1, d7
 800a688:	2300      	movs	r3, #0
 800a68a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a68e:	f7f6 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a692:	4680      	mov	r8, r0
 800a694:	b158      	cbz	r0, 800a6ae <_dtoa_r+0xce>
 800a696:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a698:	2301      	movs	r3, #1
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a69e:	b113      	cbz	r3, 800a6a6 <_dtoa_r+0xc6>
 800a6a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a6a2:	4b86      	ldr	r3, [pc, #536]	@ (800a8bc <_dtoa_r+0x2dc>)
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a8d0 <_dtoa_r+0x2f0>
 800a6aa:	f000 bd40 	b.w	800b12e <_dtoa_r+0xb4e>
 800a6ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a6b2:	aa14      	add	r2, sp, #80	@ 0x50
 800a6b4:	a915      	add	r1, sp, #84	@ 0x54
 800a6b6:	4648      	mov	r0, r9
 800a6b8:	f001 f984 	bl	800b9c4 <__d2b>
 800a6bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a6c0:	9002      	str	r0, [sp, #8]
 800a6c2:	2e00      	cmp	r6, #0
 800a6c4:	d078      	beq.n	800a7b8 <_dtoa_r+0x1d8>
 800a6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a6cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a6dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4b76      	ldr	r3, [pc, #472]	@ (800a8c0 <_dtoa_r+0x2e0>)
 800a6e6:	f7f5 fdcf 	bl	8000288 <__aeabi_dsub>
 800a6ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800a898 <_dtoa_r+0x2b8>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f7f5 ff82 	bl	80005f8 <__aeabi_dmul>
 800a6f4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a8a0 <_dtoa_r+0x2c0>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f7f5 fdc7 	bl	800028c <__adddf3>
 800a6fe:	4604      	mov	r4, r0
 800a700:	4630      	mov	r0, r6
 800a702:	460d      	mov	r5, r1
 800a704:	f7f5 ff0e 	bl	8000524 <__aeabi_i2d>
 800a708:	a367      	add	r3, pc, #412	@ (adr r3, 800a8a8 <_dtoa_r+0x2c8>)
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	4620      	mov	r0, r4
 800a718:	4629      	mov	r1, r5
 800a71a:	f7f5 fdb7 	bl	800028c <__adddf3>
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
 800a722:	f7f6 fa19 	bl	8000b58 <__aeabi_d2iz>
 800a726:	2200      	movs	r2, #0
 800a728:	4607      	mov	r7, r0
 800a72a:	2300      	movs	r3, #0
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f6 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800a734:	b140      	cbz	r0, 800a748 <_dtoa_r+0x168>
 800a736:	4638      	mov	r0, r7
 800a738:	f7f5 fef4 	bl	8000524 <__aeabi_i2d>
 800a73c:	4622      	mov	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	f7f6 f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a744:	b900      	cbnz	r0, 800a748 <_dtoa_r+0x168>
 800a746:	3f01      	subs	r7, #1
 800a748:	2f16      	cmp	r7, #22
 800a74a:	d852      	bhi.n	800a7f2 <_dtoa_r+0x212>
 800a74c:	4b5d      	ldr	r3, [pc, #372]	@ (800a8c4 <_dtoa_r+0x2e4>)
 800a74e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a75a:	f7f6 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d049      	beq.n	800a7f6 <_dtoa_r+0x216>
 800a762:	3f01      	subs	r7, #1
 800a764:	2300      	movs	r3, #0
 800a766:	9310      	str	r3, [sp, #64]	@ 0x40
 800a768:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a76a:	1b9b      	subs	r3, r3, r6
 800a76c:	1e5a      	subs	r2, r3, #1
 800a76e:	bf45      	ittet	mi
 800a770:	f1c3 0301 	rsbmi	r3, r3, #1
 800a774:	9300      	strmi	r3, [sp, #0]
 800a776:	2300      	movpl	r3, #0
 800a778:	2300      	movmi	r3, #0
 800a77a:	9206      	str	r2, [sp, #24]
 800a77c:	bf54      	ite	pl
 800a77e:	9300      	strpl	r3, [sp, #0]
 800a780:	9306      	strmi	r3, [sp, #24]
 800a782:	2f00      	cmp	r7, #0
 800a784:	db39      	blt.n	800a7fa <_dtoa_r+0x21a>
 800a786:	9b06      	ldr	r3, [sp, #24]
 800a788:	970d      	str	r7, [sp, #52]	@ 0x34
 800a78a:	443b      	add	r3, r7
 800a78c:	9306      	str	r3, [sp, #24]
 800a78e:	2300      	movs	r3, #0
 800a790:	9308      	str	r3, [sp, #32]
 800a792:	9b07      	ldr	r3, [sp, #28]
 800a794:	2b09      	cmp	r3, #9
 800a796:	d863      	bhi.n	800a860 <_dtoa_r+0x280>
 800a798:	2b05      	cmp	r3, #5
 800a79a:	bfc4      	itt	gt
 800a79c:	3b04      	subgt	r3, #4
 800a79e:	9307      	strgt	r3, [sp, #28]
 800a7a0:	9b07      	ldr	r3, [sp, #28]
 800a7a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a7a6:	bfcc      	ite	gt
 800a7a8:	2400      	movgt	r4, #0
 800a7aa:	2401      	movle	r4, #1
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d863      	bhi.n	800a878 <_dtoa_r+0x298>
 800a7b0:	e8df f003 	tbb	[pc, r3]
 800a7b4:	2b375452 	.word	0x2b375452
 800a7b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a7bc:	441e      	add	r6, r3
 800a7be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	bfc1      	itttt	gt
 800a7c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a7ca:	409f      	lslgt	r7, r3
 800a7cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a7d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a7d4:	bfd6      	itet	le
 800a7d6:	f1c3 0320 	rsble	r3, r3, #32
 800a7da:	ea47 0003 	orrgt.w	r0, r7, r3
 800a7de:	fa04 f003 	lslle.w	r0, r4, r3
 800a7e2:	f7f5 fe8f 	bl	8000504 <__aeabi_ui2d>
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a7ec:	3e01      	subs	r6, #1
 800a7ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800a7f0:	e776      	b.n	800a6e0 <_dtoa_r+0x100>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e7b7      	b.n	800a766 <_dtoa_r+0x186>
 800a7f6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a7f8:	e7b6      	b.n	800a768 <_dtoa_r+0x188>
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	1bdb      	subs	r3, r3, r7
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	427b      	negs	r3, r7
 800a802:	9308      	str	r3, [sp, #32]
 800a804:	2300      	movs	r3, #0
 800a806:	930d      	str	r3, [sp, #52]	@ 0x34
 800a808:	e7c3      	b.n	800a792 <_dtoa_r+0x1b2>
 800a80a:	2301      	movs	r3, #1
 800a80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a80e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a810:	eb07 0b03 	add.w	fp, r7, r3
 800a814:	f10b 0301 	add.w	r3, fp, #1
 800a818:	2b01      	cmp	r3, #1
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	bfb8      	it	lt
 800a81e:	2301      	movlt	r3, #1
 800a820:	e006      	b.n	800a830 <_dtoa_r+0x250>
 800a822:	2301      	movs	r3, #1
 800a824:	9309      	str	r3, [sp, #36]	@ 0x24
 800a826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dd28      	ble.n	800a87e <_dtoa_r+0x29e>
 800a82c:	469b      	mov	fp, r3
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a834:	2100      	movs	r1, #0
 800a836:	2204      	movs	r2, #4
 800a838:	f102 0514 	add.w	r5, r2, #20
 800a83c:	429d      	cmp	r5, r3
 800a83e:	d926      	bls.n	800a88e <_dtoa_r+0x2ae>
 800a840:	6041      	str	r1, [r0, #4]
 800a842:	4648      	mov	r0, r9
 800a844:	f000 fd9c 	bl	800b380 <_Balloc>
 800a848:	4682      	mov	sl, r0
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d142      	bne.n	800a8d4 <_dtoa_r+0x2f4>
 800a84e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8c8 <_dtoa_r+0x2e8>)
 800a850:	4602      	mov	r2, r0
 800a852:	f240 11af 	movw	r1, #431	@ 0x1af
 800a856:	e6da      	b.n	800a60e <_dtoa_r+0x2e>
 800a858:	2300      	movs	r3, #0
 800a85a:	e7e3      	b.n	800a824 <_dtoa_r+0x244>
 800a85c:	2300      	movs	r3, #0
 800a85e:	e7d5      	b.n	800a80c <_dtoa_r+0x22c>
 800a860:	2401      	movs	r4, #1
 800a862:	2300      	movs	r3, #0
 800a864:	9307      	str	r3, [sp, #28]
 800a866:	9409      	str	r4, [sp, #36]	@ 0x24
 800a868:	f04f 3bff 	mov.w	fp, #4294967295
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a872:	2312      	movs	r3, #18
 800a874:	920c      	str	r2, [sp, #48]	@ 0x30
 800a876:	e7db      	b.n	800a830 <_dtoa_r+0x250>
 800a878:	2301      	movs	r3, #1
 800a87a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a87c:	e7f4      	b.n	800a868 <_dtoa_r+0x288>
 800a87e:	f04f 0b01 	mov.w	fp, #1
 800a882:	f8cd b00c 	str.w	fp, [sp, #12]
 800a886:	465b      	mov	r3, fp
 800a888:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a88c:	e7d0      	b.n	800a830 <_dtoa_r+0x250>
 800a88e:	3101      	adds	r1, #1
 800a890:	0052      	lsls	r2, r2, #1
 800a892:	e7d1      	b.n	800a838 <_dtoa_r+0x258>
 800a894:	f3af 8000 	nop.w
 800a898:	636f4361 	.word	0x636f4361
 800a89c:	3fd287a7 	.word	0x3fd287a7
 800a8a0:	8b60c8b3 	.word	0x8b60c8b3
 800a8a4:	3fc68a28 	.word	0x3fc68a28
 800a8a8:	509f79fb 	.word	0x509f79fb
 800a8ac:	3fd34413 	.word	0x3fd34413
 800a8b0:	0800c2d9 	.word	0x0800c2d9
 800a8b4:	0800c2f0 	.word	0x0800c2f0
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	0800c2a9 	.word	0x0800c2a9
 800a8c0:	3ff80000 	.word	0x3ff80000
 800a8c4:	0800c440 	.word	0x0800c440
 800a8c8:	0800c348 	.word	0x0800c348
 800a8cc:	0800c2d5 	.word	0x0800c2d5
 800a8d0:	0800c2a8 	.word	0x0800c2a8
 800a8d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a8d8:	6018      	str	r0, [r3, #0]
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	2b0e      	cmp	r3, #14
 800a8de:	f200 80a1 	bhi.w	800aa24 <_dtoa_r+0x444>
 800a8e2:	2c00      	cmp	r4, #0
 800a8e4:	f000 809e 	beq.w	800aa24 <_dtoa_r+0x444>
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	dd33      	ble.n	800a954 <_dtoa_r+0x374>
 800a8ec:	4b9c      	ldr	r3, [pc, #624]	@ (800ab60 <_dtoa_r+0x580>)
 800a8ee:	f007 020f 	and.w	r2, r7, #15
 800a8f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8f6:	ed93 7b00 	vldr	d7, [r3]
 800a8fa:	05f8      	lsls	r0, r7, #23
 800a8fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a900:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a904:	d516      	bpl.n	800a934 <_dtoa_r+0x354>
 800a906:	4b97      	ldr	r3, [pc, #604]	@ (800ab64 <_dtoa_r+0x584>)
 800a908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a90c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a910:	f7f5 ff9c 	bl	800084c <__aeabi_ddiv>
 800a914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a918:	f004 040f 	and.w	r4, r4, #15
 800a91c:	2603      	movs	r6, #3
 800a91e:	4d91      	ldr	r5, [pc, #580]	@ (800ab64 <_dtoa_r+0x584>)
 800a920:	b954      	cbnz	r4, 800a938 <_dtoa_r+0x358>
 800a922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a92a:	f7f5 ff8f 	bl	800084c <__aeabi_ddiv>
 800a92e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a932:	e028      	b.n	800a986 <_dtoa_r+0x3a6>
 800a934:	2602      	movs	r6, #2
 800a936:	e7f2      	b.n	800a91e <_dtoa_r+0x33e>
 800a938:	07e1      	lsls	r1, r4, #31
 800a93a:	d508      	bpl.n	800a94e <_dtoa_r+0x36e>
 800a93c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a940:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a944:	f7f5 fe58 	bl	80005f8 <__aeabi_dmul>
 800a948:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a94c:	3601      	adds	r6, #1
 800a94e:	1064      	asrs	r4, r4, #1
 800a950:	3508      	adds	r5, #8
 800a952:	e7e5      	b.n	800a920 <_dtoa_r+0x340>
 800a954:	f000 80af 	beq.w	800aab6 <_dtoa_r+0x4d6>
 800a958:	427c      	negs	r4, r7
 800a95a:	4b81      	ldr	r3, [pc, #516]	@ (800ab60 <_dtoa_r+0x580>)
 800a95c:	4d81      	ldr	r5, [pc, #516]	@ (800ab64 <_dtoa_r+0x584>)
 800a95e:	f004 020f 	and.w	r2, r4, #15
 800a962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a976:	1124      	asrs	r4, r4, #4
 800a978:	2300      	movs	r3, #0
 800a97a:	2602      	movs	r6, #2
 800a97c:	2c00      	cmp	r4, #0
 800a97e:	f040 808f 	bne.w	800aaa0 <_dtoa_r+0x4c0>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1d3      	bne.n	800a92e <_dtoa_r+0x34e>
 800a986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a988:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8094 	beq.w	800aaba <_dtoa_r+0x4da>
 800a992:	4b75      	ldr	r3, [pc, #468]	@ (800ab68 <_dtoa_r+0x588>)
 800a994:	2200      	movs	r2, #0
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 f89f 	bl	8000adc <__aeabi_dcmplt>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f000 808b 	beq.w	800aaba <_dtoa_r+0x4da>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8087 	beq.w	800aaba <_dtoa_r+0x4da>
 800a9ac:	f1bb 0f00 	cmp.w	fp, #0
 800a9b0:	dd34      	ble.n	800aa1c <_dtoa_r+0x43c>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	4b6d      	ldr	r3, [pc, #436]	@ (800ab6c <_dtoa_r+0x58c>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	f7f5 fe1d 	bl	80005f8 <__aeabi_dmul>
 800a9be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9c2:	f107 38ff 	add.w	r8, r7, #4294967295
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	465c      	mov	r4, fp
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7f5 fdaa 	bl	8000524 <__aeabi_i2d>
 800a9d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9d4:	f7f5 fe10 	bl	80005f8 <__aeabi_dmul>
 800a9d8:	4b65      	ldr	r3, [pc, #404]	@ (800ab70 <_dtoa_r+0x590>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f7f5 fc56 	bl	800028c <__adddf3>
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	d16a      	bne.n	800aac0 <_dtoa_r+0x4e0>
 800a9ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ee:	4b61      	ldr	r3, [pc, #388]	@ (800ab74 <_dtoa_r+0x594>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f7f5 fc49 	bl	8000288 <__aeabi_dsub>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4633      	mov	r3, r6
 800aa02:	f7f6 f889 	bl	8000b18 <__aeabi_dcmpgt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 8298 	bne.w	800af3c <_dtoa_r+0x95c>
 800aa0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa10:	462a      	mov	r2, r5
 800aa12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa16:	f7f6 f861 	bl	8000adc <__aeabi_dcmplt>
 800aa1a:	bb38      	cbnz	r0, 800aa6c <_dtoa_r+0x48c>
 800aa1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aa20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f2c0 8157 	blt.w	800acda <_dtoa_r+0x6fa>
 800aa2c:	2f0e      	cmp	r7, #14
 800aa2e:	f300 8154 	bgt.w	800acda <_dtoa_r+0x6fa>
 800aa32:	4b4b      	ldr	r3, [pc, #300]	@ (800ab60 <_dtoa_r+0x580>)
 800aa34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa38:	ed93 7b00 	vldr	d7, [r3]
 800aa3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	ed8d 7b00 	vstr	d7, [sp]
 800aa44:	f280 80e5 	bge.w	800ac12 <_dtoa_r+0x632>
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f300 80e1 	bgt.w	800ac12 <_dtoa_r+0x632>
 800aa50:	d10c      	bne.n	800aa6c <_dtoa_r+0x48c>
 800aa52:	4b48      	ldr	r3, [pc, #288]	@ (800ab74 <_dtoa_r+0x594>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	ec51 0b17 	vmov	r0, r1, d7
 800aa5a:	f7f5 fdcd 	bl	80005f8 <__aeabi_dmul>
 800aa5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa62:	f7f6 f84f 	bl	8000b04 <__aeabi_dcmpge>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f000 8266 	beq.w	800af38 <_dtoa_r+0x958>
 800aa6c:	2400      	movs	r4, #0
 800aa6e:	4625      	mov	r5, r4
 800aa70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa72:	4656      	mov	r6, sl
 800aa74:	ea6f 0803 	mvn.w	r8, r3
 800aa78:	2700      	movs	r7, #0
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4648      	mov	r0, r9
 800aa7e:	f000 fcbf 	bl	800b400 <_Bfree>
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	f000 80bd 	beq.w	800ac02 <_dtoa_r+0x622>
 800aa88:	b12f      	cbz	r7, 800aa96 <_dtoa_r+0x4b6>
 800aa8a:	42af      	cmp	r7, r5
 800aa8c:	d003      	beq.n	800aa96 <_dtoa_r+0x4b6>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4648      	mov	r0, r9
 800aa92:	f000 fcb5 	bl	800b400 <_Bfree>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f000 fcb1 	bl	800b400 <_Bfree>
 800aa9e:	e0b0      	b.n	800ac02 <_dtoa_r+0x622>
 800aaa0:	07e2      	lsls	r2, r4, #31
 800aaa2:	d505      	bpl.n	800aab0 <_dtoa_r+0x4d0>
 800aaa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaa8:	f7f5 fda6 	bl	80005f8 <__aeabi_dmul>
 800aaac:	3601      	adds	r6, #1
 800aaae:	2301      	movs	r3, #1
 800aab0:	1064      	asrs	r4, r4, #1
 800aab2:	3508      	adds	r5, #8
 800aab4:	e762      	b.n	800a97c <_dtoa_r+0x39c>
 800aab6:	2602      	movs	r6, #2
 800aab8:	e765      	b.n	800a986 <_dtoa_r+0x3a6>
 800aaba:	9c03      	ldr	r4, [sp, #12]
 800aabc:	46b8      	mov	r8, r7
 800aabe:	e784      	b.n	800a9ca <_dtoa_r+0x3ea>
 800aac0:	4b27      	ldr	r3, [pc, #156]	@ (800ab60 <_dtoa_r+0x580>)
 800aac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aac8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aacc:	4454      	add	r4, sl
 800aace:	2900      	cmp	r1, #0
 800aad0:	d054      	beq.n	800ab7c <_dtoa_r+0x59c>
 800aad2:	4929      	ldr	r1, [pc, #164]	@ (800ab78 <_dtoa_r+0x598>)
 800aad4:	2000      	movs	r0, #0
 800aad6:	f7f5 feb9 	bl	800084c <__aeabi_ddiv>
 800aada:	4633      	mov	r3, r6
 800aadc:	462a      	mov	r2, r5
 800aade:	f7f5 fbd3 	bl	8000288 <__aeabi_dsub>
 800aae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aae6:	4656      	mov	r6, sl
 800aae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaec:	f7f6 f834 	bl	8000b58 <__aeabi_d2iz>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	f7f5 fd17 	bl	8000524 <__aeabi_i2d>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aafe:	f7f5 fbc3 	bl	8000288 <__aeabi_dsub>
 800ab02:	3530      	adds	r5, #48	@ 0x30
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab0c:	f806 5b01 	strb.w	r5, [r6], #1
 800ab10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab14:	f7f5 ffe2 	bl	8000adc <__aeabi_dcmplt>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d172      	bne.n	800ac02 <_dtoa_r+0x622>
 800ab1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab20:	4911      	ldr	r1, [pc, #68]	@ (800ab68 <_dtoa_r+0x588>)
 800ab22:	2000      	movs	r0, #0
 800ab24:	f7f5 fbb0 	bl	8000288 <__aeabi_dsub>
 800ab28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab2c:	f7f5 ffd6 	bl	8000adc <__aeabi_dcmplt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f040 80b4 	bne.w	800ac9e <_dtoa_r+0x6be>
 800ab36:	42a6      	cmp	r6, r4
 800ab38:	f43f af70 	beq.w	800aa1c <_dtoa_r+0x43c>
 800ab3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <_dtoa_r+0x58c>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	f7f5 fd58 	bl	80005f8 <__aeabi_dmul>
 800ab48:	4b08      	ldr	r3, [pc, #32]	@ (800ab6c <_dtoa_r+0x58c>)
 800ab4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab4e:	2200      	movs	r2, #0
 800ab50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab54:	f7f5 fd50 	bl	80005f8 <__aeabi_dmul>
 800ab58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab5c:	e7c4      	b.n	800aae8 <_dtoa_r+0x508>
 800ab5e:	bf00      	nop
 800ab60:	0800c440 	.word	0x0800c440
 800ab64:	0800c418 	.word	0x0800c418
 800ab68:	3ff00000 	.word	0x3ff00000
 800ab6c:	40240000 	.word	0x40240000
 800ab70:	401c0000 	.word	0x401c0000
 800ab74:	40140000 	.word	0x40140000
 800ab78:	3fe00000 	.word	0x3fe00000
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7f5 fd3a 	bl	80005f8 <__aeabi_dmul>
 800ab84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab88:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ab8a:	4656      	mov	r6, sl
 800ab8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab90:	f7f5 ffe2 	bl	8000b58 <__aeabi_d2iz>
 800ab94:	4605      	mov	r5, r0
 800ab96:	f7f5 fcc5 	bl	8000524 <__aeabi_i2d>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aba2:	f7f5 fb71 	bl	8000288 <__aeabi_dsub>
 800aba6:	3530      	adds	r5, #48	@ 0x30
 800aba8:	f806 5b01 	strb.w	r5, [r6], #1
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	42a6      	cmp	r6, r4
 800abb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	d124      	bne.n	800ac06 <_dtoa_r+0x626>
 800abbc:	4baf      	ldr	r3, [pc, #700]	@ (800ae7c <_dtoa_r+0x89c>)
 800abbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800abc2:	f7f5 fb63 	bl	800028c <__adddf3>
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abce:	f7f5 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d163      	bne.n	800ac9e <_dtoa_r+0x6be>
 800abd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abda:	49a8      	ldr	r1, [pc, #672]	@ (800ae7c <_dtoa_r+0x89c>)
 800abdc:	2000      	movs	r0, #0
 800abde:	f7f5 fb53 	bl	8000288 <__aeabi_dsub>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abea:	f7f5 ff77 	bl	8000adc <__aeabi_dcmplt>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f af14 	beq.w	800aa1c <_dtoa_r+0x43c>
 800abf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800abf6:	1e73      	subs	r3, r6, #1
 800abf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abfe:	2b30      	cmp	r3, #48	@ 0x30
 800ac00:	d0f8      	beq.n	800abf4 <_dtoa_r+0x614>
 800ac02:	4647      	mov	r7, r8
 800ac04:	e03b      	b.n	800ac7e <_dtoa_r+0x69e>
 800ac06:	4b9e      	ldr	r3, [pc, #632]	@ (800ae80 <_dtoa_r+0x8a0>)
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac10:	e7bc      	b.n	800ab8c <_dtoa_r+0x5ac>
 800ac12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ac16:	4656      	mov	r6, sl
 800ac18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 fe14 	bl	800084c <__aeabi_ddiv>
 800ac24:	f7f5 ff98 	bl	8000b58 <__aeabi_d2iz>
 800ac28:	4680      	mov	r8, r0
 800ac2a:	f7f5 fc7b 	bl	8000524 <__aeabi_i2d>
 800ac2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac32:	f7f5 fce1 	bl	80005f8 <__aeabi_dmul>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac42:	f7f5 fb21 	bl	8000288 <__aeabi_dsub>
 800ac46:	f806 4b01 	strb.w	r4, [r6], #1
 800ac4a:	9d03      	ldr	r5, [sp, #12]
 800ac4c:	eba6 040a 	sub.w	r4, r6, sl
 800ac50:	42a5      	cmp	r5, r4
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	d133      	bne.n	800acc0 <_dtoa_r+0x6e0>
 800ac58:	f7f5 fb18 	bl	800028c <__adddf3>
 800ac5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	f7f5 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 800ac68:	b9c0      	cbnz	r0, 800ac9c <_dtoa_r+0x6bc>
 800ac6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac76:	b110      	cbz	r0, 800ac7e <_dtoa_r+0x69e>
 800ac78:	f018 0f01 	tst.w	r8, #1
 800ac7c:	d10e      	bne.n	800ac9c <_dtoa_r+0x6bc>
 800ac7e:	9902      	ldr	r1, [sp, #8]
 800ac80:	4648      	mov	r0, r9
 800ac82:	f000 fbbd 	bl	800b400 <_Bfree>
 800ac86:	2300      	movs	r3, #0
 800ac88:	7033      	strb	r3, [r6, #0]
 800ac8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac8c:	3701      	adds	r7, #1
 800ac8e:	601f      	str	r7, [r3, #0]
 800ac90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 824b 	beq.w	800b12e <_dtoa_r+0xb4e>
 800ac98:	601e      	str	r6, [r3, #0]
 800ac9a:	e248      	b.n	800b12e <_dtoa_r+0xb4e>
 800ac9c:	46b8      	mov	r8, r7
 800ac9e:	4633      	mov	r3, r6
 800aca0:	461e      	mov	r6, r3
 800aca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aca6:	2a39      	cmp	r2, #57	@ 0x39
 800aca8:	d106      	bne.n	800acb8 <_dtoa_r+0x6d8>
 800acaa:	459a      	cmp	sl, r3
 800acac:	d1f8      	bne.n	800aca0 <_dtoa_r+0x6c0>
 800acae:	2230      	movs	r2, #48	@ 0x30
 800acb0:	f108 0801 	add.w	r8, r8, #1
 800acb4:	f88a 2000 	strb.w	r2, [sl]
 800acb8:	781a      	ldrb	r2, [r3, #0]
 800acba:	3201      	adds	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	e7a0      	b.n	800ac02 <_dtoa_r+0x622>
 800acc0:	4b6f      	ldr	r3, [pc, #444]	@ (800ae80 <_dtoa_r+0x8a0>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	f7f5 fc98 	bl	80005f8 <__aeabi_dmul>
 800acc8:	2200      	movs	r2, #0
 800acca:	2300      	movs	r3, #0
 800accc:	4604      	mov	r4, r0
 800acce:	460d      	mov	r5, r1
 800acd0:	f7f5 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d09f      	beq.n	800ac18 <_dtoa_r+0x638>
 800acd8:	e7d1      	b.n	800ac7e <_dtoa_r+0x69e>
 800acda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acdc:	2a00      	cmp	r2, #0
 800acde:	f000 80ea 	beq.w	800aeb6 <_dtoa_r+0x8d6>
 800ace2:	9a07      	ldr	r2, [sp, #28]
 800ace4:	2a01      	cmp	r2, #1
 800ace6:	f300 80cd 	bgt.w	800ae84 <_dtoa_r+0x8a4>
 800acea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800acec:	2a00      	cmp	r2, #0
 800acee:	f000 80c1 	beq.w	800ae74 <_dtoa_r+0x894>
 800acf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800acf6:	9c08      	ldr	r4, [sp, #32]
 800acf8:	9e00      	ldr	r6, [sp, #0]
 800acfa:	9a00      	ldr	r2, [sp, #0]
 800acfc:	441a      	add	r2, r3
 800acfe:	9200      	str	r2, [sp, #0]
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	2101      	movs	r1, #1
 800ad04:	441a      	add	r2, r3
 800ad06:	4648      	mov	r0, r9
 800ad08:	9206      	str	r2, [sp, #24]
 800ad0a:	f000 fc2d 	bl	800b568 <__i2b>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	b166      	cbz	r6, 800ad2c <_dtoa_r+0x74c>
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	dd09      	ble.n	800ad2c <_dtoa_r+0x74c>
 800ad18:	42b3      	cmp	r3, r6
 800ad1a:	9a00      	ldr	r2, [sp, #0]
 800ad1c:	bfa8      	it	ge
 800ad1e:	4633      	movge	r3, r6
 800ad20:	1ad2      	subs	r2, r2, r3
 800ad22:	9200      	str	r2, [sp, #0]
 800ad24:	9a06      	ldr	r2, [sp, #24]
 800ad26:	1af6      	subs	r6, r6, r3
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	9306      	str	r3, [sp, #24]
 800ad2c:	9b08      	ldr	r3, [sp, #32]
 800ad2e:	b30b      	cbz	r3, 800ad74 <_dtoa_r+0x794>
 800ad30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 80c6 	beq.w	800aec4 <_dtoa_r+0x8e4>
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	f000 80c0 	beq.w	800aebe <_dtoa_r+0x8de>
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4622      	mov	r2, r4
 800ad42:	4648      	mov	r0, r9
 800ad44:	f000 fcc8 	bl	800b6d8 <__pow5mult>
 800ad48:	9a02      	ldr	r2, [sp, #8]
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	4648      	mov	r0, r9
 800ad50:	f000 fc20 	bl	800b594 <__multiply>
 800ad54:	9902      	ldr	r1, [sp, #8]
 800ad56:	4680      	mov	r8, r0
 800ad58:	4648      	mov	r0, r9
 800ad5a:	f000 fb51 	bl	800b400 <_Bfree>
 800ad5e:	9b08      	ldr	r3, [sp, #32]
 800ad60:	1b1b      	subs	r3, r3, r4
 800ad62:	9308      	str	r3, [sp, #32]
 800ad64:	f000 80b1 	beq.w	800aeca <_dtoa_r+0x8ea>
 800ad68:	9a08      	ldr	r2, [sp, #32]
 800ad6a:	4641      	mov	r1, r8
 800ad6c:	4648      	mov	r0, r9
 800ad6e:	f000 fcb3 	bl	800b6d8 <__pow5mult>
 800ad72:	9002      	str	r0, [sp, #8]
 800ad74:	2101      	movs	r1, #1
 800ad76:	4648      	mov	r0, r9
 800ad78:	f000 fbf6 	bl	800b568 <__i2b>
 800ad7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad7e:	4604      	mov	r4, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 81d8 	beq.w	800b136 <_dtoa_r+0xb56>
 800ad86:	461a      	mov	r2, r3
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4648      	mov	r0, r9
 800ad8c:	f000 fca4 	bl	800b6d8 <__pow5mult>
 800ad90:	9b07      	ldr	r3, [sp, #28]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	4604      	mov	r4, r0
 800ad96:	f300 809f 	bgt.w	800aed8 <_dtoa_r+0x8f8>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8097 	bne.w	800aed0 <_dtoa_r+0x8f0>
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f040 8093 	bne.w	800aed4 <_dtoa_r+0x8f4>
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adb4:	0d1b      	lsrs	r3, r3, #20
 800adb6:	051b      	lsls	r3, r3, #20
 800adb8:	b133      	cbz	r3, 800adc8 <_dtoa_r+0x7e8>
 800adba:	9b00      	ldr	r3, [sp, #0]
 800adbc:	3301      	adds	r3, #1
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	3301      	adds	r3, #1
 800adc4:	9306      	str	r3, [sp, #24]
 800adc6:	2301      	movs	r3, #1
 800adc8:	9308      	str	r3, [sp, #32]
 800adca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 81b8 	beq.w	800b142 <_dtoa_r+0xb62>
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800add8:	6918      	ldr	r0, [r3, #16]
 800adda:	f000 fb79 	bl	800b4d0 <__hi0bits>
 800adde:	f1c0 0020 	rsb	r0, r0, #32
 800ade2:	9b06      	ldr	r3, [sp, #24]
 800ade4:	4418      	add	r0, r3
 800ade6:	f010 001f 	ands.w	r0, r0, #31
 800adea:	f000 8082 	beq.w	800aef2 <_dtoa_r+0x912>
 800adee:	f1c0 0320 	rsb	r3, r0, #32
 800adf2:	2b04      	cmp	r3, #4
 800adf4:	dd73      	ble.n	800aede <_dtoa_r+0x8fe>
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	f1c0 001c 	rsb	r0, r0, #28
 800adfc:	4403      	add	r3, r0
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	9b06      	ldr	r3, [sp, #24]
 800ae02:	4403      	add	r3, r0
 800ae04:	4406      	add	r6, r0
 800ae06:	9306      	str	r3, [sp, #24]
 800ae08:	9b00      	ldr	r3, [sp, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dd05      	ble.n	800ae1a <_dtoa_r+0x83a>
 800ae0e:	9902      	ldr	r1, [sp, #8]
 800ae10:	461a      	mov	r2, r3
 800ae12:	4648      	mov	r0, r9
 800ae14:	f000 fcba 	bl	800b78c <__lshift>
 800ae18:	9002      	str	r0, [sp, #8]
 800ae1a:	9b06      	ldr	r3, [sp, #24]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dd05      	ble.n	800ae2c <_dtoa_r+0x84c>
 800ae20:	4621      	mov	r1, r4
 800ae22:	461a      	mov	r2, r3
 800ae24:	4648      	mov	r0, r9
 800ae26:	f000 fcb1 	bl	800b78c <__lshift>
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d061      	beq.n	800aef6 <_dtoa_r+0x916>
 800ae32:	9802      	ldr	r0, [sp, #8]
 800ae34:	4621      	mov	r1, r4
 800ae36:	f000 fd15 	bl	800b864 <__mcmp>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	da5b      	bge.n	800aef6 <_dtoa_r+0x916>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9902      	ldr	r1, [sp, #8]
 800ae42:	220a      	movs	r2, #10
 800ae44:	4648      	mov	r0, r9
 800ae46:	f000 fafd 	bl	800b444 <__multadd>
 800ae4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae4c:	9002      	str	r0, [sp, #8]
 800ae4e:	f107 38ff 	add.w	r8, r7, #4294967295
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 8177 	beq.w	800b146 <_dtoa_r+0xb66>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	4648      	mov	r0, r9
 800ae60:	f000 faf0 	bl	800b444 <__multadd>
 800ae64:	f1bb 0f00 	cmp.w	fp, #0
 800ae68:	4605      	mov	r5, r0
 800ae6a:	dc6f      	bgt.n	800af4c <_dtoa_r+0x96c>
 800ae6c:	9b07      	ldr	r3, [sp, #28]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	dc49      	bgt.n	800af06 <_dtoa_r+0x926>
 800ae72:	e06b      	b.n	800af4c <_dtoa_r+0x96c>
 800ae74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae7a:	e73c      	b.n	800acf6 <_dtoa_r+0x716>
 800ae7c:	3fe00000 	.word	0x3fe00000
 800ae80:	40240000 	.word	0x40240000
 800ae84:	9b03      	ldr	r3, [sp, #12]
 800ae86:	1e5c      	subs	r4, r3, #1
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	db09      	blt.n	800aea2 <_dtoa_r+0x8c2>
 800ae8e:	1b1c      	subs	r4, r3, r4
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f6bf af30 	bge.w	800acf8 <_dtoa_r+0x718>
 800ae98:	9b00      	ldr	r3, [sp, #0]
 800ae9a:	9a03      	ldr	r2, [sp, #12]
 800ae9c:	1a9e      	subs	r6, r3, r2
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e72b      	b.n	800acfa <_dtoa_r+0x71a>
 800aea2:	9b08      	ldr	r3, [sp, #32]
 800aea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aea6:	9408      	str	r4, [sp, #32]
 800aea8:	1ae3      	subs	r3, r4, r3
 800aeaa:	441a      	add	r2, r3
 800aeac:	9e00      	ldr	r6, [sp, #0]
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	920d      	str	r2, [sp, #52]	@ 0x34
 800aeb2:	2400      	movs	r4, #0
 800aeb4:	e721      	b.n	800acfa <_dtoa_r+0x71a>
 800aeb6:	9c08      	ldr	r4, [sp, #32]
 800aeb8:	9e00      	ldr	r6, [sp, #0]
 800aeba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800aebc:	e728      	b.n	800ad10 <_dtoa_r+0x730>
 800aebe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800aec2:	e751      	b.n	800ad68 <_dtoa_r+0x788>
 800aec4:	9a08      	ldr	r2, [sp, #32]
 800aec6:	9902      	ldr	r1, [sp, #8]
 800aec8:	e750      	b.n	800ad6c <_dtoa_r+0x78c>
 800aeca:	f8cd 8008 	str.w	r8, [sp, #8]
 800aece:	e751      	b.n	800ad74 <_dtoa_r+0x794>
 800aed0:	2300      	movs	r3, #0
 800aed2:	e779      	b.n	800adc8 <_dtoa_r+0x7e8>
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	e777      	b.n	800adc8 <_dtoa_r+0x7e8>
 800aed8:	2300      	movs	r3, #0
 800aeda:	9308      	str	r3, [sp, #32]
 800aedc:	e779      	b.n	800add2 <_dtoa_r+0x7f2>
 800aede:	d093      	beq.n	800ae08 <_dtoa_r+0x828>
 800aee0:	9a00      	ldr	r2, [sp, #0]
 800aee2:	331c      	adds	r3, #28
 800aee4:	441a      	add	r2, r3
 800aee6:	9200      	str	r2, [sp, #0]
 800aee8:	9a06      	ldr	r2, [sp, #24]
 800aeea:	441a      	add	r2, r3
 800aeec:	441e      	add	r6, r3
 800aeee:	9206      	str	r2, [sp, #24]
 800aef0:	e78a      	b.n	800ae08 <_dtoa_r+0x828>
 800aef2:	4603      	mov	r3, r0
 800aef4:	e7f4      	b.n	800aee0 <_dtoa_r+0x900>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	46b8      	mov	r8, r7
 800aefc:	dc20      	bgt.n	800af40 <_dtoa_r+0x960>
 800aefe:	469b      	mov	fp, r3
 800af00:	9b07      	ldr	r3, [sp, #28]
 800af02:	2b02      	cmp	r3, #2
 800af04:	dd1e      	ble.n	800af44 <_dtoa_r+0x964>
 800af06:	f1bb 0f00 	cmp.w	fp, #0
 800af0a:	f47f adb1 	bne.w	800aa70 <_dtoa_r+0x490>
 800af0e:	4621      	mov	r1, r4
 800af10:	465b      	mov	r3, fp
 800af12:	2205      	movs	r2, #5
 800af14:	4648      	mov	r0, r9
 800af16:	f000 fa95 	bl	800b444 <__multadd>
 800af1a:	4601      	mov	r1, r0
 800af1c:	4604      	mov	r4, r0
 800af1e:	9802      	ldr	r0, [sp, #8]
 800af20:	f000 fca0 	bl	800b864 <__mcmp>
 800af24:	2800      	cmp	r0, #0
 800af26:	f77f ada3 	ble.w	800aa70 <_dtoa_r+0x490>
 800af2a:	4656      	mov	r6, sl
 800af2c:	2331      	movs	r3, #49	@ 0x31
 800af2e:	f806 3b01 	strb.w	r3, [r6], #1
 800af32:	f108 0801 	add.w	r8, r8, #1
 800af36:	e59f      	b.n	800aa78 <_dtoa_r+0x498>
 800af38:	9c03      	ldr	r4, [sp, #12]
 800af3a:	46b8      	mov	r8, r7
 800af3c:	4625      	mov	r5, r4
 800af3e:	e7f4      	b.n	800af2a <_dtoa_r+0x94a>
 800af40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 8101 	beq.w	800b14e <_dtoa_r+0xb6e>
 800af4c:	2e00      	cmp	r6, #0
 800af4e:	dd05      	ble.n	800af5c <_dtoa_r+0x97c>
 800af50:	4629      	mov	r1, r5
 800af52:	4632      	mov	r2, r6
 800af54:	4648      	mov	r0, r9
 800af56:	f000 fc19 	bl	800b78c <__lshift>
 800af5a:	4605      	mov	r5, r0
 800af5c:	9b08      	ldr	r3, [sp, #32]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d05c      	beq.n	800b01c <_dtoa_r+0xa3c>
 800af62:	6869      	ldr	r1, [r5, #4]
 800af64:	4648      	mov	r0, r9
 800af66:	f000 fa0b 	bl	800b380 <_Balloc>
 800af6a:	4606      	mov	r6, r0
 800af6c:	b928      	cbnz	r0, 800af7a <_dtoa_r+0x99a>
 800af6e:	4b82      	ldr	r3, [pc, #520]	@ (800b178 <_dtoa_r+0xb98>)
 800af70:	4602      	mov	r2, r0
 800af72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af76:	f7ff bb4a 	b.w	800a60e <_dtoa_r+0x2e>
 800af7a:	692a      	ldr	r2, [r5, #16]
 800af7c:	3202      	adds	r2, #2
 800af7e:	0092      	lsls	r2, r2, #2
 800af80:	f105 010c 	add.w	r1, r5, #12
 800af84:	300c      	adds	r0, #12
 800af86:	f001 f807 	bl	800bf98 <memcpy>
 800af8a:	2201      	movs	r2, #1
 800af8c:	4631      	mov	r1, r6
 800af8e:	4648      	mov	r0, r9
 800af90:	f000 fbfc 	bl	800b78c <__lshift>
 800af94:	f10a 0301 	add.w	r3, sl, #1
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	eb0a 030b 	add.w	r3, sl, fp
 800af9e:	9308      	str	r3, [sp, #32]
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	462f      	mov	r7, r5
 800afa8:	9306      	str	r3, [sp, #24]
 800afaa:	4605      	mov	r5, r0
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	9802      	ldr	r0, [sp, #8]
 800afb0:	4621      	mov	r1, r4
 800afb2:	f103 3bff 	add.w	fp, r3, #4294967295
 800afb6:	f7ff fa8a 	bl	800a4ce <quorem>
 800afba:	4603      	mov	r3, r0
 800afbc:	3330      	adds	r3, #48	@ 0x30
 800afbe:	9003      	str	r0, [sp, #12]
 800afc0:	4639      	mov	r1, r7
 800afc2:	9802      	ldr	r0, [sp, #8]
 800afc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc6:	f000 fc4d 	bl	800b864 <__mcmp>
 800afca:	462a      	mov	r2, r5
 800afcc:	9004      	str	r0, [sp, #16]
 800afce:	4621      	mov	r1, r4
 800afd0:	4648      	mov	r0, r9
 800afd2:	f000 fc63 	bl	800b89c <__mdiff>
 800afd6:	68c2      	ldr	r2, [r0, #12]
 800afd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afda:	4606      	mov	r6, r0
 800afdc:	bb02      	cbnz	r2, 800b020 <_dtoa_r+0xa40>
 800afde:	4601      	mov	r1, r0
 800afe0:	9802      	ldr	r0, [sp, #8]
 800afe2:	f000 fc3f 	bl	800b864 <__mcmp>
 800afe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe8:	4602      	mov	r2, r0
 800afea:	4631      	mov	r1, r6
 800afec:	4648      	mov	r0, r9
 800afee:	920c      	str	r2, [sp, #48]	@ 0x30
 800aff0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff2:	f000 fa05 	bl	800b400 <_Bfree>
 800aff6:	9b07      	ldr	r3, [sp, #28]
 800aff8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800affa:	9e00      	ldr	r6, [sp, #0]
 800affc:	ea42 0103 	orr.w	r1, r2, r3
 800b000:	9b06      	ldr	r3, [sp, #24]
 800b002:	4319      	orrs	r1, r3
 800b004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b006:	d10d      	bne.n	800b024 <_dtoa_r+0xa44>
 800b008:	2b39      	cmp	r3, #57	@ 0x39
 800b00a:	d027      	beq.n	800b05c <_dtoa_r+0xa7c>
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	2a00      	cmp	r2, #0
 800b010:	dd01      	ble.n	800b016 <_dtoa_r+0xa36>
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	3331      	adds	r3, #49	@ 0x31
 800b016:	f88b 3000 	strb.w	r3, [fp]
 800b01a:	e52e      	b.n	800aa7a <_dtoa_r+0x49a>
 800b01c:	4628      	mov	r0, r5
 800b01e:	e7b9      	b.n	800af94 <_dtoa_r+0x9b4>
 800b020:	2201      	movs	r2, #1
 800b022:	e7e2      	b.n	800afea <_dtoa_r+0xa0a>
 800b024:	9904      	ldr	r1, [sp, #16]
 800b026:	2900      	cmp	r1, #0
 800b028:	db04      	blt.n	800b034 <_dtoa_r+0xa54>
 800b02a:	9807      	ldr	r0, [sp, #28]
 800b02c:	4301      	orrs	r1, r0
 800b02e:	9806      	ldr	r0, [sp, #24]
 800b030:	4301      	orrs	r1, r0
 800b032:	d120      	bne.n	800b076 <_dtoa_r+0xa96>
 800b034:	2a00      	cmp	r2, #0
 800b036:	ddee      	ble.n	800b016 <_dtoa_r+0xa36>
 800b038:	9902      	ldr	r1, [sp, #8]
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	2201      	movs	r2, #1
 800b03e:	4648      	mov	r0, r9
 800b040:	f000 fba4 	bl	800b78c <__lshift>
 800b044:	4621      	mov	r1, r4
 800b046:	9002      	str	r0, [sp, #8]
 800b048:	f000 fc0c 	bl	800b864 <__mcmp>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	dc02      	bgt.n	800b058 <_dtoa_r+0xa78>
 800b052:	d1e0      	bne.n	800b016 <_dtoa_r+0xa36>
 800b054:	07da      	lsls	r2, r3, #31
 800b056:	d5de      	bpl.n	800b016 <_dtoa_r+0xa36>
 800b058:	2b39      	cmp	r3, #57	@ 0x39
 800b05a:	d1da      	bne.n	800b012 <_dtoa_r+0xa32>
 800b05c:	2339      	movs	r3, #57	@ 0x39
 800b05e:	f88b 3000 	strb.w	r3, [fp]
 800b062:	4633      	mov	r3, r6
 800b064:	461e      	mov	r6, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b06c:	2a39      	cmp	r2, #57	@ 0x39
 800b06e:	d04e      	beq.n	800b10e <_dtoa_r+0xb2e>
 800b070:	3201      	adds	r2, #1
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	e501      	b.n	800aa7a <_dtoa_r+0x49a>
 800b076:	2a00      	cmp	r2, #0
 800b078:	dd03      	ble.n	800b082 <_dtoa_r+0xaa2>
 800b07a:	2b39      	cmp	r3, #57	@ 0x39
 800b07c:	d0ee      	beq.n	800b05c <_dtoa_r+0xa7c>
 800b07e:	3301      	adds	r3, #1
 800b080:	e7c9      	b.n	800b016 <_dtoa_r+0xa36>
 800b082:	9a00      	ldr	r2, [sp, #0]
 800b084:	9908      	ldr	r1, [sp, #32]
 800b086:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b08a:	428a      	cmp	r2, r1
 800b08c:	d028      	beq.n	800b0e0 <_dtoa_r+0xb00>
 800b08e:	9902      	ldr	r1, [sp, #8]
 800b090:	2300      	movs	r3, #0
 800b092:	220a      	movs	r2, #10
 800b094:	4648      	mov	r0, r9
 800b096:	f000 f9d5 	bl	800b444 <__multadd>
 800b09a:	42af      	cmp	r7, r5
 800b09c:	9002      	str	r0, [sp, #8]
 800b09e:	f04f 0300 	mov.w	r3, #0
 800b0a2:	f04f 020a 	mov.w	r2, #10
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	4648      	mov	r0, r9
 800b0aa:	d107      	bne.n	800b0bc <_dtoa_r+0xadc>
 800b0ac:	f000 f9ca 	bl	800b444 <__multadd>
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	9b00      	ldr	r3, [sp, #0]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	e777      	b.n	800afac <_dtoa_r+0x9cc>
 800b0bc:	f000 f9c2 	bl	800b444 <__multadd>
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	220a      	movs	r2, #10
 800b0c8:	4648      	mov	r0, r9
 800b0ca:	f000 f9bb 	bl	800b444 <__multadd>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	e7f0      	b.n	800b0b4 <_dtoa_r+0xad4>
 800b0d2:	f1bb 0f00 	cmp.w	fp, #0
 800b0d6:	bfcc      	ite	gt
 800b0d8:	465e      	movgt	r6, fp
 800b0da:	2601      	movle	r6, #1
 800b0dc:	4456      	add	r6, sl
 800b0de:	2700      	movs	r7, #0
 800b0e0:	9902      	ldr	r1, [sp, #8]
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	4648      	mov	r0, r9
 800b0e8:	f000 fb50 	bl	800b78c <__lshift>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	9002      	str	r0, [sp, #8]
 800b0f0:	f000 fbb8 	bl	800b864 <__mcmp>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	dcb4      	bgt.n	800b062 <_dtoa_r+0xa82>
 800b0f8:	d102      	bne.n	800b100 <_dtoa_r+0xb20>
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	07db      	lsls	r3, r3, #31
 800b0fe:	d4b0      	bmi.n	800b062 <_dtoa_r+0xa82>
 800b100:	4633      	mov	r3, r6
 800b102:	461e      	mov	r6, r3
 800b104:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b108:	2a30      	cmp	r2, #48	@ 0x30
 800b10a:	d0fa      	beq.n	800b102 <_dtoa_r+0xb22>
 800b10c:	e4b5      	b.n	800aa7a <_dtoa_r+0x49a>
 800b10e:	459a      	cmp	sl, r3
 800b110:	d1a8      	bne.n	800b064 <_dtoa_r+0xa84>
 800b112:	2331      	movs	r3, #49	@ 0x31
 800b114:	f108 0801 	add.w	r8, r8, #1
 800b118:	f88a 3000 	strb.w	r3, [sl]
 800b11c:	e4ad      	b.n	800aa7a <_dtoa_r+0x49a>
 800b11e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b120:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b17c <_dtoa_r+0xb9c>
 800b124:	b11b      	cbz	r3, 800b12e <_dtoa_r+0xb4e>
 800b126:	f10a 0308 	add.w	r3, sl, #8
 800b12a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	4650      	mov	r0, sl
 800b130:	b017      	add	sp, #92	@ 0x5c
 800b132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b136:	9b07      	ldr	r3, [sp, #28]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	f77f ae2e 	ble.w	800ad9a <_dtoa_r+0x7ba>
 800b13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b140:	9308      	str	r3, [sp, #32]
 800b142:	2001      	movs	r0, #1
 800b144:	e64d      	b.n	800ade2 <_dtoa_r+0x802>
 800b146:	f1bb 0f00 	cmp.w	fp, #0
 800b14a:	f77f aed9 	ble.w	800af00 <_dtoa_r+0x920>
 800b14e:	4656      	mov	r6, sl
 800b150:	9802      	ldr	r0, [sp, #8]
 800b152:	4621      	mov	r1, r4
 800b154:	f7ff f9bb 	bl	800a4ce <quorem>
 800b158:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b15c:	f806 3b01 	strb.w	r3, [r6], #1
 800b160:	eba6 020a 	sub.w	r2, r6, sl
 800b164:	4593      	cmp	fp, r2
 800b166:	ddb4      	ble.n	800b0d2 <_dtoa_r+0xaf2>
 800b168:	9902      	ldr	r1, [sp, #8]
 800b16a:	2300      	movs	r3, #0
 800b16c:	220a      	movs	r2, #10
 800b16e:	4648      	mov	r0, r9
 800b170:	f000 f968 	bl	800b444 <__multadd>
 800b174:	9002      	str	r0, [sp, #8]
 800b176:	e7eb      	b.n	800b150 <_dtoa_r+0xb70>
 800b178:	0800c348 	.word	0x0800c348
 800b17c:	0800c2cc 	.word	0x0800c2cc

0800b180 <_free_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4605      	mov	r5, r0
 800b184:	2900      	cmp	r1, #0
 800b186:	d041      	beq.n	800b20c <_free_r+0x8c>
 800b188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b18c:	1f0c      	subs	r4, r1, #4
 800b18e:	2b00      	cmp	r3, #0
 800b190:	bfb8      	it	lt
 800b192:	18e4      	addlt	r4, r4, r3
 800b194:	f000 f8e8 	bl	800b368 <__malloc_lock>
 800b198:	4a1d      	ldr	r2, [pc, #116]	@ (800b210 <_free_r+0x90>)
 800b19a:	6813      	ldr	r3, [r2, #0]
 800b19c:	b933      	cbnz	r3, 800b1ac <_free_r+0x2c>
 800b19e:	6063      	str	r3, [r4, #4]
 800b1a0:	6014      	str	r4, [r2, #0]
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a8:	f000 b8e4 	b.w	800b374 <__malloc_unlock>
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	d908      	bls.n	800b1c2 <_free_r+0x42>
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	1821      	adds	r1, r4, r0
 800b1b4:	428b      	cmp	r3, r1
 800b1b6:	bf01      	itttt	eq
 800b1b8:	6819      	ldreq	r1, [r3, #0]
 800b1ba:	685b      	ldreq	r3, [r3, #4]
 800b1bc:	1809      	addeq	r1, r1, r0
 800b1be:	6021      	streq	r1, [r4, #0]
 800b1c0:	e7ed      	b.n	800b19e <_free_r+0x1e>
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	b10b      	cbz	r3, 800b1cc <_free_r+0x4c>
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d9fa      	bls.n	800b1c2 <_free_r+0x42>
 800b1cc:	6811      	ldr	r1, [r2, #0]
 800b1ce:	1850      	adds	r0, r2, r1
 800b1d0:	42a0      	cmp	r0, r4
 800b1d2:	d10b      	bne.n	800b1ec <_free_r+0x6c>
 800b1d4:	6820      	ldr	r0, [r4, #0]
 800b1d6:	4401      	add	r1, r0
 800b1d8:	1850      	adds	r0, r2, r1
 800b1da:	4283      	cmp	r3, r0
 800b1dc:	6011      	str	r1, [r2, #0]
 800b1de:	d1e0      	bne.n	800b1a2 <_free_r+0x22>
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	6053      	str	r3, [r2, #4]
 800b1e6:	4408      	add	r0, r1
 800b1e8:	6010      	str	r0, [r2, #0]
 800b1ea:	e7da      	b.n	800b1a2 <_free_r+0x22>
 800b1ec:	d902      	bls.n	800b1f4 <_free_r+0x74>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	602b      	str	r3, [r5, #0]
 800b1f2:	e7d6      	b.n	800b1a2 <_free_r+0x22>
 800b1f4:	6820      	ldr	r0, [r4, #0]
 800b1f6:	1821      	adds	r1, r4, r0
 800b1f8:	428b      	cmp	r3, r1
 800b1fa:	bf04      	itt	eq
 800b1fc:	6819      	ldreq	r1, [r3, #0]
 800b1fe:	685b      	ldreq	r3, [r3, #4]
 800b200:	6063      	str	r3, [r4, #4]
 800b202:	bf04      	itt	eq
 800b204:	1809      	addeq	r1, r1, r0
 800b206:	6021      	streq	r1, [r4, #0]
 800b208:	6054      	str	r4, [r2, #4]
 800b20a:	e7ca      	b.n	800b1a2 <_free_r+0x22>
 800b20c:	bd38      	pop	{r3, r4, r5, pc}
 800b20e:	bf00      	nop
 800b210:	200021ac 	.word	0x200021ac

0800b214 <malloc>:
 800b214:	4b02      	ldr	r3, [pc, #8]	@ (800b220 <malloc+0xc>)
 800b216:	4601      	mov	r1, r0
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	f000 b825 	b.w	800b268 <_malloc_r>
 800b21e:	bf00      	nop
 800b220:	20000108 	.word	0x20000108

0800b224 <sbrk_aligned>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4e0f      	ldr	r6, [pc, #60]	@ (800b264 <sbrk_aligned+0x40>)
 800b228:	460c      	mov	r4, r1
 800b22a:	6831      	ldr	r1, [r6, #0]
 800b22c:	4605      	mov	r5, r0
 800b22e:	b911      	cbnz	r1, 800b236 <sbrk_aligned+0x12>
 800b230:	f000 fea2 	bl	800bf78 <_sbrk_r>
 800b234:	6030      	str	r0, [r6, #0]
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 fe9d 	bl	800bf78 <_sbrk_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	d103      	bne.n	800b24a <sbrk_aligned+0x26>
 800b242:	f04f 34ff 	mov.w	r4, #4294967295
 800b246:	4620      	mov	r0, r4
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	1cc4      	adds	r4, r0, #3
 800b24c:	f024 0403 	bic.w	r4, r4, #3
 800b250:	42a0      	cmp	r0, r4
 800b252:	d0f8      	beq.n	800b246 <sbrk_aligned+0x22>
 800b254:	1a21      	subs	r1, r4, r0
 800b256:	4628      	mov	r0, r5
 800b258:	f000 fe8e 	bl	800bf78 <_sbrk_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	d1f2      	bne.n	800b246 <sbrk_aligned+0x22>
 800b260:	e7ef      	b.n	800b242 <sbrk_aligned+0x1e>
 800b262:	bf00      	nop
 800b264:	200021a8 	.word	0x200021a8

0800b268 <_malloc_r>:
 800b268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b26c:	1ccd      	adds	r5, r1, #3
 800b26e:	f025 0503 	bic.w	r5, r5, #3
 800b272:	3508      	adds	r5, #8
 800b274:	2d0c      	cmp	r5, #12
 800b276:	bf38      	it	cc
 800b278:	250c      	movcc	r5, #12
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	4606      	mov	r6, r0
 800b27e:	db01      	blt.n	800b284 <_malloc_r+0x1c>
 800b280:	42a9      	cmp	r1, r5
 800b282:	d904      	bls.n	800b28e <_malloc_r+0x26>
 800b284:	230c      	movs	r3, #12
 800b286:	6033      	str	r3, [r6, #0]
 800b288:	2000      	movs	r0, #0
 800b28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b364 <_malloc_r+0xfc>
 800b292:	f000 f869 	bl	800b368 <__malloc_lock>
 800b296:	f8d8 3000 	ldr.w	r3, [r8]
 800b29a:	461c      	mov	r4, r3
 800b29c:	bb44      	cbnz	r4, 800b2f0 <_malloc_r+0x88>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ffbf 	bl	800b224 <sbrk_aligned>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	d158      	bne.n	800b35e <_malloc_r+0xf6>
 800b2ac:	f8d8 4000 	ldr.w	r4, [r8]
 800b2b0:	4627      	mov	r7, r4
 800b2b2:	2f00      	cmp	r7, #0
 800b2b4:	d143      	bne.n	800b33e <_malloc_r+0xd6>
 800b2b6:	2c00      	cmp	r4, #0
 800b2b8:	d04b      	beq.n	800b352 <_malloc_r+0xea>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	4639      	mov	r1, r7
 800b2be:	4630      	mov	r0, r6
 800b2c0:	eb04 0903 	add.w	r9, r4, r3
 800b2c4:	f000 fe58 	bl	800bf78 <_sbrk_r>
 800b2c8:	4581      	cmp	r9, r0
 800b2ca:	d142      	bne.n	800b352 <_malloc_r+0xea>
 800b2cc:	6821      	ldr	r1, [r4, #0]
 800b2ce:	1a6d      	subs	r5, r5, r1
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7ff ffa6 	bl	800b224 <sbrk_aligned>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d03a      	beq.n	800b352 <_malloc_r+0xea>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	442b      	add	r3, r5
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	bb62      	cbnz	r2, 800b344 <_malloc_r+0xdc>
 800b2ea:	f8c8 7000 	str.w	r7, [r8]
 800b2ee:	e00f      	b.n	800b310 <_malloc_r+0xa8>
 800b2f0:	6822      	ldr	r2, [r4, #0]
 800b2f2:	1b52      	subs	r2, r2, r5
 800b2f4:	d420      	bmi.n	800b338 <_malloc_r+0xd0>
 800b2f6:	2a0b      	cmp	r2, #11
 800b2f8:	d917      	bls.n	800b32a <_malloc_r+0xc2>
 800b2fa:	1961      	adds	r1, r4, r5
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	6025      	str	r5, [r4, #0]
 800b300:	bf18      	it	ne
 800b302:	6059      	strne	r1, [r3, #4]
 800b304:	6863      	ldr	r3, [r4, #4]
 800b306:	bf08      	it	eq
 800b308:	f8c8 1000 	streq.w	r1, [r8]
 800b30c:	5162      	str	r2, [r4, r5]
 800b30e:	604b      	str	r3, [r1, #4]
 800b310:	4630      	mov	r0, r6
 800b312:	f000 f82f 	bl	800b374 <__malloc_unlock>
 800b316:	f104 000b 	add.w	r0, r4, #11
 800b31a:	1d23      	adds	r3, r4, #4
 800b31c:	f020 0007 	bic.w	r0, r0, #7
 800b320:	1ac2      	subs	r2, r0, r3
 800b322:	bf1c      	itt	ne
 800b324:	1a1b      	subne	r3, r3, r0
 800b326:	50a3      	strne	r3, [r4, r2]
 800b328:	e7af      	b.n	800b28a <_malloc_r+0x22>
 800b32a:	6862      	ldr	r2, [r4, #4]
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	bf0c      	ite	eq
 800b330:	f8c8 2000 	streq.w	r2, [r8]
 800b334:	605a      	strne	r2, [r3, #4]
 800b336:	e7eb      	b.n	800b310 <_malloc_r+0xa8>
 800b338:	4623      	mov	r3, r4
 800b33a:	6864      	ldr	r4, [r4, #4]
 800b33c:	e7ae      	b.n	800b29c <_malloc_r+0x34>
 800b33e:	463c      	mov	r4, r7
 800b340:	687f      	ldr	r7, [r7, #4]
 800b342:	e7b6      	b.n	800b2b2 <_malloc_r+0x4a>
 800b344:	461a      	mov	r2, r3
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	42a3      	cmp	r3, r4
 800b34a:	d1fb      	bne.n	800b344 <_malloc_r+0xdc>
 800b34c:	2300      	movs	r3, #0
 800b34e:	6053      	str	r3, [r2, #4]
 800b350:	e7de      	b.n	800b310 <_malloc_r+0xa8>
 800b352:	230c      	movs	r3, #12
 800b354:	6033      	str	r3, [r6, #0]
 800b356:	4630      	mov	r0, r6
 800b358:	f000 f80c 	bl	800b374 <__malloc_unlock>
 800b35c:	e794      	b.n	800b288 <_malloc_r+0x20>
 800b35e:	6005      	str	r5, [r0, #0]
 800b360:	e7d6      	b.n	800b310 <_malloc_r+0xa8>
 800b362:	bf00      	nop
 800b364:	200021ac 	.word	0x200021ac

0800b368 <__malloc_lock>:
 800b368:	4801      	ldr	r0, [pc, #4]	@ (800b370 <__malloc_lock+0x8>)
 800b36a:	f7ff b8ae 	b.w	800a4ca <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200021a4 	.word	0x200021a4

0800b374 <__malloc_unlock>:
 800b374:	4801      	ldr	r0, [pc, #4]	@ (800b37c <__malloc_unlock+0x8>)
 800b376:	f7ff b8a9 	b.w	800a4cc <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200021a4 	.word	0x200021a4

0800b380 <_Balloc>:
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	69c6      	ldr	r6, [r0, #28]
 800b384:	4604      	mov	r4, r0
 800b386:	460d      	mov	r5, r1
 800b388:	b976      	cbnz	r6, 800b3a8 <_Balloc+0x28>
 800b38a:	2010      	movs	r0, #16
 800b38c:	f7ff ff42 	bl	800b214 <malloc>
 800b390:	4602      	mov	r2, r0
 800b392:	61e0      	str	r0, [r4, #28]
 800b394:	b920      	cbnz	r0, 800b3a0 <_Balloc+0x20>
 800b396:	4b18      	ldr	r3, [pc, #96]	@ (800b3f8 <_Balloc+0x78>)
 800b398:	4818      	ldr	r0, [pc, #96]	@ (800b3fc <_Balloc+0x7c>)
 800b39a:	216b      	movs	r1, #107	@ 0x6b
 800b39c:	f000 fe0a 	bl	800bfb4 <__assert_func>
 800b3a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3a4:	6006      	str	r6, [r0, #0]
 800b3a6:	60c6      	str	r6, [r0, #12]
 800b3a8:	69e6      	ldr	r6, [r4, #28]
 800b3aa:	68f3      	ldr	r3, [r6, #12]
 800b3ac:	b183      	cbz	r3, 800b3d0 <_Balloc+0x50>
 800b3ae:	69e3      	ldr	r3, [r4, #28]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3b6:	b9b8      	cbnz	r0, 800b3e8 <_Balloc+0x68>
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	fa01 f605 	lsl.w	r6, r1, r5
 800b3be:	1d72      	adds	r2, r6, #5
 800b3c0:	0092      	lsls	r2, r2, #2
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 fe14 	bl	800bff0 <_calloc_r>
 800b3c8:	b160      	cbz	r0, 800b3e4 <_Balloc+0x64>
 800b3ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3ce:	e00e      	b.n	800b3ee <_Balloc+0x6e>
 800b3d0:	2221      	movs	r2, #33	@ 0x21
 800b3d2:	2104      	movs	r1, #4
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fe0b 	bl	800bff0 <_calloc_r>
 800b3da:	69e3      	ldr	r3, [r4, #28]
 800b3dc:	60f0      	str	r0, [r6, #12]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e4      	bne.n	800b3ae <_Balloc+0x2e>
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	6802      	ldr	r2, [r0, #0]
 800b3ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3f4:	e7f7      	b.n	800b3e6 <_Balloc+0x66>
 800b3f6:	bf00      	nop
 800b3f8:	0800c2d9 	.word	0x0800c2d9
 800b3fc:	0800c359 	.word	0x0800c359

0800b400 <_Bfree>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	69c6      	ldr	r6, [r0, #28]
 800b404:	4605      	mov	r5, r0
 800b406:	460c      	mov	r4, r1
 800b408:	b976      	cbnz	r6, 800b428 <_Bfree+0x28>
 800b40a:	2010      	movs	r0, #16
 800b40c:	f7ff ff02 	bl	800b214 <malloc>
 800b410:	4602      	mov	r2, r0
 800b412:	61e8      	str	r0, [r5, #28]
 800b414:	b920      	cbnz	r0, 800b420 <_Bfree+0x20>
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <_Bfree+0x3c>)
 800b418:	4809      	ldr	r0, [pc, #36]	@ (800b440 <_Bfree+0x40>)
 800b41a:	218f      	movs	r1, #143	@ 0x8f
 800b41c:	f000 fdca 	bl	800bfb4 <__assert_func>
 800b420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b424:	6006      	str	r6, [r0, #0]
 800b426:	60c6      	str	r6, [r0, #12]
 800b428:	b13c      	cbz	r4, 800b43a <_Bfree+0x3a>
 800b42a:	69eb      	ldr	r3, [r5, #28]
 800b42c:	6862      	ldr	r2, [r4, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b434:	6021      	str	r1, [r4, #0]
 800b436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	0800c2d9 	.word	0x0800c2d9
 800b440:	0800c359 	.word	0x0800c359

0800b444 <__multadd>:
 800b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b448:	690d      	ldr	r5, [r1, #16]
 800b44a:	4607      	mov	r7, r0
 800b44c:	460c      	mov	r4, r1
 800b44e:	461e      	mov	r6, r3
 800b450:	f101 0c14 	add.w	ip, r1, #20
 800b454:	2000      	movs	r0, #0
 800b456:	f8dc 3000 	ldr.w	r3, [ip]
 800b45a:	b299      	uxth	r1, r3
 800b45c:	fb02 6101 	mla	r1, r2, r1, r6
 800b460:	0c1e      	lsrs	r6, r3, #16
 800b462:	0c0b      	lsrs	r3, r1, #16
 800b464:	fb02 3306 	mla	r3, r2, r6, r3
 800b468:	b289      	uxth	r1, r1
 800b46a:	3001      	adds	r0, #1
 800b46c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b470:	4285      	cmp	r5, r0
 800b472:	f84c 1b04 	str.w	r1, [ip], #4
 800b476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b47a:	dcec      	bgt.n	800b456 <__multadd+0x12>
 800b47c:	b30e      	cbz	r6, 800b4c2 <__multadd+0x7e>
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	42ab      	cmp	r3, r5
 800b482:	dc19      	bgt.n	800b4b8 <__multadd+0x74>
 800b484:	6861      	ldr	r1, [r4, #4]
 800b486:	4638      	mov	r0, r7
 800b488:	3101      	adds	r1, #1
 800b48a:	f7ff ff79 	bl	800b380 <_Balloc>
 800b48e:	4680      	mov	r8, r0
 800b490:	b928      	cbnz	r0, 800b49e <__multadd+0x5a>
 800b492:	4602      	mov	r2, r0
 800b494:	4b0c      	ldr	r3, [pc, #48]	@ (800b4c8 <__multadd+0x84>)
 800b496:	480d      	ldr	r0, [pc, #52]	@ (800b4cc <__multadd+0x88>)
 800b498:	21ba      	movs	r1, #186	@ 0xba
 800b49a:	f000 fd8b 	bl	800bfb4 <__assert_func>
 800b49e:	6922      	ldr	r2, [r4, #16]
 800b4a0:	3202      	adds	r2, #2
 800b4a2:	f104 010c 	add.w	r1, r4, #12
 800b4a6:	0092      	lsls	r2, r2, #2
 800b4a8:	300c      	adds	r0, #12
 800b4aa:	f000 fd75 	bl	800bf98 <memcpy>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7ff ffa5 	bl	800b400 <_Bfree>
 800b4b6:	4644      	mov	r4, r8
 800b4b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4bc:	3501      	adds	r5, #1
 800b4be:	615e      	str	r6, [r3, #20]
 800b4c0:	6125      	str	r5, [r4, #16]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c8:	0800c348 	.word	0x0800c348
 800b4cc:	0800c359 	.word	0x0800c359

0800b4d0 <__hi0bits>:
 800b4d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	bf36      	itet	cc
 800b4d8:	0403      	lslcc	r3, r0, #16
 800b4da:	2000      	movcs	r0, #0
 800b4dc:	2010      	movcc	r0, #16
 800b4de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4e2:	bf3c      	itt	cc
 800b4e4:	021b      	lslcc	r3, r3, #8
 800b4e6:	3008      	addcc	r0, #8
 800b4e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4ec:	bf3c      	itt	cc
 800b4ee:	011b      	lslcc	r3, r3, #4
 800b4f0:	3004      	addcc	r0, #4
 800b4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4f6:	bf3c      	itt	cc
 800b4f8:	009b      	lslcc	r3, r3, #2
 800b4fa:	3002      	addcc	r0, #2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	db05      	blt.n	800b50c <__hi0bits+0x3c>
 800b500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b504:	f100 0001 	add.w	r0, r0, #1
 800b508:	bf08      	it	eq
 800b50a:	2020      	moveq	r0, #32
 800b50c:	4770      	bx	lr

0800b50e <__lo0bits>:
 800b50e:	6803      	ldr	r3, [r0, #0]
 800b510:	4602      	mov	r2, r0
 800b512:	f013 0007 	ands.w	r0, r3, #7
 800b516:	d00b      	beq.n	800b530 <__lo0bits+0x22>
 800b518:	07d9      	lsls	r1, r3, #31
 800b51a:	d421      	bmi.n	800b560 <__lo0bits+0x52>
 800b51c:	0798      	lsls	r0, r3, #30
 800b51e:	bf49      	itett	mi
 800b520:	085b      	lsrmi	r3, r3, #1
 800b522:	089b      	lsrpl	r3, r3, #2
 800b524:	2001      	movmi	r0, #1
 800b526:	6013      	strmi	r3, [r2, #0]
 800b528:	bf5c      	itt	pl
 800b52a:	6013      	strpl	r3, [r2, #0]
 800b52c:	2002      	movpl	r0, #2
 800b52e:	4770      	bx	lr
 800b530:	b299      	uxth	r1, r3
 800b532:	b909      	cbnz	r1, 800b538 <__lo0bits+0x2a>
 800b534:	0c1b      	lsrs	r3, r3, #16
 800b536:	2010      	movs	r0, #16
 800b538:	b2d9      	uxtb	r1, r3
 800b53a:	b909      	cbnz	r1, 800b540 <__lo0bits+0x32>
 800b53c:	3008      	adds	r0, #8
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	0719      	lsls	r1, r3, #28
 800b542:	bf04      	itt	eq
 800b544:	091b      	lsreq	r3, r3, #4
 800b546:	3004      	addeq	r0, #4
 800b548:	0799      	lsls	r1, r3, #30
 800b54a:	bf04      	itt	eq
 800b54c:	089b      	lsreq	r3, r3, #2
 800b54e:	3002      	addeq	r0, #2
 800b550:	07d9      	lsls	r1, r3, #31
 800b552:	d403      	bmi.n	800b55c <__lo0bits+0x4e>
 800b554:	085b      	lsrs	r3, r3, #1
 800b556:	f100 0001 	add.w	r0, r0, #1
 800b55a:	d003      	beq.n	800b564 <__lo0bits+0x56>
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	4770      	bx	lr
 800b560:	2000      	movs	r0, #0
 800b562:	4770      	bx	lr
 800b564:	2020      	movs	r0, #32
 800b566:	4770      	bx	lr

0800b568 <__i2b>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	460c      	mov	r4, r1
 800b56c:	2101      	movs	r1, #1
 800b56e:	f7ff ff07 	bl	800b380 <_Balloc>
 800b572:	4602      	mov	r2, r0
 800b574:	b928      	cbnz	r0, 800b582 <__i2b+0x1a>
 800b576:	4b05      	ldr	r3, [pc, #20]	@ (800b58c <__i2b+0x24>)
 800b578:	4805      	ldr	r0, [pc, #20]	@ (800b590 <__i2b+0x28>)
 800b57a:	f240 1145 	movw	r1, #325	@ 0x145
 800b57e:	f000 fd19 	bl	800bfb4 <__assert_func>
 800b582:	2301      	movs	r3, #1
 800b584:	6144      	str	r4, [r0, #20]
 800b586:	6103      	str	r3, [r0, #16]
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	bf00      	nop
 800b58c:	0800c348 	.word	0x0800c348
 800b590:	0800c359 	.word	0x0800c359

0800b594 <__multiply>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	4617      	mov	r7, r2
 800b59a:	690a      	ldr	r2, [r1, #16]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	bfa8      	it	ge
 800b5a2:	463b      	movge	r3, r7
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	bfa4      	itt	ge
 800b5a8:	460f      	movge	r7, r1
 800b5aa:	4699      	movge	r9, r3
 800b5ac:	693d      	ldr	r5, [r7, #16]
 800b5ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	eb05 060a 	add.w	r6, r5, sl
 800b5ba:	42b3      	cmp	r3, r6
 800b5bc:	b085      	sub	sp, #20
 800b5be:	bfb8      	it	lt
 800b5c0:	3101      	addlt	r1, #1
 800b5c2:	f7ff fedd 	bl	800b380 <_Balloc>
 800b5c6:	b930      	cbnz	r0, 800b5d6 <__multiply+0x42>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	4b41      	ldr	r3, [pc, #260]	@ (800b6d0 <__multiply+0x13c>)
 800b5cc:	4841      	ldr	r0, [pc, #260]	@ (800b6d4 <__multiply+0x140>)
 800b5ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5d2:	f000 fcef 	bl	800bfb4 <__assert_func>
 800b5d6:	f100 0414 	add.w	r4, r0, #20
 800b5da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b5de:	4623      	mov	r3, r4
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	4573      	cmp	r3, lr
 800b5e4:	d320      	bcc.n	800b628 <__multiply+0x94>
 800b5e6:	f107 0814 	add.w	r8, r7, #20
 800b5ea:	f109 0114 	add.w	r1, r9, #20
 800b5ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b5f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b5f6:	9302      	str	r3, [sp, #8]
 800b5f8:	1beb      	subs	r3, r5, r7
 800b5fa:	3b15      	subs	r3, #21
 800b5fc:	f023 0303 	bic.w	r3, r3, #3
 800b600:	3304      	adds	r3, #4
 800b602:	3715      	adds	r7, #21
 800b604:	42bd      	cmp	r5, r7
 800b606:	bf38      	it	cc
 800b608:	2304      	movcc	r3, #4
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	9b02      	ldr	r3, [sp, #8]
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	428b      	cmp	r3, r1
 800b612:	d80c      	bhi.n	800b62e <__multiply+0x9a>
 800b614:	2e00      	cmp	r6, #0
 800b616:	dd03      	ble.n	800b620 <__multiply+0x8c>
 800b618:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d055      	beq.n	800b6cc <__multiply+0x138>
 800b620:	6106      	str	r6, [r0, #16]
 800b622:	b005      	add	sp, #20
 800b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b628:	f843 2b04 	str.w	r2, [r3], #4
 800b62c:	e7d9      	b.n	800b5e2 <__multiply+0x4e>
 800b62e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b632:	f1ba 0f00 	cmp.w	sl, #0
 800b636:	d01f      	beq.n	800b678 <__multiply+0xe4>
 800b638:	46c4      	mov	ip, r8
 800b63a:	46a1      	mov	r9, r4
 800b63c:	2700      	movs	r7, #0
 800b63e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b642:	f8d9 3000 	ldr.w	r3, [r9]
 800b646:	fa1f fb82 	uxth.w	fp, r2
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b650:	443b      	add	r3, r7
 800b652:	f8d9 7000 	ldr.w	r7, [r9]
 800b656:	0c12      	lsrs	r2, r2, #16
 800b658:	0c3f      	lsrs	r7, r7, #16
 800b65a:	fb0a 7202 	mla	r2, sl, r2, r7
 800b65e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b662:	b29b      	uxth	r3, r3
 800b664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b668:	4565      	cmp	r5, ip
 800b66a:	f849 3b04 	str.w	r3, [r9], #4
 800b66e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b672:	d8e4      	bhi.n	800b63e <__multiply+0xaa>
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	50e7      	str	r7, [r4, r3]
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b67e:	3104      	adds	r1, #4
 800b680:	f1b9 0f00 	cmp.w	r9, #0
 800b684:	d020      	beq.n	800b6c8 <__multiply+0x134>
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	4647      	mov	r7, r8
 800b68a:	46a4      	mov	ip, r4
 800b68c:	f04f 0a00 	mov.w	sl, #0
 800b690:	f8b7 b000 	ldrh.w	fp, [r7]
 800b694:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b698:	fb09 220b 	mla	r2, r9, fp, r2
 800b69c:	4452      	add	r2, sl
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6a4:	f84c 3b04 	str.w	r3, [ip], #4
 800b6a8:	f857 3b04 	ldr.w	r3, [r7], #4
 800b6ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6b0:	f8bc 3000 	ldrh.w	r3, [ip]
 800b6b4:	fb09 330a 	mla	r3, r9, sl, r3
 800b6b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b6bc:	42bd      	cmp	r5, r7
 800b6be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6c2:	d8e5      	bhi.n	800b690 <__multiply+0xfc>
 800b6c4:	9a01      	ldr	r2, [sp, #4]
 800b6c6:	50a3      	str	r3, [r4, r2]
 800b6c8:	3404      	adds	r4, #4
 800b6ca:	e79f      	b.n	800b60c <__multiply+0x78>
 800b6cc:	3e01      	subs	r6, #1
 800b6ce:	e7a1      	b.n	800b614 <__multiply+0x80>
 800b6d0:	0800c348 	.word	0x0800c348
 800b6d4:	0800c359 	.word	0x0800c359

0800b6d8 <__pow5mult>:
 800b6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6dc:	4615      	mov	r5, r2
 800b6de:	f012 0203 	ands.w	r2, r2, #3
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	460e      	mov	r6, r1
 800b6e6:	d007      	beq.n	800b6f8 <__pow5mult+0x20>
 800b6e8:	4c25      	ldr	r4, [pc, #148]	@ (800b780 <__pow5mult+0xa8>)
 800b6ea:	3a01      	subs	r2, #1
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6f2:	f7ff fea7 	bl	800b444 <__multadd>
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	10ad      	asrs	r5, r5, #2
 800b6fa:	d03d      	beq.n	800b778 <__pow5mult+0xa0>
 800b6fc:	69fc      	ldr	r4, [r7, #28]
 800b6fe:	b97c      	cbnz	r4, 800b720 <__pow5mult+0x48>
 800b700:	2010      	movs	r0, #16
 800b702:	f7ff fd87 	bl	800b214 <malloc>
 800b706:	4602      	mov	r2, r0
 800b708:	61f8      	str	r0, [r7, #28]
 800b70a:	b928      	cbnz	r0, 800b718 <__pow5mult+0x40>
 800b70c:	4b1d      	ldr	r3, [pc, #116]	@ (800b784 <__pow5mult+0xac>)
 800b70e:	481e      	ldr	r0, [pc, #120]	@ (800b788 <__pow5mult+0xb0>)
 800b710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b714:	f000 fc4e 	bl	800bfb4 <__assert_func>
 800b718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b71c:	6004      	str	r4, [r0, #0]
 800b71e:	60c4      	str	r4, [r0, #12]
 800b720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b728:	b94c      	cbnz	r4, 800b73e <__pow5mult+0x66>
 800b72a:	f240 2171 	movw	r1, #625	@ 0x271
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff ff1a 	bl	800b568 <__i2b>
 800b734:	2300      	movs	r3, #0
 800b736:	f8c8 0008 	str.w	r0, [r8, #8]
 800b73a:	4604      	mov	r4, r0
 800b73c:	6003      	str	r3, [r0, #0]
 800b73e:	f04f 0900 	mov.w	r9, #0
 800b742:	07eb      	lsls	r3, r5, #31
 800b744:	d50a      	bpl.n	800b75c <__pow5mult+0x84>
 800b746:	4631      	mov	r1, r6
 800b748:	4622      	mov	r2, r4
 800b74a:	4638      	mov	r0, r7
 800b74c:	f7ff ff22 	bl	800b594 <__multiply>
 800b750:	4631      	mov	r1, r6
 800b752:	4680      	mov	r8, r0
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff fe53 	bl	800b400 <_Bfree>
 800b75a:	4646      	mov	r6, r8
 800b75c:	106d      	asrs	r5, r5, #1
 800b75e:	d00b      	beq.n	800b778 <__pow5mult+0xa0>
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	b938      	cbnz	r0, 800b774 <__pow5mult+0x9c>
 800b764:	4622      	mov	r2, r4
 800b766:	4621      	mov	r1, r4
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff ff13 	bl	800b594 <__multiply>
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	f8c0 9000 	str.w	r9, [r0]
 800b774:	4604      	mov	r4, r0
 800b776:	e7e4      	b.n	800b742 <__pow5mult+0x6a>
 800b778:	4630      	mov	r0, r6
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	bf00      	nop
 800b780:	0800c40c 	.word	0x0800c40c
 800b784:	0800c2d9 	.word	0x0800c2d9
 800b788:	0800c359 	.word	0x0800c359

0800b78c <__lshift>:
 800b78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b790:	460c      	mov	r4, r1
 800b792:	6849      	ldr	r1, [r1, #4]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	4607      	mov	r7, r0
 800b79e:	4691      	mov	r9, r2
 800b7a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7a4:	f108 0601 	add.w	r6, r8, #1
 800b7a8:	42b3      	cmp	r3, r6
 800b7aa:	db0b      	blt.n	800b7c4 <__lshift+0x38>
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f7ff fde7 	bl	800b380 <_Balloc>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	b948      	cbnz	r0, 800b7ca <__lshift+0x3e>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	4b28      	ldr	r3, [pc, #160]	@ (800b85c <__lshift+0xd0>)
 800b7ba:	4829      	ldr	r0, [pc, #164]	@ (800b860 <__lshift+0xd4>)
 800b7bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b7c0:	f000 fbf8 	bl	800bfb4 <__assert_func>
 800b7c4:	3101      	adds	r1, #1
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	e7ee      	b.n	800b7a8 <__lshift+0x1c>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f100 0114 	add.w	r1, r0, #20
 800b7d0:	f100 0210 	add.w	r2, r0, #16
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	4553      	cmp	r3, sl
 800b7d8:	db33      	blt.n	800b842 <__lshift+0xb6>
 800b7da:	6920      	ldr	r0, [r4, #16]
 800b7dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7e0:	f104 0314 	add.w	r3, r4, #20
 800b7e4:	f019 091f 	ands.w	r9, r9, #31
 800b7e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7f0:	d02b      	beq.n	800b84a <__lshift+0xbe>
 800b7f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b7f6:	468a      	mov	sl, r1
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	6818      	ldr	r0, [r3, #0]
 800b7fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b800:	4310      	orrs	r0, r2
 800b802:	f84a 0b04 	str.w	r0, [sl], #4
 800b806:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80a:	459c      	cmp	ip, r3
 800b80c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b810:	d8f3      	bhi.n	800b7fa <__lshift+0x6e>
 800b812:	ebac 0304 	sub.w	r3, ip, r4
 800b816:	3b15      	subs	r3, #21
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	3304      	adds	r3, #4
 800b81e:	f104 0015 	add.w	r0, r4, #21
 800b822:	4560      	cmp	r0, ip
 800b824:	bf88      	it	hi
 800b826:	2304      	movhi	r3, #4
 800b828:	50ca      	str	r2, [r1, r3]
 800b82a:	b10a      	cbz	r2, 800b830 <__lshift+0xa4>
 800b82c:	f108 0602 	add.w	r6, r8, #2
 800b830:	3e01      	subs	r6, #1
 800b832:	4638      	mov	r0, r7
 800b834:	612e      	str	r6, [r5, #16]
 800b836:	4621      	mov	r1, r4
 800b838:	f7ff fde2 	bl	800b400 <_Bfree>
 800b83c:	4628      	mov	r0, r5
 800b83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b842:	f842 0f04 	str.w	r0, [r2, #4]!
 800b846:	3301      	adds	r3, #1
 800b848:	e7c5      	b.n	800b7d6 <__lshift+0x4a>
 800b84a:	3904      	subs	r1, #4
 800b84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b850:	f841 2f04 	str.w	r2, [r1, #4]!
 800b854:	459c      	cmp	ip, r3
 800b856:	d8f9      	bhi.n	800b84c <__lshift+0xc0>
 800b858:	e7ea      	b.n	800b830 <__lshift+0xa4>
 800b85a:	bf00      	nop
 800b85c:	0800c348 	.word	0x0800c348
 800b860:	0800c359 	.word	0x0800c359

0800b864 <__mcmp>:
 800b864:	690a      	ldr	r2, [r1, #16]
 800b866:	4603      	mov	r3, r0
 800b868:	6900      	ldr	r0, [r0, #16]
 800b86a:	1a80      	subs	r0, r0, r2
 800b86c:	b530      	push	{r4, r5, lr}
 800b86e:	d10e      	bne.n	800b88e <__mcmp+0x2a>
 800b870:	3314      	adds	r3, #20
 800b872:	3114      	adds	r1, #20
 800b874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b87c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b884:	4295      	cmp	r5, r2
 800b886:	d003      	beq.n	800b890 <__mcmp+0x2c>
 800b888:	d205      	bcs.n	800b896 <__mcmp+0x32>
 800b88a:	f04f 30ff 	mov.w	r0, #4294967295
 800b88e:	bd30      	pop	{r4, r5, pc}
 800b890:	42a3      	cmp	r3, r4
 800b892:	d3f3      	bcc.n	800b87c <__mcmp+0x18>
 800b894:	e7fb      	b.n	800b88e <__mcmp+0x2a>
 800b896:	2001      	movs	r0, #1
 800b898:	e7f9      	b.n	800b88e <__mcmp+0x2a>
	...

0800b89c <__mdiff>:
 800b89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	4689      	mov	r9, r1
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	4648      	mov	r0, r9
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	f7ff ffdb 	bl	800b864 <__mcmp>
 800b8ae:	1e05      	subs	r5, r0, #0
 800b8b0:	d112      	bne.n	800b8d8 <__mdiff+0x3c>
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f7ff fd63 	bl	800b380 <_Balloc>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	b928      	cbnz	r0, 800b8ca <__mdiff+0x2e>
 800b8be:	4b3f      	ldr	r3, [pc, #252]	@ (800b9bc <__mdiff+0x120>)
 800b8c0:	f240 2137 	movw	r1, #567	@ 0x237
 800b8c4:	483e      	ldr	r0, [pc, #248]	@ (800b9c0 <__mdiff+0x124>)
 800b8c6:	f000 fb75 	bl	800bfb4 <__assert_func>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	b003      	add	sp, #12
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	bfbc      	itt	lt
 800b8da:	464b      	movlt	r3, r9
 800b8dc:	46a1      	movlt	r9, r4
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8e4:	bfba      	itte	lt
 800b8e6:	461c      	movlt	r4, r3
 800b8e8:	2501      	movlt	r5, #1
 800b8ea:	2500      	movge	r5, #0
 800b8ec:	f7ff fd48 	bl	800b380 <_Balloc>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	b918      	cbnz	r0, 800b8fc <__mdiff+0x60>
 800b8f4:	4b31      	ldr	r3, [pc, #196]	@ (800b9bc <__mdiff+0x120>)
 800b8f6:	f240 2145 	movw	r1, #581	@ 0x245
 800b8fa:	e7e3      	b.n	800b8c4 <__mdiff+0x28>
 800b8fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b900:	6926      	ldr	r6, [r4, #16]
 800b902:	60c5      	str	r5, [r0, #12]
 800b904:	f109 0310 	add.w	r3, r9, #16
 800b908:	f109 0514 	add.w	r5, r9, #20
 800b90c:	f104 0e14 	add.w	lr, r4, #20
 800b910:	f100 0b14 	add.w	fp, r0, #20
 800b914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	46d9      	mov	r9, fp
 800b920:	f04f 0c00 	mov.w	ip, #0
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b92a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	fa1f f38a 	uxth.w	r3, sl
 800b934:	4619      	mov	r1, r3
 800b936:	b283      	uxth	r3, r0
 800b938:	1acb      	subs	r3, r1, r3
 800b93a:	0c00      	lsrs	r0, r0, #16
 800b93c:	4463      	add	r3, ip
 800b93e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b946:	b29b      	uxth	r3, r3
 800b948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b94c:	4576      	cmp	r6, lr
 800b94e:	f849 3b04 	str.w	r3, [r9], #4
 800b952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b956:	d8e5      	bhi.n	800b924 <__mdiff+0x88>
 800b958:	1b33      	subs	r3, r6, r4
 800b95a:	3b15      	subs	r3, #21
 800b95c:	f023 0303 	bic.w	r3, r3, #3
 800b960:	3415      	adds	r4, #21
 800b962:	3304      	adds	r3, #4
 800b964:	42a6      	cmp	r6, r4
 800b966:	bf38      	it	cc
 800b968:	2304      	movcc	r3, #4
 800b96a:	441d      	add	r5, r3
 800b96c:	445b      	add	r3, fp
 800b96e:	461e      	mov	r6, r3
 800b970:	462c      	mov	r4, r5
 800b972:	4544      	cmp	r4, r8
 800b974:	d30e      	bcc.n	800b994 <__mdiff+0xf8>
 800b976:	f108 0103 	add.w	r1, r8, #3
 800b97a:	1b49      	subs	r1, r1, r5
 800b97c:	f021 0103 	bic.w	r1, r1, #3
 800b980:	3d03      	subs	r5, #3
 800b982:	45a8      	cmp	r8, r5
 800b984:	bf38      	it	cc
 800b986:	2100      	movcc	r1, #0
 800b988:	440b      	add	r3, r1
 800b98a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b98e:	b191      	cbz	r1, 800b9b6 <__mdiff+0x11a>
 800b990:	6117      	str	r7, [r2, #16]
 800b992:	e79d      	b.n	800b8d0 <__mdiff+0x34>
 800b994:	f854 1b04 	ldr.w	r1, [r4], #4
 800b998:	46e6      	mov	lr, ip
 800b99a:	0c08      	lsrs	r0, r1, #16
 800b99c:	fa1c fc81 	uxtah	ip, ip, r1
 800b9a0:	4471      	add	r1, lr
 800b9a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b9a6:	b289      	uxth	r1, r1
 800b9a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9ac:	f846 1b04 	str.w	r1, [r6], #4
 800b9b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9b4:	e7dd      	b.n	800b972 <__mdiff+0xd6>
 800b9b6:	3f01      	subs	r7, #1
 800b9b8:	e7e7      	b.n	800b98a <__mdiff+0xee>
 800b9ba:	bf00      	nop
 800b9bc:	0800c348 	.word	0x0800c348
 800b9c0:	0800c359 	.word	0x0800c359

0800b9c4 <__d2b>:
 800b9c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	ec59 8b10 	vmov	r8, r9, d0
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	f7ff fcd5 	bl	800b380 <_Balloc>
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	b930      	cbnz	r0, 800b9e8 <__d2b+0x24>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	4b23      	ldr	r3, [pc, #140]	@ (800ba6c <__d2b+0xa8>)
 800b9de:	4824      	ldr	r0, [pc, #144]	@ (800ba70 <__d2b+0xac>)
 800b9e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9e4:	f000 fae6 	bl	800bfb4 <__assert_func>
 800b9e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9f0:	b10d      	cbz	r5, 800b9f6 <__d2b+0x32>
 800b9f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b9fc:	d023      	beq.n	800ba46 <__d2b+0x82>
 800b9fe:	4668      	mov	r0, sp
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	f7ff fd84 	bl	800b50e <__lo0bits>
 800ba06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba0a:	b1d0      	cbz	r0, 800ba42 <__d2b+0x7e>
 800ba0c:	f1c0 0320 	rsb	r3, r0, #32
 800ba10:	fa02 f303 	lsl.w	r3, r2, r3
 800ba14:	430b      	orrs	r3, r1
 800ba16:	40c2      	lsrs	r2, r0
 800ba18:	6163      	str	r3, [r4, #20]
 800ba1a:	9201      	str	r2, [sp, #4]
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	61a3      	str	r3, [r4, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bf0c      	ite	eq
 800ba24:	2201      	moveq	r2, #1
 800ba26:	2202      	movne	r2, #2
 800ba28:	6122      	str	r2, [r4, #16]
 800ba2a:	b1a5      	cbz	r5, 800ba56 <__d2b+0x92>
 800ba2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba30:	4405      	add	r5, r0
 800ba32:	603d      	str	r5, [r7, #0]
 800ba34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba38:	6030      	str	r0, [r6, #0]
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	b003      	add	sp, #12
 800ba3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba42:	6161      	str	r1, [r4, #20]
 800ba44:	e7ea      	b.n	800ba1c <__d2b+0x58>
 800ba46:	a801      	add	r0, sp, #4
 800ba48:	f7ff fd61 	bl	800b50e <__lo0bits>
 800ba4c:	9b01      	ldr	r3, [sp, #4]
 800ba4e:	6163      	str	r3, [r4, #20]
 800ba50:	3020      	adds	r0, #32
 800ba52:	2201      	movs	r2, #1
 800ba54:	e7e8      	b.n	800ba28 <__d2b+0x64>
 800ba56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba5e:	6038      	str	r0, [r7, #0]
 800ba60:	6918      	ldr	r0, [r3, #16]
 800ba62:	f7ff fd35 	bl	800b4d0 <__hi0bits>
 800ba66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba6a:	e7e5      	b.n	800ba38 <__d2b+0x74>
 800ba6c:	0800c348 	.word	0x0800c348
 800ba70:	0800c359 	.word	0x0800c359

0800ba74 <__sfputc_r>:
 800ba74:	6893      	ldr	r3, [r2, #8]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	b410      	push	{r4}
 800ba7c:	6093      	str	r3, [r2, #8]
 800ba7e:	da08      	bge.n	800ba92 <__sfputc_r+0x1e>
 800ba80:	6994      	ldr	r4, [r2, #24]
 800ba82:	42a3      	cmp	r3, r4
 800ba84:	db01      	blt.n	800ba8a <__sfputc_r+0x16>
 800ba86:	290a      	cmp	r1, #10
 800ba88:	d103      	bne.n	800ba92 <__sfputc_r+0x1e>
 800ba8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba8e:	f000 b9df 	b.w	800be50 <__swbuf_r>
 800ba92:	6813      	ldr	r3, [r2, #0]
 800ba94:	1c58      	adds	r0, r3, #1
 800ba96:	6010      	str	r0, [r2, #0]
 800ba98:	7019      	strb	r1, [r3, #0]
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <__sfputs_r>:
 800baa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa4:	4606      	mov	r6, r0
 800baa6:	460f      	mov	r7, r1
 800baa8:	4614      	mov	r4, r2
 800baaa:	18d5      	adds	r5, r2, r3
 800baac:	42ac      	cmp	r4, r5
 800baae:	d101      	bne.n	800bab4 <__sfputs_r+0x12>
 800bab0:	2000      	movs	r0, #0
 800bab2:	e007      	b.n	800bac4 <__sfputs_r+0x22>
 800bab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab8:	463a      	mov	r2, r7
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff ffda 	bl	800ba74 <__sfputc_r>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d1f3      	bne.n	800baac <__sfputs_r+0xa>
 800bac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bac8 <_vfiprintf_r>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	460d      	mov	r5, r1
 800bace:	b09d      	sub	sp, #116	@ 0x74
 800bad0:	4614      	mov	r4, r2
 800bad2:	4698      	mov	r8, r3
 800bad4:	4606      	mov	r6, r0
 800bad6:	b118      	cbz	r0, 800bae0 <_vfiprintf_r+0x18>
 800bad8:	6a03      	ldr	r3, [r0, #32]
 800bada:	b90b      	cbnz	r3, 800bae0 <_vfiprintf_r+0x18>
 800badc:	f7fe fbfe 	bl	800a2dc <__sinit>
 800bae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bae2:	07d9      	lsls	r1, r3, #31
 800bae4:	d405      	bmi.n	800baf2 <_vfiprintf_r+0x2a>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	059a      	lsls	r2, r3, #22
 800baea:	d402      	bmi.n	800baf2 <_vfiprintf_r+0x2a>
 800baec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baee:	f7fe fcec 	bl	800a4ca <__retarget_lock_acquire_recursive>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	071b      	lsls	r3, r3, #28
 800baf6:	d501      	bpl.n	800bafc <_vfiprintf_r+0x34>
 800baf8:	692b      	ldr	r3, [r5, #16]
 800bafa:	b99b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x5c>
 800bafc:	4629      	mov	r1, r5
 800bafe:	4630      	mov	r0, r6
 800bb00:	f000 f9e4 	bl	800becc <__swsetup_r>
 800bb04:	b170      	cbz	r0, 800bb24 <_vfiprintf_r+0x5c>
 800bb06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb08:	07dc      	lsls	r4, r3, #31
 800bb0a:	d504      	bpl.n	800bb16 <_vfiprintf_r+0x4e>
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	b01d      	add	sp, #116	@ 0x74
 800bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	0598      	lsls	r0, r3, #22
 800bb1a:	d4f7      	bmi.n	800bb0c <_vfiprintf_r+0x44>
 800bb1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb1e:	f7fe fcd5 	bl	800a4cc <__retarget_lock_release_recursive>
 800bb22:	e7f3      	b.n	800bb0c <_vfiprintf_r+0x44>
 800bb24:	2300      	movs	r3, #0
 800bb26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb28:	2320      	movs	r3, #32
 800bb2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb32:	2330      	movs	r3, #48	@ 0x30
 800bb34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bce4 <_vfiprintf_r+0x21c>
 800bb38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb3c:	f04f 0901 	mov.w	r9, #1
 800bb40:	4623      	mov	r3, r4
 800bb42:	469a      	mov	sl, r3
 800bb44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb48:	b10a      	cbz	r2, 800bb4e <_vfiprintf_r+0x86>
 800bb4a:	2a25      	cmp	r2, #37	@ 0x25
 800bb4c:	d1f9      	bne.n	800bb42 <_vfiprintf_r+0x7a>
 800bb4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb52:	d00b      	beq.n	800bb6c <_vfiprintf_r+0xa4>
 800bb54:	465b      	mov	r3, fp
 800bb56:	4622      	mov	r2, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7ff ffa1 	bl	800baa2 <__sfputs_r>
 800bb60:	3001      	adds	r0, #1
 800bb62:	f000 80a7 	beq.w	800bcb4 <_vfiprintf_r+0x1ec>
 800bb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb68:	445a      	add	r2, fp
 800bb6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 809f 	beq.w	800bcb4 <_vfiprintf_r+0x1ec>
 800bb76:	2300      	movs	r3, #0
 800bb78:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb80:	f10a 0a01 	add.w	sl, sl, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	9307      	str	r3, [sp, #28]
 800bb88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2205      	movs	r2, #5
 800bb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb96:	4853      	ldr	r0, [pc, #332]	@ (800bce4 <_vfiprintf_r+0x21c>)
 800bb98:	f7f4 fb1a 	bl	80001d0 <memchr>
 800bb9c:	9a04      	ldr	r2, [sp, #16]
 800bb9e:	b9d8      	cbnz	r0, 800bbd8 <_vfiprintf_r+0x110>
 800bba0:	06d1      	lsls	r1, r2, #27
 800bba2:	bf44      	itt	mi
 800bba4:	2320      	movmi	r3, #32
 800bba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbaa:	0713      	lsls	r3, r2, #28
 800bbac:	bf44      	itt	mi
 800bbae:	232b      	movmi	r3, #43	@ 0x2b
 800bbb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbba:	d015      	beq.n	800bbe8 <_vfiprintf_r+0x120>
 800bbbc:	9a07      	ldr	r2, [sp, #28]
 800bbbe:	4654      	mov	r4, sl
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f04f 0c0a 	mov.w	ip, #10
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbcc:	3b30      	subs	r3, #48	@ 0x30
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	d94b      	bls.n	800bc6a <_vfiprintf_r+0x1a2>
 800bbd2:	b1b0      	cbz	r0, 800bc02 <_vfiprintf_r+0x13a>
 800bbd4:	9207      	str	r2, [sp, #28]
 800bbd6:	e014      	b.n	800bc02 <_vfiprintf_r+0x13a>
 800bbd8:	eba0 0308 	sub.w	r3, r0, r8
 800bbdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	46a2      	mov	sl, r4
 800bbe6:	e7d2      	b.n	800bb8e <_vfiprintf_r+0xc6>
 800bbe8:	9b03      	ldr	r3, [sp, #12]
 800bbea:	1d19      	adds	r1, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	9103      	str	r1, [sp, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bfbb      	ittet	lt
 800bbf4:	425b      	neglt	r3, r3
 800bbf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbfa:	9307      	strge	r3, [sp, #28]
 800bbfc:	9307      	strlt	r3, [sp, #28]
 800bbfe:	bfb8      	it	lt
 800bc00:	9204      	strlt	r2, [sp, #16]
 800bc02:	7823      	ldrb	r3, [r4, #0]
 800bc04:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc06:	d10a      	bne.n	800bc1e <_vfiprintf_r+0x156>
 800bc08:	7863      	ldrb	r3, [r4, #1]
 800bc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0c:	d132      	bne.n	800bc74 <_vfiprintf_r+0x1ac>
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	1d1a      	adds	r2, r3, #4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	9203      	str	r2, [sp, #12]
 800bc16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc1a:	3402      	adds	r4, #2
 800bc1c:	9305      	str	r3, [sp, #20]
 800bc1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcf4 <_vfiprintf_r+0x22c>
 800bc22:	7821      	ldrb	r1, [r4, #0]
 800bc24:	2203      	movs	r2, #3
 800bc26:	4650      	mov	r0, sl
 800bc28:	f7f4 fad2 	bl	80001d0 <memchr>
 800bc2c:	b138      	cbz	r0, 800bc3e <_vfiprintf_r+0x176>
 800bc2e:	9b04      	ldr	r3, [sp, #16]
 800bc30:	eba0 000a 	sub.w	r0, r0, sl
 800bc34:	2240      	movs	r2, #64	@ 0x40
 800bc36:	4082      	lsls	r2, r0
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	3401      	adds	r4, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc42:	4829      	ldr	r0, [pc, #164]	@ (800bce8 <_vfiprintf_r+0x220>)
 800bc44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc48:	2206      	movs	r2, #6
 800bc4a:	f7f4 fac1 	bl	80001d0 <memchr>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d03f      	beq.n	800bcd2 <_vfiprintf_r+0x20a>
 800bc52:	4b26      	ldr	r3, [pc, #152]	@ (800bcec <_vfiprintf_r+0x224>)
 800bc54:	bb1b      	cbnz	r3, 800bc9e <_vfiprintf_r+0x1d6>
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	3307      	adds	r3, #7
 800bc5a:	f023 0307 	bic.w	r3, r3, #7
 800bc5e:	3308      	adds	r3, #8
 800bc60:	9303      	str	r3, [sp, #12]
 800bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc64:	443b      	add	r3, r7
 800bc66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc68:	e76a      	b.n	800bb40 <_vfiprintf_r+0x78>
 800bc6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6e:	460c      	mov	r4, r1
 800bc70:	2001      	movs	r0, #1
 800bc72:	e7a8      	b.n	800bbc6 <_vfiprintf_r+0xfe>
 800bc74:	2300      	movs	r3, #0
 800bc76:	3401      	adds	r4, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f04f 0c0a 	mov.w	ip, #10
 800bc80:	4620      	mov	r0, r4
 800bc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc86:	3a30      	subs	r2, #48	@ 0x30
 800bc88:	2a09      	cmp	r2, #9
 800bc8a:	d903      	bls.n	800bc94 <_vfiprintf_r+0x1cc>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0c6      	beq.n	800bc1e <_vfiprintf_r+0x156>
 800bc90:	9105      	str	r1, [sp, #20]
 800bc92:	e7c4      	b.n	800bc1e <_vfiprintf_r+0x156>
 800bc94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc98:	4604      	mov	r4, r0
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e7f0      	b.n	800bc80 <_vfiprintf_r+0x1b8>
 800bc9e:	ab03      	add	r3, sp, #12
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	462a      	mov	r2, r5
 800bca4:	4b12      	ldr	r3, [pc, #72]	@ (800bcf0 <_vfiprintf_r+0x228>)
 800bca6:	a904      	add	r1, sp, #16
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7fd fed5 	bl	8009a58 <_printf_float>
 800bcae:	4607      	mov	r7, r0
 800bcb0:	1c78      	adds	r0, r7, #1
 800bcb2:	d1d6      	bne.n	800bc62 <_vfiprintf_r+0x19a>
 800bcb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcb6:	07d9      	lsls	r1, r3, #31
 800bcb8:	d405      	bmi.n	800bcc6 <_vfiprintf_r+0x1fe>
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	059a      	lsls	r2, r3, #22
 800bcbe:	d402      	bmi.n	800bcc6 <_vfiprintf_r+0x1fe>
 800bcc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcc2:	f7fe fc03 	bl	800a4cc <__retarget_lock_release_recursive>
 800bcc6:	89ab      	ldrh	r3, [r5, #12]
 800bcc8:	065b      	lsls	r3, r3, #25
 800bcca:	f53f af1f 	bmi.w	800bb0c <_vfiprintf_r+0x44>
 800bcce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcd0:	e71e      	b.n	800bb10 <_vfiprintf_r+0x48>
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	462a      	mov	r2, r5
 800bcd8:	4b05      	ldr	r3, [pc, #20]	@ (800bcf0 <_vfiprintf_r+0x228>)
 800bcda:	a904      	add	r1, sp, #16
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7fe f953 	bl	8009f88 <_printf_i>
 800bce2:	e7e4      	b.n	800bcae <_vfiprintf_r+0x1e6>
 800bce4:	0800c3b2 	.word	0x0800c3b2
 800bce8:	0800c3bc 	.word	0x0800c3bc
 800bcec:	08009a59 	.word	0x08009a59
 800bcf0:	0800baa3 	.word	0x0800baa3
 800bcf4:	0800c3b8 	.word	0x0800c3b8

0800bcf8 <__sflush_r>:
 800bcf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd00:	0716      	lsls	r6, r2, #28
 800bd02:	4605      	mov	r5, r0
 800bd04:	460c      	mov	r4, r1
 800bd06:	d454      	bmi.n	800bdb2 <__sflush_r+0xba>
 800bd08:	684b      	ldr	r3, [r1, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dc02      	bgt.n	800bd14 <__sflush_r+0x1c>
 800bd0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dd48      	ble.n	800bda6 <__sflush_r+0xae>
 800bd14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	d045      	beq.n	800bda6 <__sflush_r+0xae>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd20:	682f      	ldr	r7, [r5, #0]
 800bd22:	6a21      	ldr	r1, [r4, #32]
 800bd24:	602b      	str	r3, [r5, #0]
 800bd26:	d030      	beq.n	800bd8a <__sflush_r+0x92>
 800bd28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	0759      	lsls	r1, r3, #29
 800bd2e:	d505      	bpl.n	800bd3c <__sflush_r+0x44>
 800bd30:	6863      	ldr	r3, [r4, #4]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd36:	b10b      	cbz	r3, 800bd3c <__sflush_r+0x44>
 800bd38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd40:	6a21      	ldr	r1, [r4, #32]
 800bd42:	4628      	mov	r0, r5
 800bd44:	47b0      	blx	r6
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	d106      	bne.n	800bd5a <__sflush_r+0x62>
 800bd4c:	6829      	ldr	r1, [r5, #0]
 800bd4e:	291d      	cmp	r1, #29
 800bd50:	d82b      	bhi.n	800bdaa <__sflush_r+0xb2>
 800bd52:	4a2a      	ldr	r2, [pc, #168]	@ (800bdfc <__sflush_r+0x104>)
 800bd54:	40ca      	lsrs	r2, r1
 800bd56:	07d6      	lsls	r6, r2, #31
 800bd58:	d527      	bpl.n	800bdaa <__sflush_r+0xb2>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	6062      	str	r2, [r4, #4]
 800bd5e:	04d9      	lsls	r1, r3, #19
 800bd60:	6922      	ldr	r2, [r4, #16]
 800bd62:	6022      	str	r2, [r4, #0]
 800bd64:	d504      	bpl.n	800bd70 <__sflush_r+0x78>
 800bd66:	1c42      	adds	r2, r0, #1
 800bd68:	d101      	bne.n	800bd6e <__sflush_r+0x76>
 800bd6a:	682b      	ldr	r3, [r5, #0]
 800bd6c:	b903      	cbnz	r3, 800bd70 <__sflush_r+0x78>
 800bd6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd72:	602f      	str	r7, [r5, #0]
 800bd74:	b1b9      	cbz	r1, 800bda6 <__sflush_r+0xae>
 800bd76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd7a:	4299      	cmp	r1, r3
 800bd7c:	d002      	beq.n	800bd84 <__sflush_r+0x8c>
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f7ff f9fe 	bl	800b180 <_free_r>
 800bd84:	2300      	movs	r3, #0
 800bd86:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd88:	e00d      	b.n	800bda6 <__sflush_r+0xae>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b0      	blx	r6
 800bd90:	4602      	mov	r2, r0
 800bd92:	1c50      	adds	r0, r2, #1
 800bd94:	d1c9      	bne.n	800bd2a <__sflush_r+0x32>
 800bd96:	682b      	ldr	r3, [r5, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0c6      	beq.n	800bd2a <__sflush_r+0x32>
 800bd9c:	2b1d      	cmp	r3, #29
 800bd9e:	d001      	beq.n	800bda4 <__sflush_r+0xac>
 800bda0:	2b16      	cmp	r3, #22
 800bda2:	d11e      	bne.n	800bde2 <__sflush_r+0xea>
 800bda4:	602f      	str	r7, [r5, #0]
 800bda6:	2000      	movs	r0, #0
 800bda8:	e022      	b.n	800bdf0 <__sflush_r+0xf8>
 800bdaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdae:	b21b      	sxth	r3, r3
 800bdb0:	e01b      	b.n	800bdea <__sflush_r+0xf2>
 800bdb2:	690f      	ldr	r7, [r1, #16]
 800bdb4:	2f00      	cmp	r7, #0
 800bdb6:	d0f6      	beq.n	800bda6 <__sflush_r+0xae>
 800bdb8:	0793      	lsls	r3, r2, #30
 800bdba:	680e      	ldr	r6, [r1, #0]
 800bdbc:	bf08      	it	eq
 800bdbe:	694b      	ldreq	r3, [r1, #20]
 800bdc0:	600f      	str	r7, [r1, #0]
 800bdc2:	bf18      	it	ne
 800bdc4:	2300      	movne	r3, #0
 800bdc6:	eba6 0807 	sub.w	r8, r6, r7
 800bdca:	608b      	str	r3, [r1, #8]
 800bdcc:	f1b8 0f00 	cmp.w	r8, #0
 800bdd0:	dde9      	ble.n	800bda6 <__sflush_r+0xae>
 800bdd2:	6a21      	ldr	r1, [r4, #32]
 800bdd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdd6:	4643      	mov	r3, r8
 800bdd8:	463a      	mov	r2, r7
 800bdda:	4628      	mov	r0, r5
 800bddc:	47b0      	blx	r6
 800bdde:	2800      	cmp	r0, #0
 800bde0:	dc08      	bgt.n	800bdf4 <__sflush_r+0xfc>
 800bde2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdea:	81a3      	strh	r3, [r4, #12]
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	4407      	add	r7, r0
 800bdf6:	eba8 0800 	sub.w	r8, r8, r0
 800bdfa:	e7e7      	b.n	800bdcc <__sflush_r+0xd4>
 800bdfc:	20400001 	.word	0x20400001

0800be00 <_fflush_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	690b      	ldr	r3, [r1, #16]
 800be04:	4605      	mov	r5, r0
 800be06:	460c      	mov	r4, r1
 800be08:	b913      	cbnz	r3, 800be10 <_fflush_r+0x10>
 800be0a:	2500      	movs	r5, #0
 800be0c:	4628      	mov	r0, r5
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	b118      	cbz	r0, 800be1a <_fflush_r+0x1a>
 800be12:	6a03      	ldr	r3, [r0, #32]
 800be14:	b90b      	cbnz	r3, 800be1a <_fflush_r+0x1a>
 800be16:	f7fe fa61 	bl	800a2dc <__sinit>
 800be1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0f3      	beq.n	800be0a <_fflush_r+0xa>
 800be22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be24:	07d0      	lsls	r0, r2, #31
 800be26:	d404      	bmi.n	800be32 <_fflush_r+0x32>
 800be28:	0599      	lsls	r1, r3, #22
 800be2a:	d402      	bmi.n	800be32 <_fflush_r+0x32>
 800be2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be2e:	f7fe fb4c 	bl	800a4ca <__retarget_lock_acquire_recursive>
 800be32:	4628      	mov	r0, r5
 800be34:	4621      	mov	r1, r4
 800be36:	f7ff ff5f 	bl	800bcf8 <__sflush_r>
 800be3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be3c:	07da      	lsls	r2, r3, #31
 800be3e:	4605      	mov	r5, r0
 800be40:	d4e4      	bmi.n	800be0c <_fflush_r+0xc>
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	059b      	lsls	r3, r3, #22
 800be46:	d4e1      	bmi.n	800be0c <_fflush_r+0xc>
 800be48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be4a:	f7fe fb3f 	bl	800a4cc <__retarget_lock_release_recursive>
 800be4e:	e7dd      	b.n	800be0c <_fflush_r+0xc>

0800be50 <__swbuf_r>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	460e      	mov	r6, r1
 800be54:	4614      	mov	r4, r2
 800be56:	4605      	mov	r5, r0
 800be58:	b118      	cbz	r0, 800be62 <__swbuf_r+0x12>
 800be5a:	6a03      	ldr	r3, [r0, #32]
 800be5c:	b90b      	cbnz	r3, 800be62 <__swbuf_r+0x12>
 800be5e:	f7fe fa3d 	bl	800a2dc <__sinit>
 800be62:	69a3      	ldr	r3, [r4, #24]
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	071a      	lsls	r2, r3, #28
 800be6a:	d501      	bpl.n	800be70 <__swbuf_r+0x20>
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	b943      	cbnz	r3, 800be82 <__swbuf_r+0x32>
 800be70:	4621      	mov	r1, r4
 800be72:	4628      	mov	r0, r5
 800be74:	f000 f82a 	bl	800becc <__swsetup_r>
 800be78:	b118      	cbz	r0, 800be82 <__swbuf_r+0x32>
 800be7a:	f04f 37ff 	mov.w	r7, #4294967295
 800be7e:	4638      	mov	r0, r7
 800be80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	6922      	ldr	r2, [r4, #16]
 800be86:	1a98      	subs	r0, r3, r2
 800be88:	6963      	ldr	r3, [r4, #20]
 800be8a:	b2f6      	uxtb	r6, r6
 800be8c:	4283      	cmp	r3, r0
 800be8e:	4637      	mov	r7, r6
 800be90:	dc05      	bgt.n	800be9e <__swbuf_r+0x4e>
 800be92:	4621      	mov	r1, r4
 800be94:	4628      	mov	r0, r5
 800be96:	f7ff ffb3 	bl	800be00 <_fflush_r>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d1ed      	bne.n	800be7a <__swbuf_r+0x2a>
 800be9e:	68a3      	ldr	r3, [r4, #8]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	60a3      	str	r3, [r4, #8]
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	6022      	str	r2, [r4, #0]
 800beaa:	701e      	strb	r6, [r3, #0]
 800beac:	6962      	ldr	r2, [r4, #20]
 800beae:	1c43      	adds	r3, r0, #1
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d004      	beq.n	800bebe <__swbuf_r+0x6e>
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	07db      	lsls	r3, r3, #31
 800beb8:	d5e1      	bpl.n	800be7e <__swbuf_r+0x2e>
 800beba:	2e0a      	cmp	r6, #10
 800bebc:	d1df      	bne.n	800be7e <__swbuf_r+0x2e>
 800bebe:	4621      	mov	r1, r4
 800bec0:	4628      	mov	r0, r5
 800bec2:	f7ff ff9d 	bl	800be00 <_fflush_r>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d0d9      	beq.n	800be7e <__swbuf_r+0x2e>
 800beca:	e7d6      	b.n	800be7a <__swbuf_r+0x2a>

0800becc <__swsetup_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4b29      	ldr	r3, [pc, #164]	@ (800bf74 <__swsetup_r+0xa8>)
 800bed0:	4605      	mov	r5, r0
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	460c      	mov	r4, r1
 800bed6:	b118      	cbz	r0, 800bee0 <__swsetup_r+0x14>
 800bed8:	6a03      	ldr	r3, [r0, #32]
 800beda:	b90b      	cbnz	r3, 800bee0 <__swsetup_r+0x14>
 800bedc:	f7fe f9fe 	bl	800a2dc <__sinit>
 800bee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bee4:	0719      	lsls	r1, r3, #28
 800bee6:	d422      	bmi.n	800bf2e <__swsetup_r+0x62>
 800bee8:	06da      	lsls	r2, r3, #27
 800beea:	d407      	bmi.n	800befc <__swsetup_r+0x30>
 800beec:	2209      	movs	r2, #9
 800beee:	602a      	str	r2, [r5, #0]
 800bef0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bef4:	81a3      	strh	r3, [r4, #12]
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295
 800befa:	e033      	b.n	800bf64 <__swsetup_r+0x98>
 800befc:	0758      	lsls	r0, r3, #29
 800befe:	d512      	bpl.n	800bf26 <__swsetup_r+0x5a>
 800bf00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf02:	b141      	cbz	r1, 800bf16 <__swsetup_r+0x4a>
 800bf04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	d002      	beq.n	800bf12 <__swsetup_r+0x46>
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f7ff f937 	bl	800b180 <_free_r>
 800bf12:	2300      	movs	r3, #0
 800bf14:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6063      	str	r3, [r4, #4]
 800bf22:	6923      	ldr	r3, [r4, #16]
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f043 0308 	orr.w	r3, r3, #8
 800bf2c:	81a3      	strh	r3, [r4, #12]
 800bf2e:	6923      	ldr	r3, [r4, #16]
 800bf30:	b94b      	cbnz	r3, 800bf46 <__swsetup_r+0x7a>
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf3c:	d003      	beq.n	800bf46 <__swsetup_r+0x7a>
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4628      	mov	r0, r5
 800bf42:	f000 f8c1 	bl	800c0c8 <__smakebuf_r>
 800bf46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf4a:	f013 0201 	ands.w	r2, r3, #1
 800bf4e:	d00a      	beq.n	800bf66 <__swsetup_r+0x9a>
 800bf50:	2200      	movs	r2, #0
 800bf52:	60a2      	str	r2, [r4, #8]
 800bf54:	6962      	ldr	r2, [r4, #20]
 800bf56:	4252      	negs	r2, r2
 800bf58:	61a2      	str	r2, [r4, #24]
 800bf5a:	6922      	ldr	r2, [r4, #16]
 800bf5c:	b942      	cbnz	r2, 800bf70 <__swsetup_r+0xa4>
 800bf5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf62:	d1c5      	bne.n	800bef0 <__swsetup_r+0x24>
 800bf64:	bd38      	pop	{r3, r4, r5, pc}
 800bf66:	0799      	lsls	r1, r3, #30
 800bf68:	bf58      	it	pl
 800bf6a:	6962      	ldrpl	r2, [r4, #20]
 800bf6c:	60a2      	str	r2, [r4, #8]
 800bf6e:	e7f4      	b.n	800bf5a <__swsetup_r+0x8e>
 800bf70:	2000      	movs	r0, #0
 800bf72:	e7f7      	b.n	800bf64 <__swsetup_r+0x98>
 800bf74:	20000108 	.word	0x20000108

0800bf78 <_sbrk_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	@ (800bf94 <_sbrk_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f5 fb8a 	bl	800169c <_sbrk>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_sbrk_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_sbrk_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	200021a0 	.word	0x200021a0

0800bf98 <memcpy>:
 800bf98:	440a      	add	r2, r1
 800bf9a:	4291      	cmp	r1, r2
 800bf9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfa0:	d100      	bne.n	800bfa4 <memcpy+0xc>
 800bfa2:	4770      	bx	lr
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfae:	4291      	cmp	r1, r2
 800bfb0:	d1f9      	bne.n	800bfa6 <memcpy+0xe>
 800bfb2:	bd10      	pop	{r4, pc}

0800bfb4 <__assert_func>:
 800bfb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfb6:	4614      	mov	r4, r2
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4b09      	ldr	r3, [pc, #36]	@ (800bfe0 <__assert_func+0x2c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	68d8      	ldr	r0, [r3, #12]
 800bfc2:	b14c      	cbz	r4, 800bfd8 <__assert_func+0x24>
 800bfc4:	4b07      	ldr	r3, [pc, #28]	@ (800bfe4 <__assert_func+0x30>)
 800bfc6:	9100      	str	r1, [sp, #0]
 800bfc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfcc:	4906      	ldr	r1, [pc, #24]	@ (800bfe8 <__assert_func+0x34>)
 800bfce:	462b      	mov	r3, r5
 800bfd0:	f000 f842 	bl	800c058 <fiprintf>
 800bfd4:	f000 f8d6 	bl	800c184 <abort>
 800bfd8:	4b04      	ldr	r3, [pc, #16]	@ (800bfec <__assert_func+0x38>)
 800bfda:	461c      	mov	r4, r3
 800bfdc:	e7f3      	b.n	800bfc6 <__assert_func+0x12>
 800bfde:	bf00      	nop
 800bfe0:	20000108 	.word	0x20000108
 800bfe4:	0800c3cd 	.word	0x0800c3cd
 800bfe8:	0800c3da 	.word	0x0800c3da
 800bfec:	0800c408 	.word	0x0800c408

0800bff0 <_calloc_r>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	fba1 5402 	umull	r5, r4, r1, r2
 800bff6:	b934      	cbnz	r4, 800c006 <_calloc_r+0x16>
 800bff8:	4629      	mov	r1, r5
 800bffa:	f7ff f935 	bl	800b268 <_malloc_r>
 800bffe:	4606      	mov	r6, r0
 800c000:	b928      	cbnz	r0, 800c00e <_calloc_r+0x1e>
 800c002:	4630      	mov	r0, r6
 800c004:	bd70      	pop	{r4, r5, r6, pc}
 800c006:	220c      	movs	r2, #12
 800c008:	6002      	str	r2, [r0, #0]
 800c00a:	2600      	movs	r6, #0
 800c00c:	e7f9      	b.n	800c002 <_calloc_r+0x12>
 800c00e:	462a      	mov	r2, r5
 800c010:	4621      	mov	r1, r4
 800c012:	f7fe f9dc 	bl	800a3ce <memset>
 800c016:	e7f4      	b.n	800c002 <_calloc_r+0x12>

0800c018 <__ascii_mbtowc>:
 800c018:	b082      	sub	sp, #8
 800c01a:	b901      	cbnz	r1, 800c01e <__ascii_mbtowc+0x6>
 800c01c:	a901      	add	r1, sp, #4
 800c01e:	b142      	cbz	r2, 800c032 <__ascii_mbtowc+0x1a>
 800c020:	b14b      	cbz	r3, 800c036 <__ascii_mbtowc+0x1e>
 800c022:	7813      	ldrb	r3, [r2, #0]
 800c024:	600b      	str	r3, [r1, #0]
 800c026:	7812      	ldrb	r2, [r2, #0]
 800c028:	1e10      	subs	r0, r2, #0
 800c02a:	bf18      	it	ne
 800c02c:	2001      	movne	r0, #1
 800c02e:	b002      	add	sp, #8
 800c030:	4770      	bx	lr
 800c032:	4610      	mov	r0, r2
 800c034:	e7fb      	b.n	800c02e <__ascii_mbtowc+0x16>
 800c036:	f06f 0001 	mvn.w	r0, #1
 800c03a:	e7f8      	b.n	800c02e <__ascii_mbtowc+0x16>

0800c03c <__ascii_wctomb>:
 800c03c:	4603      	mov	r3, r0
 800c03e:	4608      	mov	r0, r1
 800c040:	b141      	cbz	r1, 800c054 <__ascii_wctomb+0x18>
 800c042:	2aff      	cmp	r2, #255	@ 0xff
 800c044:	d904      	bls.n	800c050 <__ascii_wctomb+0x14>
 800c046:	228a      	movs	r2, #138	@ 0x8a
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	f04f 30ff 	mov.w	r0, #4294967295
 800c04e:	4770      	bx	lr
 800c050:	700a      	strb	r2, [r1, #0]
 800c052:	2001      	movs	r0, #1
 800c054:	4770      	bx	lr
	...

0800c058 <fiprintf>:
 800c058:	b40e      	push	{r1, r2, r3}
 800c05a:	b503      	push	{r0, r1, lr}
 800c05c:	4601      	mov	r1, r0
 800c05e:	ab03      	add	r3, sp, #12
 800c060:	4805      	ldr	r0, [pc, #20]	@ (800c078 <fiprintf+0x20>)
 800c062:	f853 2b04 	ldr.w	r2, [r3], #4
 800c066:	6800      	ldr	r0, [r0, #0]
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	f7ff fd2d 	bl	800bac8 <_vfiprintf_r>
 800c06e:	b002      	add	sp, #8
 800c070:	f85d eb04 	ldr.w	lr, [sp], #4
 800c074:	b003      	add	sp, #12
 800c076:	4770      	bx	lr
 800c078:	20000108 	.word	0x20000108

0800c07c <__swhatbuf_r>:
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	460c      	mov	r4, r1
 800c080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c084:	2900      	cmp	r1, #0
 800c086:	b096      	sub	sp, #88	@ 0x58
 800c088:	4615      	mov	r5, r2
 800c08a:	461e      	mov	r6, r3
 800c08c:	da0d      	bge.n	800c0aa <__swhatbuf_r+0x2e>
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c094:	f04f 0100 	mov.w	r1, #0
 800c098:	bf14      	ite	ne
 800c09a:	2340      	movne	r3, #64	@ 0x40
 800c09c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	6031      	str	r1, [r6, #0]
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	b016      	add	sp, #88	@ 0x58
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	466a      	mov	r2, sp
 800c0ac:	f000 f848 	bl	800c140 <_fstat_r>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	dbec      	blt.n	800c08e <__swhatbuf_r+0x12>
 800c0b4:	9901      	ldr	r1, [sp, #4]
 800c0b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0be:	4259      	negs	r1, r3
 800c0c0:	4159      	adcs	r1, r3
 800c0c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0c6:	e7eb      	b.n	800c0a0 <__swhatbuf_r+0x24>

0800c0c8 <__smakebuf_r>:
 800c0c8:	898b      	ldrh	r3, [r1, #12]
 800c0ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0cc:	079d      	lsls	r5, r3, #30
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	d507      	bpl.n	800c0e4 <__smakebuf_r+0x1c>
 800c0d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	6123      	str	r3, [r4, #16]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	6163      	str	r3, [r4, #20]
 800c0e0:	b003      	add	sp, #12
 800c0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0e4:	ab01      	add	r3, sp, #4
 800c0e6:	466a      	mov	r2, sp
 800c0e8:	f7ff ffc8 	bl	800c07c <__swhatbuf_r>
 800c0ec:	9f00      	ldr	r7, [sp, #0]
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7ff f8b8 	bl	800b268 <_malloc_r>
 800c0f8:	b948      	cbnz	r0, 800c10e <__smakebuf_r+0x46>
 800c0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fe:	059a      	lsls	r2, r3, #22
 800c100:	d4ee      	bmi.n	800c0e0 <__smakebuf_r+0x18>
 800c102:	f023 0303 	bic.w	r3, r3, #3
 800c106:	f043 0302 	orr.w	r3, r3, #2
 800c10a:	81a3      	strh	r3, [r4, #12]
 800c10c:	e7e2      	b.n	800c0d4 <__smakebuf_r+0xc>
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	6020      	str	r0, [r4, #0]
 800c112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c116:	81a3      	strh	r3, [r4, #12]
 800c118:	9b01      	ldr	r3, [sp, #4]
 800c11a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c11e:	b15b      	cbz	r3, 800c138 <__smakebuf_r+0x70>
 800c120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c124:	4630      	mov	r0, r6
 800c126:	f000 f81d 	bl	800c164 <_isatty_r>
 800c12a:	b128      	cbz	r0, 800c138 <__smakebuf_r+0x70>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f023 0303 	bic.w	r3, r3, #3
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	431d      	orrs	r5, r3
 800c13c:	81a5      	strh	r5, [r4, #12]
 800c13e:	e7cf      	b.n	800c0e0 <__smakebuf_r+0x18>

0800c140 <_fstat_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d07      	ldr	r5, [pc, #28]	@ (800c160 <_fstat_r+0x20>)
 800c144:	2300      	movs	r3, #0
 800c146:	4604      	mov	r4, r0
 800c148:	4608      	mov	r0, r1
 800c14a:	4611      	mov	r1, r2
 800c14c:	602b      	str	r3, [r5, #0]
 800c14e:	f7f5 fa7d 	bl	800164c <_fstat>
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	d102      	bne.n	800c15c <_fstat_r+0x1c>
 800c156:	682b      	ldr	r3, [r5, #0]
 800c158:	b103      	cbz	r3, 800c15c <_fstat_r+0x1c>
 800c15a:	6023      	str	r3, [r4, #0]
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	bf00      	nop
 800c160:	200021a0 	.word	0x200021a0

0800c164 <_isatty_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d06      	ldr	r5, [pc, #24]	@ (800c180 <_isatty_r+0x1c>)
 800c168:	2300      	movs	r3, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	602b      	str	r3, [r5, #0]
 800c170:	f7f5 fa7c 	bl	800166c <_isatty>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_isatty_r+0x1a>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_isatty_r+0x1a>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	200021a0 	.word	0x200021a0

0800c184 <abort>:
 800c184:	b508      	push	{r3, lr}
 800c186:	2006      	movs	r0, #6
 800c188:	f000 f82c 	bl	800c1e4 <raise>
 800c18c:	2001      	movs	r0, #1
 800c18e:	f7f5 fa29 	bl	80015e4 <_exit>

0800c192 <_raise_r>:
 800c192:	291f      	cmp	r1, #31
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4605      	mov	r5, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	d904      	bls.n	800c1a6 <_raise_r+0x14>
 800c19c:	2316      	movs	r3, #22
 800c19e:	6003      	str	r3, [r0, #0]
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	bd38      	pop	{r3, r4, r5, pc}
 800c1a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1a8:	b112      	cbz	r2, 800c1b0 <_raise_r+0x1e>
 800c1aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ae:	b94b      	cbnz	r3, 800c1c4 <_raise_r+0x32>
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f000 f831 	bl	800c218 <_getpid_r>
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4601      	mov	r1, r0
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c0:	f000 b818 	b.w	800c1f4 <_kill_r>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d00a      	beq.n	800c1de <_raise_r+0x4c>
 800c1c8:	1c59      	adds	r1, r3, #1
 800c1ca:	d103      	bne.n	800c1d4 <_raise_r+0x42>
 800c1cc:	2316      	movs	r3, #22
 800c1ce:	6003      	str	r3, [r0, #0]
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	e7e7      	b.n	800c1a4 <_raise_r+0x12>
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4798      	blx	r3
 800c1de:	2000      	movs	r0, #0
 800c1e0:	e7e0      	b.n	800c1a4 <_raise_r+0x12>
	...

0800c1e4 <raise>:
 800c1e4:	4b02      	ldr	r3, [pc, #8]	@ (800c1f0 <raise+0xc>)
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f7ff bfd2 	b.w	800c192 <_raise_r>
 800c1ee:	bf00      	nop
 800c1f0:	20000108 	.word	0x20000108

0800c1f4 <_kill_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	@ (800c214 <_kill_r+0x20>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	4611      	mov	r1, r2
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	f7f5 f9df 	bl	80015c4 <_kill>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	d102      	bne.n	800c210 <_kill_r+0x1c>
 800c20a:	682b      	ldr	r3, [r5, #0]
 800c20c:	b103      	cbz	r3, 800c210 <_kill_r+0x1c>
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	bd38      	pop	{r3, r4, r5, pc}
 800c212:	bf00      	nop
 800c214:	200021a0 	.word	0x200021a0

0800c218 <_getpid_r>:
 800c218:	f7f5 b9cc 	b.w	80015b4 <_getpid>

0800c21c <_init>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	bf00      	nop
 800c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c222:	bc08      	pop	{r3}
 800c224:	469e      	mov	lr, r3
 800c226:	4770      	bx	lr

0800c228 <_fini>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	bf00      	nop
 800c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22e:	bc08      	pop	{r3}
 800c230:	469e      	mov	lr, r3
 800c232:	4770      	bx	lr
