
BareMetal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c154  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800c2e8  0800c2e8  0000d2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6e4  0800c6e4  0000e2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c6e4  0800c6e4  0000d6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6ec  0800c6ec  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6ec  0800c6ec  0000d6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6f0  0800c6f0  0000d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c6f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2c4  2**0
                  CONTENTS
 10 .bss          00001ff0  200002c4  200002c4  0000e2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022b4  200022b4  0000e2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017337  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004232  00000000  00000000  0002562b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  00029860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ffe  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002697b  00000000  00000000  0002bd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b86f  00000000  00000000  00052701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe26  00000000  00000000  0006df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149d96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000668c  00000000  00000000  00149ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00150468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2cc 	.word	0x0800c2cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c2cc 	.word	0x0800c2cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <enterStop>:
}state_te;

static state_te st = ST_RUN;

static void enterStop(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2); 	//Pause LED timer
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <enterStop+0x28>)
 8000eda:	f004 f8c9 	bl	8005070 <HAL_TIM_Base_Stop_IT>
	HAL_SuspendTick();				//stop SysTick so it won't wake us
 8000ede:	f000 fd5b 	bl	8001998 <HAL_SuspendTick>

	//Enter STOP with main regulator ON, wake on any EXTI
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f003 fb63 	bl	80045b0 <HAL_PWR_EnterSTOPMode>

	//MCU Wakes here
	SystemClock_Config();	//Re-enable PLLS
 8000eea:	f000 f8e5 	bl	80010b8 <SystemClock_Config>
	HAL_ResumeTick();
 8000eee:	f000 fd63 	bl	80019b8 <HAL_ResumeTick>
	HAL_TIM_Base_Start_IT(&htim2);
 8000ef2:	4802      	ldr	r0, [pc, #8]	@ (8000efc <enterStop+0x28>)
 8000ef4:	f004 f84c 	bl	8004f90 <HAL_TIM_Base_Start_IT>
	//st = ST_RUN;
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200003b0 	.word	0x200003b0

08000f00 <fsmEventButton>:

void fsmEventButton(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	st = (st == ST_RUN) ? ST_STOP : ST_RUN;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <fsmEventButton+0x24>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <fsmEventButton+0x24>)
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200002e0 	.word	0x200002e0

08000f28 <fsmRun>:

void fsmRun(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	if(st == ST_STOP){
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <fsmRun+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d104      	bne.n	8000f3e <fsmRun+0x16>
		st = ST_RUN; //Sleep once per press
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <fsmRun+0x1c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
		enterStop();
 8000f3a:	f7ff ffcb 	bl	8000ed4 <enterStop>
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002e0 	.word	0x200002e0

08000f48 <schedulerRun>:
	if(count < MAX_TASKS)
		tasks[count++] = task;
}

void schedulerRun(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8000f4e:	f000 fcf3 	bl	8001938 <HAL_GetTick>
 8000f52:	6038      	str	r0, [r7, #0]

	for(uint8_t i = 0; i < count; ++i){
 8000f54:	2300      	movs	r3, #0
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	e01c      	b.n	8000f94 <schedulerRun+0x4c>
		if((now - tasks[i]->lastMS) >= tasks[i]->periodMS){
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <schedulerRun+0x60>)
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	490f      	ldr	r1, [pc, #60]	@ (8000fa8 <schedulerRun+0x60>)
 8000f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d30b      	bcc.n	8000f8e <schedulerRun+0x46>
			tasks[i]->lastMS = now;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <schedulerRun+0x60>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	605a      	str	r2, [r3, #4]
			tasks[i]->cb();
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <schedulerRun+0x60>)
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4798      	blx	r3
	for(uint8_t i = 0; i < count; ++i){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	3301      	adds	r3, #1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <schedulerRun+0x64>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3dd      	bcc.n	8000f5a <schedulerRun+0x12>
		}
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200002e4 	.word	0x200002e4
 8000fac:	20000304 	.word	0x20000304

08000fb0 <blinkCB>:
#include "main.h"
#include "task_blink.h"
#include "scheduler.h"

void blinkCB(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_1_Pin);
 8000fb4:	2140      	movs	r1, #64	@ 0x40
 8000fb6:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <blinkCB+0x10>)
 8000fb8:	f002 f875 	bl	80030a6 <HAL_GPIO_TogglePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <tempCB>:
{
    printf("T = %.1f °C\r\n", temperature);
}

void tempCB(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < sizeof(adcBuf) / 2; ++i)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	74fb      	strb	r3, [r7, #19]
 8000fd2:	e00a      	b.n	8000fea <tempCB+0x26>
		sum += adcBuf[i];
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <tempCB+0x90>)
 8000fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < sizeof(adcBuf) / 2; ++i)
 8000fe4:	7cfb      	ldrb	r3, [r7, #19]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	74fb      	strb	r3, [r7, #19]
 8000fea:	7cfb      	ldrb	r3, [r7, #19]
 8000fec:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fee:	d9f1      	bls.n	8000fd4 <tempCB+0x10>
	uint16_t avg = sum / sizeof(adcBuf) / 2;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	823b      	strh	r3, [r7, #16]

	/* Convert to °C  (datasheet formula) */
	float V25 = 0.76f;          // V at 25 °C
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <tempCB+0x94>)
 8000ff8:	60fb      	str	r3, [r7, #12]
	float AvgSlope = 0.0025f;   // V/°C
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <tempCB+0x98>)
 8000ffc:	60bb      	str	r3, [r7, #8]
	float Vsense = (avg * 3.3f) / 4095.0f;
 8000ffe:	8a3b      	ldrh	r3, [r7, #16]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001060 <tempCB+0x9c>
 800100c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001010:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001064 <tempCB+0xa0>
 8001014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001018:	edc7 7a01 	vstr	s15, [r7, #4]
	float vTemp  = ((V25 - Vsense) / AvgSlope) + 25.0f;
 800101c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001028:	ed97 7a02 	vldr	s14, [r7, #8]
 800102c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001030:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001038:	edc7 7a00 	vstr	s15, [r7]
	printf("Temperature = %1.f C\r\n", vTemp);
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f7ff fa83 	bl	8000548 <__aeabi_f2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4808      	ldr	r0, [pc, #32]	@ (8001068 <tempCB+0xa4>)
 8001048:	f009 f9c4 	bl	800a3d4 <iprintf>
	/* Set a watch-expression on tempC in debugger */
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003f8 	.word	0x200003f8
 8001058:	3f428f5c 	.word	0x3f428f5c
 800105c:	3b23d70a 	.word	0x3b23d70a
 8001060:	40533333 	.word	0x40533333
 8001064:	457ff000 	.word	0x457ff000
 8001068:	0800c2f8 	.word	0x0800c2f8

0800106c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001070:	f000 fbfc 	bl	800186c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001074:	f000 f820 	bl	80010b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001078:	f000 f948 	bl	800130c <MX_GPIO_Init>
	MX_DMA_Init();
 800107c:	f000 f926 	bl	80012cc <MX_DMA_Init>
	MX_TIM2_Init();
 8001080:	f000 f8d6 	bl	8001230 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001084:	f000 f882 	bl	800118c <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 8001088:	f007 ff0e 	bl	8008ea8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800108c:	4807      	ldr	r0, [pc, #28]	@ (80010ac <main+0x40>)
 800108e:	f003 ff7f 	bl	8004f90 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, sizeof(adcBuf) / 2);
 8001092:	2240      	movs	r2, #64	@ 0x40
 8001094:	4906      	ldr	r1, [pc, #24]	@ (80010b0 <main+0x44>)
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <main+0x48>)
 8001098:	f000 fdf2 	bl	8001c80 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		schedulerRun();
 800109c:	f7ff ff54 	bl	8000f48 <schedulerRun>
		fsmRun();
 80010a0:	f7ff ff42 	bl	8000f28 <fsmRun>
		__WFI();                    // Wait-For-Interrupt (optional)
 80010a4:	bf30      	wfi
		schedulerRun();
 80010a6:	bf00      	nop
 80010a8:	e7f8      	b.n	800109c <main+0x30>
 80010aa:	bf00      	nop
 80010ac:	200003b0 	.word	0x200003b0
 80010b0:	200003f8 	.word	0x200003f8
 80010b4:	20000308 	.word	0x20000308

080010b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	@ 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f009 f9d9 	bl	800a47e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a27      	ldr	r2, [pc, #156]	@ (8001184 <SystemClock_Config+0xcc>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <SystemClock_Config+0xd0>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001118:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800112c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001130:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001136:	2307      	movs	r3, #7
 8001138:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fa66 	bl	8004610 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800114a:	f000 f983 	bl	8001454 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800115e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2105      	movs	r1, #5
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fcc7 	bl	8004b00 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001178:	f000 f96c 	bl	8001454 <Error_Handler>
	}
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	@ 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40007000 	.word	0x40007000

0800118c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	@ (8001228 <MX_ADC1_Init+0x9c>)
 80011a2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011aa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011ce:	4a17      	ldr	r2, [pc, #92]	@ (800122c <MX_ADC1_Init+0xa0>)
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011da:	2201      	movs	r2, #1
 80011dc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_ADC1_Init+0x98>)
 80011ee:	f000 fbf3 	bl	80019d8 <HAL_ADC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80011f8:	f000 f92c 	bl	8001454 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011fc:	2310      	movs	r3, #16
 80011fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001204:	2307      	movs	r3, #7
 8001206:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_ADC1_Init+0x98>)
 800120e:	f000 fe69 	bl	8001ee4 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001218:	f000 f91c 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000308 	.word	0x20000308
 8001228:	40012000 	.word	0x40012000
 800122c:	0f000001 	.word	0x0f000001

08001230 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <MX_TIM2_Init+0x98>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8399;
 8001254:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001256:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800125a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_TIM2_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999;
 8001262:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001264:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001268:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <MX_TIM2_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001276:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001278:	f003 fe3a 	bl	8004ef0 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001282:	f000 f8e7 	bl	8001454 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <MX_TIM2_Init+0x98>)
 8001294:	f004 f80b 	bl	80052ae <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800129e:	f000 f8d9 	bl	8001454 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_TIM2_Init+0x98>)
 80012b0:	f004 fa2c 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80012ba:	f000 f8cb 	bl	8001454 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200003b0 	.word	0x200003b0

080012cc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <MX_DMA_Init+0x3c>)
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_DMA_Init+0x3c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2038      	movs	r0, #56	@ 0x38
 80012f4:	f001 f97b 	bl	80025ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f8:	2038      	movs	r0, #56	@ 0x38
 80012fa:	f001 f994 	bl	8002626 <HAL_NVIC_EnableIRQ>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a2f      	ldr	r2, [pc, #188]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_GPIO_Init+0xdc>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	21c0      	movs	r1, #192	@ 0xc0
 800137a:	481c      	ldr	r0, [pc, #112]	@ (80013ec <MX_GPIO_Init+0xe0>)
 800137c:	f001 fe7a 	bl	8003074 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Button_K1_EXT_Pin */
	GPIO_InitStruct.Pin = Button_K1_EXT_Pin;
 8001380:	2308      	movs	r3, #8
 8001382:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001384:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001388:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Button_K1_EXT_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4816      	ldr	r0, [pc, #88]	@ (80013f0 <MX_GPIO_Init+0xe4>)
 8001396:	f001 fcd1 	bl	8002d3c <HAL_GPIO_Init>

	/*Configure GPIO pin : Button_K0_Pin */
	GPIO_InitStruct.Pin = Button_K0_Pin;
 800139a:	2310      	movs	r3, #16
 800139c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Button_K0_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4810      	ldr	r0, [pc, #64]	@ (80013f0 <MX_GPIO_Init+0xe4>)
 80013ae:	f001 fcc5 	bl	8002d3c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80013b2:	23c0      	movs	r3, #192	@ 0xc0
 80013b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <MX_GPIO_Init+0xe0>)
 80013ca:	f001 fcb7 	bl	8002d3c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2009      	movs	r0, #9
 80013d4:	f001 f90b 	bl	80025ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013d8:	2009      	movs	r0, #9
 80013da:	f001 f924 	bl	8002626 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)      // make sure it’s our timer
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		//HAL_GPIO_TogglePin(GPIOA, LED_1_Pin);
		blinkCB(); // flip LED
 8001406:	f7ff fdd3 	bl	8000fb0 <blinkCB>
	}
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_ADC_ConvCpltCallback+0x20>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_ADC_ConvCpltCallback+0x16>
		tempCB();
 8001426:	f7ff fdcd 	bl	8000fc4 <tempCB>
	}
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40012000 	.word	0x40012000

08001438 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_3) //PE3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d101      	bne.n	800144c <HAL_GPIO_EXTI_Callback+0x14>
		fsmEventButton();	//flip flag
 8001448:	f7ff fd5a 	bl	8000f00 <fsmEventButton>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <HAL_ADC_MspInit+0xa8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d145      	bne.n	800154e <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <HAL_ADC_MspInit+0xac>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_ADC_MspInit+0xac>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_ADC_MspInit+0xac>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 80014e0:	4a20      	ldr	r2, [pc, #128]	@ (8001564 <HAL_ADC_MspInit+0xb4>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 80014f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 8001500:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001504:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 8001508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800150c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 8001510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001514:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001522:	480f      	ldr	r0, [pc, #60]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 8001524:	f001 f89a 	bl	800265c <HAL_DMA_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800152e:	f7ff ff91 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 8001536:	639a      	str	r2, [r3, #56]	@ 0x38
 8001538:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <HAL_ADC_MspInit+0xb0>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2012      	movs	r0, #18
 8001544:	f001 f853 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001548:	2012      	movs	r0, #18
 800154a:	f001 f86c 	bl	8002626 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40012000 	.word	0x40012000
 800155c:	40023800 	.word	0x40023800
 8001560:	20000350 	.word	0x20000350
 8001564:	40026410 	.word	0x40026410

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001578:	d115      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201c      	movs	r0, #28
 800159c:	f001 f827 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a0:	201c      	movs	r0, #28
 80015a2:	f001 f840 	bl	8002626 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f981 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_K1_EXT_Pin);
 8001616:	2008      	movs	r0, #8
 8001618:	f001 fd60 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <ADC_IRQHandler+0x10>)
 8001626:	f000 fa1a 	bl	8001a5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000308 	.word	0x20000308

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM2_IRQHandler+0x10>)
 800163a:	f003 fd48 	bl	80050ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003b0 	.word	0x200003b0

08001648 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA2_Stream0_IRQHandler+0x10>)
 800164e:	f001 f90b 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000350 	.word	0x20000350

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f001 fe97 	bl	8003394 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20001a64 	.word	0x20001a64

08001670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_kill>:

int _kill(int pid, int sig)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800168a:	f008 ff4b 	bl	800a524 <__errno>
 800168e:	4603      	mov	r3, r0
 8001690:	2216      	movs	r2, #22
 8001692:	601a      	str	r2, [r3, #0]
  return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_exit>:

void _exit (int status)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ffe7 	bl	8001680 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016b2:	bf00      	nop
 80016b4:	e7fd      	b.n	80016b2 <_exit+0x12>

080016b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e00a      	b.n	80016de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c8:	f3af 8000 	nop.w
 80016cc:	4601      	mov	r1, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	b2ca      	uxtb	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbf0      	blt.n	80016c8 <_read+0x12>
  }

  return len;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_close>:
//  }
//  return len;
//}

int _close(int file)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001718:	605a      	str	r2, [r3, #4]
  return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_isatty>:

int _isatty(int file)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_write>:
  return -1;
}

// syscalls.c
int _write(int fd, char *buf, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	if(fd == 1 || fd == 2){ //stdout or stderr
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d002      	beq.n	8001770 <_write+0x18>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d105      	bne.n	800177c <_write+0x24>
		CDC_Transmit_NonBlocking((uint8_t *)buf, len);
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f007 fc68 	bl	8009048 <CDC_Transmit_NonBlocking>
		return len;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	e000      	b.n	800177e <_write+0x26>
	}
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f008 feb4 	bl	800a524 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000478 	.word	0x20000478
 80017f0:	200022b8 	.word	0x200022b8

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f008 fe73 	bl	800a530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fc0f 	bl	800106c <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800185c:	0800c6f4 	.word	0x0800c6f4
  ldr r2, =_sbss
 8001860:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001864:	200022b4 	.word	0x200022b4

08001868 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <CAN1_RX0_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 fe9f 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fdde 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 feb7 	bl	8002642 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 fe7f 	bl	80025ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	2000047c 	.word	0x2000047c

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000047c 	.word	0x2000047c

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_SuspendTick+0x1c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <HAL_SuspendTick+0x1c>)
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_ResumeTick+0x1c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <HAL_ResumeTick+0x1c>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e033      	b.n	8001a56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fd5a 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a1e:	f023 0302 	bic.w	r3, r3, #2
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fb7c 	bl	8002128 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a46:	e001      	b.n	8001a4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d049      	beq.n	8001b28 <HAL_ADC_IRQHandler+0xca>
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d046      	beq.n	8001b28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d12b      	bne.n	8001b18 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d127      	bne.n	8001b18 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d119      	bne.n	8001b18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0220 	bic.w	r2, r2, #32
 8001af2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fc7b 	bl	8001414 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f06f 0212 	mvn.w	r2, #18
 8001b26:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d057      	beq.n	8001bee <HAL_ADC_IRQHandler+0x190>
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d054      	beq.n	8001bee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d139      	bne.n	8001bde <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d12b      	bne.n	8001bde <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d124      	bne.n	8001bde <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d11d      	bne.n	8001bde <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d119      	bne.n	8001bde <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bb8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fc20 	bl	8002424 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 020c 	mvn.w	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d017      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x1d6>
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d014      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10d      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f949 	bl	8001ebc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0201 	mvn.w	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d015      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x218>
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d012      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0220 	mvn.w	r2, #32
 8001c64:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f932 	bl	8001ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0220 	mvn.w	r2, #32
 8001c74:	601a      	str	r2, [r3, #0]
  }
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Start_DMA+0x22>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e0eb      	b.n	8001e7a <HAL_ADC_Start_DMA+0x1fa>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d018      	beq.n	8001cea <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc8:	4b6e      	ldr	r3, [pc, #440]	@ (8001e84 <HAL_ADC_Start_DMA+0x204>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e88 <HAL_ADC_Start_DMA+0x208>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0c9a      	lsrs	r2, r3, #18
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf8:	d107      	bne.n	8001d0a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d08:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	f040 80a3 	bne.w	8001e60 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d58:	d106      	bne.n	8001d68 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f023 0206 	bic.w	r2, r3, #6
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d66:	e002      	b.n	8001d6e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d76:	4b45      	ldr	r3, [pc, #276]	@ (8001e8c <HAL_ADC_Start_DMA+0x20c>)
 8001d78:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7e:	4a44      	ldr	r2, [pc, #272]	@ (8001e90 <HAL_ADC_Start_DMA+0x210>)
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d86:	4a43      	ldr	r2, [pc, #268]	@ (8001e94 <HAL_ADC_Start_DMA+0x214>)
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8e:	4a42      	ldr	r2, [pc, #264]	@ (8001e98 <HAL_ADC_Start_DMA+0x218>)
 8001d90:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001daa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	334c      	adds	r3, #76	@ 0x4c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f000 fcf4 	bl	80027b8 <HAL_DMA_Start_IT>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d12a      	bne.n	8001e36 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2d      	ldr	r2, [pc, #180]	@ (8001e9c <HAL_ADC_Start_DMA+0x21c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d015      	beq.n	8001e16 <HAL_ADC_Start_DMA+0x196>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea0 <HAL_ADC_Start_DMA+0x220>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_Start_DMA+0x180>
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_ADC_Start_DMA+0x20c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <HAL_ADC_Start_DMA+0x224>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d136      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_ADC_Start_DMA+0x20c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d130      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d129      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	e020      	b.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a18      	ldr	r2, [pc, #96]	@ (8001e9c <HAL_ADC_Start_DMA+0x21c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d11b      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d114      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	e00b      	b.n	8001e78 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	08002321 	.word	0x08002321
 8001e94:	080023db 	.word	0x080023db
 8001e98:	080023f7 	.word	0x080023f7
 8001e9c:	40012000 	.word	0x40012000
 8001ea0:	40012100 	.word	0x40012100
 8001ea4:	40012200 	.word	0x40012200

08001ea8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1c>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e105      	b.n	800210c <HAL_ADC_ConfigChannel+0x228>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	d925      	bls.n	8001f5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68d9      	ldr	r1, [r3, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	3b1e      	subs	r3, #30
 8001f26:	2207      	movs	r2, #7
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	400a      	ands	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68d9      	ldr	r1, [r3, #12]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4403      	add	r3, r0
 8001f4e:	3b1e      	subs	r3, #30
 8001f50:	409a      	lsls	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	e022      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6919      	ldr	r1, [r3, #16]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	2207      	movs	r2, #7
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6919      	ldr	r1, [r3, #16]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4403      	add	r3, r0
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d824      	bhi.n	8001ff4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b05      	subs	r3, #5
 8001fbc:	221f      	movs	r2, #31
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b05      	subs	r3, #5
 8001fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff2:	e04c      	b.n	800208e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d824      	bhi.n	8002046 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	3b23      	subs	r3, #35	@ 0x23
 800200e:	221f      	movs	r2, #31
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43da      	mvns	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	400a      	ands	r2, r1
 800201c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4618      	mov	r0, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	3b23      	subs	r3, #35	@ 0x23
 8002038:	fa00 f203 	lsl.w	r2, r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
 8002044:	e023      	b.n	800208e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	3b41      	subs	r3, #65	@ 0x41
 8002058:	221f      	movs	r2, #31
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	400a      	ands	r2, r1
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3b41      	subs	r3, #65	@ 0x41
 8002082:	fa00 f203 	lsl.w	r2, r0, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_ADC_ConfigChannel+0x234>)
 8002090:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_ADC_ConfigChannel+0x238>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d109      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1cc>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b12      	cmp	r3, #18
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a19      	ldr	r2, [pc, #100]	@ (800211c <HAL_ADC_ConfigChannel+0x238>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d123      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x21e>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d003      	beq.n	80020ca <HAL_ADC_ConfigChannel+0x1e6>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b11      	cmp	r3, #17
 80020c8:	d11b      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_ADC_ConfigChannel+0x23c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a10      	ldr	r2, [pc, #64]	@ (8002124 <HAL_ADC_ConfigChannel+0x240>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9a      	lsrs	r2, r3, #18
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	40012000 	.word	0x40012000
 8002120:	20000000 	.word	0x20000000
 8002124:	431bde83 	.word	0x431bde83

08002128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002130:	4b79      	ldr	r3, [pc, #484]	@ (8002318 <ADC_Init+0x1f0>)
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800215c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	021a      	lsls	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	4a58      	ldr	r2, [pc, #352]	@ (800231c <ADC_Init+0x1f4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d022      	beq.n	8002206 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	e00f      	b.n	8002226 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002224:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0202 	bic.w	r2, r2, #2
 8002234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7e1b      	ldrb	r3, [r3, #24]
 8002240:	005a      	lsls	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002262:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	3b01      	subs	r3, #1
 8002280:	035a      	lsls	r2, r3, #13
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	e007      	b.n	800229c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	051a      	lsls	r2, r3, #20
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6899      	ldr	r1, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022de:	025a      	lsls	r2, r3, #9
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	029a      	lsls	r2, r3, #10
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40012300 	.word	0x40012300
 800231c:	0f000001 	.word	0x0f000001

08002320 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002336:	2b00      	cmp	r3, #0
 8002338:	d13c      	bne.n	80023b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d12b      	bne.n	80023ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d127      	bne.n	80023ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002374:	2b00      	cmp	r3, #0
 8002376:	d119      	bne.n	80023ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0220 	bic.w	r2, r2, #32
 8002386:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff f831 	bl	8001414 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023b2:	e00e      	b.n	80023d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fd85 	bl	8001ed0 <HAL_ADC_ErrorCallback>
}
 80023c6:	e004      	b.n	80023d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff fd5d 	bl	8001ea8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff fd5a 	bl	8001ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4907      	ldr	r1, [pc, #28]	@ (80024d4 <__NVIC_EnableIRQ+0x38>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	@ (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	@ 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	210f      	movs	r1, #15
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff8e 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff29 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002600:	f7ff ff3e 	bl	8002480 <__NVIC_GetPriorityGrouping>
 8002604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f7ff ff8e 	bl	800252c <NVIC_EncodePriority>
 8002610:	4602      	mov	r2, r0
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff5d 	bl	80024d8 <__NVIC_SetPriority>
}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff31 	bl	800249c <__NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ffa2 	bl	8002594 <SysTick_Config>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff f966 	bl	8001938 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e099      	b.n	80027ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002698:	e00f      	b.n	80026ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800269a:	f7ff f94d 	bl	8001938 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d908      	bls.n	80026ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e078      	b.n	80027ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e8      	bne.n	800269a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4b38      	ldr	r3, [pc, #224]	@ (80027b4 <HAL_DMA_Init+0x158>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	2b04      	cmp	r3, #4
 8002712:	d107      	bne.n	8002724 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4313      	orrs	r3, r2
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0307 	bic.w	r3, r3, #7
 800273a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2b04      	cmp	r3, #4
 800274c:	d117      	bne.n	800277e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa6f 	bl	8002c44 <DMA_CheckFifoParam>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2240      	movs	r2, #64	@ 0x40
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800277a:	2301      	movs	r3, #1
 800277c:	e016      	b.n	80027ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fa26 	bl	8002bd8 <DMA_CalcBaseAndBitshift>
 800278c:	4603      	mov	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	223f      	movs	r2, #63	@ 0x3f
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	f010803f 	.word	0xf010803f

080027b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_DMA_Start_IT+0x26>
 80027da:	2302      	movs	r3, #2
 80027dc:	e040      	b.n	8002860 <HAL_DMA_Start_IT+0xa8>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d12f      	bne.n	8002852 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f9b8 	bl	8002b7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0216 	orr.w	r2, r2, #22
 8002826:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0208 	orr.w	r2, r2, #8
 800283e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e005      	b.n	800285e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002874:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab0 <HAL_DMA_IRQHandler+0x248>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a8e      	ldr	r2, [pc, #568]	@ (8002ab4 <HAL_DMA_IRQHandler+0x24c>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2208      	movs	r2, #8
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0204 	bic.w	r2, r2, #4
 80028ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2208      	movs	r2, #8
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2204      	movs	r2, #4
 8002910:	409a      	lsls	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	2204      	movs	r2, #4
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	2210      	movs	r2, #16
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d043      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2210      	movs	r2, #16
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d018      	beq.n	80029aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d108      	bne.n	8002998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e01f      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0208 	bic.w	r2, r2, #8
 80029c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	2220      	movs	r2, #32
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 808f 	beq.w	8002b08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8087 	beq.w	8002b08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	2220      	movs	r2, #32
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d136      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0216 	bic.w	r2, r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x1da>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	223f      	movs	r2, #63	@ 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07e      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
        }
        return;
 8002a7e:	e079      	b.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10d      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
 8002aac:	e02c      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d023      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
 8002ac8:	e01e      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10f      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0210 	bic.w	r2, r2, #16
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d032      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d307      	bcc.n	8002b50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x2cc>
 8002b4e:	e000      	b.n	8002b52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b74:	bf00      	nop
    }
  }
}
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	d108      	bne.n	8002bbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bba:	e007      	b.n	8002bcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b10      	subs	r3, #16
 8002be8:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x64>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf2:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d909      	bls.n	8002c1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c18:	e007      	b.n	8002c2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	aaaaaaab 	.word	0xaaaaaaab
 8002c40:	0800c368 	.word	0x0800c368

08002c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d856      	bhi.n	8002d12 <DMA_CheckFifoParam+0xce>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <DMA_CheckFifoParam+0x28>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002d13 	.word	0x08002d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e043      	b.n	8002d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c96:	d140      	bne.n	8002d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e03d      	b.n	8002d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca6:	d121      	bne.n	8002cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d837      	bhi.n	8002d1e <DMA_CheckFifoParam+0xda>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <DMA_CheckFifoParam+0x70>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccb 	.word	0x08002ccb
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002cdd 	.word	0x08002cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e030      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e022      	b.n	8002d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cea:	e01c      	b.n	8002d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d903      	bls.n	8002cfa <DMA_CheckFifoParam+0xb6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf8:	e018      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e015      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e00b      	b.n	8002d2a <DMA_CheckFifoParam+0xe6>
      break;
 8002d12:	bf00      	nop
 8002d14:	e00a      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e008      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e006      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e16b      	b.n	8003030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f040 815a 	bne.w	800302a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d005      	beq.n	8002d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d130      	bne.n	8002df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 0201 	and.w	r2, r3, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d017      	beq.n	8002e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80b4 	beq.w	800302a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b60      	ldr	r3, [pc, #384]	@ (8003048 <HAL_GPIO_Init+0x30c>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	4a5f      	ldr	r2, [pc, #380]	@ (8003048 <HAL_GPIO_Init+0x30c>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8003048 <HAL_GPIO_Init+0x30c>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ede:	4a5b      	ldr	r2, [pc, #364]	@ (800304c <HAL_GPIO_Init+0x310>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a52      	ldr	r2, [pc, #328]	@ (8003050 <HAL_GPIO_Init+0x314>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02b      	beq.n	8002f62 <HAL_GPIO_Init+0x226>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a51      	ldr	r2, [pc, #324]	@ (8003054 <HAL_GPIO_Init+0x318>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d025      	beq.n	8002f5e <HAL_GPIO_Init+0x222>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a50      	ldr	r2, [pc, #320]	@ (8003058 <HAL_GPIO_Init+0x31c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <HAL_GPIO_Init+0x21e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800305c <HAL_GPIO_Init+0x320>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4e      	ldr	r2, [pc, #312]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x216>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003064 <HAL_GPIO_Init+0x328>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x212>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4c      	ldr	r2, [pc, #304]	@ (8003068 <HAL_GPIO_Init+0x32c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x20e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800306c <HAL_GPIO_Init+0x330>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x20a>
 8002f42:	2307      	movs	r3, #7
 8002f44:	e00e      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f46:	2308      	movs	r3, #8
 8002f48:	e00c      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	e00a      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f4e:	2305      	movs	r3, #5
 8002f50:	e008      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f56:	2303      	movs	r3, #3
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x228>
 8002f62:	2300      	movs	r3, #0
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f002 0203 	and.w	r2, r2, #3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f74:	4935      	ldr	r1, [pc, #212]	@ (800304c <HAL_GPIO_Init+0x310>)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f82:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa6:	4a32      	ldr	r2, [pc, #200]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fac:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd0:	4a27      	ldr	r2, [pc, #156]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd6:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003024:	4a12      	ldr	r2, [pc, #72]	@ (8003070 <HAL_GPIO_Init+0x334>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3301      	adds	r3, #1
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b0f      	cmp	r3, #15
 8003034:	f67f ae90 	bls.w	8002d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40013800 	.word	0x40013800
 8003050:	40020000 	.word	0x40020000
 8003054:	40020400 	.word	0x40020400
 8003058:	40020800 	.word	0x40020800
 800305c:	40020c00 	.word	0x40020c00
 8003060:	40021000 	.word	0x40021000
 8003064:	40021400 	.word	0x40021400
 8003068:	40021800 	.word	0x40021800
 800306c:	40021c00 	.word	0x40021c00
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
 8003080:	4613      	mov	r3, r2
 8003082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003084:	787b      	ldrb	r3, [r7, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003090:	e003      	b.n	800309a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	041a      	lsls	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	619a      	str	r2, [r3, #24]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	041a      	lsls	r2, r3, #16
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	400b      	ands	r3, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030f2:	4a05      	ldr	r2, [pc, #20]	@ (8003108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe f99c 	bl	8001438 <HAL_GPIO_EXTI_Callback>
  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e101      	b.n	8003322 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f006 f91f 	bl	800937c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800314c:	d102      	bne.n	8003154 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fc7e 	bl	8005a5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7c1a      	ldrb	r2, [r3, #16]
 8003166:	f88d 2000 	strb.w	r2, [sp]
 800316a:	3304      	adds	r3, #4
 800316c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316e:	f002 fb5d 	bl	800582c <USB_CoreInit>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0ce      	b.n	8003322 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fc76 	bl	8005a7c <USB_SetCurrentMode>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0bf      	b.n	8003322 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e04a      	b.n	800323e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3315      	adds	r3, #21
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3314      	adds	r3, #20
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	b298      	uxth	r0, r3
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	332e      	adds	r3, #46	@ 0x2e
 80031e4:	4602      	mov	r2, r0
 80031e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3318      	adds	r3, #24
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	331c      	adds	r3, #28
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3320      	adds	r3, #32
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3324      	adds	r3, #36	@ 0x24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	3301      	adds	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	791b      	ldrb	r3, [r3, #4]
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	429a      	cmp	r2, r3
 8003246:	d3af      	bcc.n	80031a8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e044      	b.n	80032d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	3301      	adds	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3b5      	bcc.n	800324e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7c1a      	ldrb	r2, [r3, #16]
 80032ea:	f88d 2000 	strb.w	r2, [sp]
 80032ee:	3304      	adds	r3, #4
 80032f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f2:	f002 fc0f 	bl	8005b14 <USB_DevInit>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e00c      	b.n	8003322 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fc59 	bl	8006bd2 <USB_DevDisconnect>

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_PCD_Start+0x1c>
 8003342:	2302      	movs	r3, #2
 8003344:	e022      	b.n	800338c <HAL_PCD_Start+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003366:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f002 fb60 	bl	8005a38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fc07 	bl	8006b90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b08d      	sub	sp, #52	@ 0x34
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fcc5 	bl	8006d3a <USB_GetMode>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 848c 	bne.w	8003cd0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 fc29 	bl	8006c14 <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8482 	beq.w	8003cce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fc16 	bl	8006c14 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d107      	bne.n	8003402 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f002 0202 	and.w	r2, r2, #2
 8003400:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fc04 	bl	8006c14 <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d161      	bne.n	80034da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0210 	bic.w	r2, r2, #16
 8003424:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	3304      	adds	r3, #4
 8003444:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800344c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003450:	d124      	bne.n	800349c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d035      	beq.n	80034ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346c:	b29b      	uxth	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	6a38      	ldr	r0, [r7, #32]
 8003472:	f003 fa3b 	bl	80068ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003482:	441a      	add	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003494:	441a      	add	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	615a      	str	r2, [r3, #20]
 800349a:	e016      	b.n	80034ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80034a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034a6:	d110      	bne.n	80034ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034ae:	2208      	movs	r2, #8
 80034b0:	4619      	mov	r1, r3
 80034b2:	6a38      	ldr	r0, [r7, #32]
 80034b4:	f003 fa1a 	bl	80068ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c4:	441a      	add	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0210 	orr.w	r2, r2, #16
 80034d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 fb98 	bl	8006c14 <USB_ReadInterrupts>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ee:	f040 80a7 	bne.w	8003640 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fb9d 	bl	8006c3a <USB_ReadDevAllOutEpInterrupt>
 8003500:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003502:	e099      	b.n	8003638 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 808e 	beq.w	800362c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fbc1 	bl	8006ca2 <USB_ReadDevOutEPInterrupt>
 8003520:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003538:	461a      	mov	r2, r3
 800353a:	2301      	movs	r3, #1
 800353c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800353e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fea3 	bl	800428c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355c:	461a      	mov	r2, r3
 800355e:	2308      	movs	r3, #8
 8003560:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 ff79 	bl	800445c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003580:	461a      	mov	r2, r3
 8003582:	2310      	movs	r3, #16
 8003584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d030      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	2b80      	cmp	r3, #128	@ 0x80
 800359a:	d109      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	78db      	ldrb	r3, [r3, #3]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d108      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f005 ffd4 	bl	8009588 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ec:	461a      	mov	r2, r3
 80035ee:	2302      	movs	r3, #2
 80035f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	2320      	movs	r3, #32
 800360c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800362a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	3301      	adds	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	f47f af62 	bne.w	8003504 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fae5 	bl	8006c14 <USB_ReadInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003654:	f040 80db 	bne.w	800380e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f003 fb06 	bl	8006c6e <USB_ReadDevAllInEpInterrupt>
 8003662:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003668:	e0cd      	b.n	8003806 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80c2 	beq.w	80037fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fb2c 	bl	8006cde <USB_ReadDevInEPInterrupt>
 8003686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d057      	beq.n	8003742 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2201      	movs	r2, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69f9      	ldr	r1, [r7, #28]
 80036ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036b2:	4013      	ands	r3, r2
 80036b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c2:	461a      	mov	r2, r3
 80036c4:	2301      	movs	r3, #1
 80036c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	799b      	ldrb	r3, [r3, #6]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d132      	bne.n	8003736 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3320      	adds	r3, #32
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4403      	add	r3, r0
 80036f0:	331c      	adds	r3, #28
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4419      	add	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4403      	add	r3, r0
 8003704:	3320      	adds	r3, #32
 8003706:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d113      	bne.n	8003736 <HAL_PCD_IRQHandler+0x3a2>
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3324      	adds	r3, #36	@ 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d108      	bne.n	8003736 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800372e:	461a      	mov	r2, r3
 8003730:	2101      	movs	r1, #1
 8003732:	f003 fb33 	bl	8006d9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	b2db      	uxtb	r3, r3
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f005 fe9e 	bl	800947e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003758:	461a      	mov	r2, r3
 800375a:	2308      	movs	r3, #8
 800375c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003774:	461a      	mov	r2, r3
 8003776:	2310      	movs	r3, #16
 8003778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	2340      	movs	r3, #64	@ 0x40
 8003794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a2:	6a38      	ldr	r0, [r7, #32]
 80037a4:	f002 fb1a 	bl	8005ddc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3310      	adds	r3, #16
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d108      	bne.n	80037d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f005 feeb 	bl	80095ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e2:	461a      	mov	r2, r3
 80037e4:	2302      	movs	r3, #2
 80037e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fcbd 	bl	8004174 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	3301      	adds	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af2e 	bne.w	800366a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f003 f9fe 	bl	8006c14 <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800381e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003822:	d122      	bne.n	800386a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800384a:	2100      	movs	r1, #0
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fea3 	bl	8004598 <HAL_PCDEx_LPM_Callback>
 8003852:	e002      	b.n	800385a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f005 fe89 	bl	800956c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f003 f9d0 	bl	8006c14 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387e:	d112      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d102      	bne.n	8003896 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f005 fe45 	bl	8009520 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80038a4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 f9b2 	bl	8006c14 <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ba:	f040 80b7 	bne.w	8003a2c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2110      	movs	r1, #16
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 fa7f 	bl	8005ddc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e2:	e046      	b.n	8003972 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f0:	461a      	mov	r2, r3
 80038f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800392a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	440a      	add	r2, r1
 8003942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003946:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800394a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003966:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800396a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	3301      	adds	r3, #1
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	791b      	ldrb	r3, [r3, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	4293      	cmp	r3, r2
 800397c:	d3b2      	bcc.n	80038e4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800398c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003990:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7bdb      	ldrb	r3, [r3, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039aa:	f043 030b 	orr.w	r3, r3, #11
 80039ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039c0:	f043 030b 	orr.w	r3, r3, #11
 80039c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c6:	e015      	b.n	80039f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80039de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ee:	f043 030b 	orr.w	r3, r3, #11
 80039f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a16:	461a      	mov	r2, r3
 8003a18:	f003 f9c0 	bl	8006d9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 f8ef 	bl	8006c14 <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a40:	d123      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 f985 	bl	8006d56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f002 fa3c 	bl	8005ece <USB_GetDevSpeed>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681c      	ldr	r4, [r3, #0]
 8003a62:	f001 fa39 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8003a66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f001 ff40 	bl	80058f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f005 fd2a 	bl	80094ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 f8c0 	bl	8006c14 <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f005 fd07 	bl	80094b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f002 0208 	and.w	r2, r2, #8
 8003ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 f8ab 	bl	8006c14 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b80      	cmp	r3, #128	@ 0x80
 8003ac6:	d123      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad8:	e014      	b.n	8003b04 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb0a 	bl	8004112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	3301      	adds	r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	791b      	ldrb	r3, [r3, #4]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d3e4      	bcc.n	8003ada <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 f87d 	bl	8006c14 <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b24:	d13c      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b26:	2301      	movs	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b2a:	e02b      	b.n	8003b84 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d115      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da12      	bge.n	8003b7e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3317      	adds	r3, #23
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 faca 	bl	8004112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	3301      	adds	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	791b      	ldrb	r3, [r3, #4]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d3cd      	bcc.n	8003b2c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 f835 	bl	8006c14 <USB_ReadInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb4:	d156      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bba:	e045      	b.n	8003c48 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d12e      	bne.n	8003c42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da2b      	bge.n	8003c42 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	0c1a      	lsrs	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bf4:	4053      	eors	r3, r2
 8003bf6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d121      	bne.n	8003c42 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c3e:	6053      	str	r3, [r2, #4]
            break;
 8003c40:	e008      	b.n	8003c54 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	3301      	adds	r3, #1
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d3b3      	bcc.n	8003bbc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f002 ffd3 	bl	8006c14 <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c78:	d10a      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f005 fca8 	bl	80095d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f002 ffbd 	bl	8006c14 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d115      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f005 fc98 	bl	80095ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	e000      	b.n	8003cd0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003cce:	bf00      	nop
    }
  }
}
 8003cd0:	3734      	adds	r7, #52	@ 0x34
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_SetAddress+0x1a>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e012      	b.n	8003d16 <HAL_PCD_SetAddress+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 ff1c 	bl	8006b44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	4608      	mov	r0, r1
 8003d28:	4611      	mov	r1, r2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	70fb      	strb	r3, [r7, #3]
 8003d30:	460b      	mov	r3, r1
 8003d32:	803b      	strh	r3, [r7, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da0f      	bge.n	8003d64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 020f 	and.w	r2, r3, #15
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	3310      	adds	r3, #16
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	705a      	strb	r2, [r3, #1]
 8003d62:	e00f      	b.n	8003d84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 020f 	and.w	r2, r3, #15
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d90:	883b      	ldrh	r3, [r7, #0]
 8003d92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	78ba      	ldrb	r2, [r7, #2]
 8003d9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003db2:	78bb      	ldrb	r3, [r7, #2]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d102      	bne.n	8003dbe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_PCD_EP_Open+0xae>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e00e      	b.n	8003dea <HAL_PCD_EP_Open+0xcc>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f002 f89c 	bl	8005f18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003de8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da0f      	bge.n	8003e26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3310      	adds	r3, #16
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	e00f      	b.n	8003e46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_PCD_EP_Close+0x6e>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e00e      	b.n	8003e7e <HAL_PCD_EP_Close+0x8c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68f9      	ldr	r1, [r7, #12]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 f8da 	bl	8006028 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b086      	sub	sp, #24
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	460b      	mov	r3, r1
 8003e94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	f003 020f 	and.w	r2, r3, #15
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	3304      	adds	r3, #4
 8003eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec8:	7afb      	ldrb	r3, [r7, #11]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	799b      	ldrb	r3, [r3, #6]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d102      	bne.n	8003ee2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	799b      	ldrb	r3, [r3, #6]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6979      	ldr	r1, [r7, #20]
 8003eee:	f002 f977 	bl	80061e0 <USB_EPStartXfer>

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
 8003f3e:	f003 020f 	and.w	r2, r3, #15
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	3310      	adds	r3, #16
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	3304      	adds	r3, #4
 8003f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2200      	movs	r2, #0
 8003f64:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	799b      	ldrb	r3, [r3, #6]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	799b      	ldrb	r3, [r3, #6]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	f002 f925 	bl	80061e0 <USB_EPStartXfer>

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	7912      	ldrb	r2, [r2, #4]
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e04f      	b.n	800405e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da0f      	bge.n	8003fe6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	3310      	adds	r3, #16
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	3304      	adds	r3, #4
 8003fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	705a      	strb	r2, [r3, #1]
 8003fe4:	e00d      	b.n	8004002 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_PCD_EP_SetStall+0x82>
 800401e:	2302      	movs	r3, #2
 8004020:	e01d      	b.n	800405e <HAL_PCD_EP_SetStall+0xbe>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	4618      	mov	r0, r3
 8004032:	f002 fcb3 	bl	800699c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7999      	ldrb	r1, [r3, #6]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800404e:	461a      	mov	r2, r3
 8004050:	f002 fea4 	bl	8006d9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	7912      	ldrb	r2, [r2, #4]
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e042      	b.n	800410a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da0f      	bge.n	80040ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3310      	adds	r3, #16
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	705a      	strb	r2, [r3, #1]
 80040aa:	e00f      	b.n	80040cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_EP_ClrStall+0x86>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e00e      	b.n	800410a <HAL_PCD_EP_ClrStall+0xa4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 fcbc 	bl	8006a78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800411e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da0c      	bge.n	8004140 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	3310      	adds	r3, #16
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e00c      	b.n	800415a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f002 fadb 	bl	800671c <USB_EPStopXfer>
 8004166:	4603      	mov	r3, r0
 8004168:	72fb      	strb	r3, [r7, #11]

  return ret;
 800416a:	7afb      	ldrb	r3, [r7, #11]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	@ 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	3310      	adds	r3, #16
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d901      	bls.n	80041ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e06b      	b.n	8004284 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d902      	bls.n	80041c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3303      	adds	r3, #3
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d0:	e02a      	b.n	8004228 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d902      	bls.n	80041ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3303      	adds	r3, #3
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4603      	mov	r3, r0
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	f002 fb30 	bl	8006870 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	441a      	add	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	441a      	add	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	429a      	cmp	r2, r3
 800423c:	d809      	bhi.n	8004252 <PCD_WriteEmptyTxFifo+0xde>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004246:	429a      	cmp	r2, r3
 8004248:	d203      	bcs.n	8004252 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1bf      	bne.n	80041d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	429a      	cmp	r2, r3
 800425c:	d811      	bhi.n	8004282 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	2201      	movs	r2, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	43db      	mvns	r3, r3
 8004278:	6939      	ldr	r1, [r7, #16]
 800427a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800427e:	4013      	ands	r3, r2
 8004280:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	333c      	adds	r3, #60	@ 0x3c
 80042a4:	3304      	adds	r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	799b      	ldrb	r3, [r3, #6]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d17b      	bne.n	80043ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4a61      	ldr	r2, [pc, #388]	@ (8004454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	f240 80b9 	bls.w	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80b3 	beq.w	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f4:	6093      	str	r3, [r2, #8]
 80042f6:	e0a7      	b.n	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	2320      	movs	r3, #32
 8004312:	6093      	str	r3, [r2, #8]
 8004314:	e098      	b.n	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 8093 	bne.w	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4a4b      	ldr	r2, [pc, #300]	@ (8004454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d90f      	bls.n	800434a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e07e      	b.n	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	3304      	adds	r3, #4
 800435e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	0159      	lsls	r1, r3, #5
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	440b      	add	r3, r1
 800436c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d114      	bne.n	80043ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004394:	461a      	mov	r2, r3
 8004396:	2101      	movs	r1, #1
 8004398:	f002 fd00 	bl	8006d9c <USB_EP0_OutStart>
 800439c:	e006      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	441a      	add	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f005 f848 	bl	8009448 <HAL_PCD_DataOutStageCallback>
 80043b8:	e046      	b.n	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d124      	bne.n	800440c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043de:	6093      	str	r3, [r2, #8]
 80043e0:	e032      	b.n	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	2320      	movs	r3, #32
 80043fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f005 f81f 	bl	8009448 <HAL_PCD_DataOutStageCallback>
 800440a:	e01d      	b.n	8004448 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d114      	bne.n	800443c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004434:	461a      	mov	r2, r3
 8004436:	2100      	movs	r1, #0
 8004438:	f002 fcb0 	bl	8006d9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f005 f800 	bl	8009448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	4f54300a 	.word	0x4f54300a
 8004458:	4f54310a 	.word	0x4f54310a

0800445c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	333c      	adds	r3, #60	@ 0x3c
 8004474:	3304      	adds	r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d90e      	bls.n	80044b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f004 ffb7 	bl	8009424 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d90c      	bls.n	80044d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	799b      	ldrb	r3, [r3, #6]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d108      	bne.n	80044d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044d0:	461a      	mov	r2, r3
 80044d2:	2101      	movs	r1, #1
 80044d4:	f002 fc62 	bl	8006d9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	4f54300a 	.word	0x4f54300a

080044e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
 80044f4:	4613      	mov	r3, r2
 80044f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004506:	883b      	ldrh	r3, [r7, #0]
 8004508:	0419      	lsls	r1, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	430a      	orrs	r2, r1
 8004512:	629a      	str	r2, [r3, #40]	@ 0x28
 8004514:	e028      	b.n	8004568 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e00d      	b.n	8004546 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	3340      	adds	r3, #64	@ 0x40
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4413      	add	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	3301      	adds	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	3b01      	subs	r3, #1
 800454c:	429a      	cmp	r2, r3
 800454e:	d3ec      	bcc.n	800452a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004550:	883b      	ldrh	r3, [r7, #0]
 8004552:	0418      	lsls	r0, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	3b01      	subs	r3, #1
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	4302      	orrs	r2, r0
 8004560:	3340      	adds	r3, #64	@ 0x40
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80045bc:	4b12      	ldr	r3, [pc, #72]	@ (8004608 <HAL_PWR_EnterSTOPMode+0x58>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f023 0203 	bic.w	r2, r3, #3
 80045c4:	4910      	ldr	r1, [pc, #64]	@ (8004608 <HAL_PWR_EnterSTOPMode+0x58>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045cc:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <HAL_PWR_EnterSTOPMode+0x5c>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	4a0e      	ldr	r2, [pc, #56]	@ (800460c <HAL_PWR_EnterSTOPMode+0x5c>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80045de:	bf30      	wfi
 80045e0:	e005      	b.n	80045ee <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d001      	beq.n	80045ec <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 80045e8:	bf40      	sev
      __WFE();
 80045ea:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 80045ec:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80045ee:	4b07      	ldr	r3, [pc, #28]	@ (800460c <HAL_PWR_EnterSTOPMode+0x5c>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4a06      	ldr	r2, [pc, #24]	@ (800460c <HAL_PWR_EnterSTOPMode+0x5c>)
 80045f4:	f023 0304 	bic.w	r3, r3, #4
 80045f8:	6113      	str	r3, [r2, #16]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40007000 	.word	0x40007000
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e267      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d075      	beq.n	800471a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800462e:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b04      	cmp	r3, #4
 8004638:	d00c      	beq.n	8004654 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463a:	4b85      	ldr	r3, [pc, #532]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004642:	2b08      	cmp	r3, #8
 8004644:	d112      	bne.n	800466c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b82      	ldr	r3, [pc, #520]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004652:	d10b      	bne.n	800466c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	4b7e      	ldr	r3, [pc, #504]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d05b      	beq.n	8004718 <HAL_RCC_OscConfig+0x108>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d157      	bne.n	8004718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e242      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004674:	d106      	bne.n	8004684 <HAL_RCC_OscConfig+0x74>
 8004676:	4b76      	ldr	r3, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a75      	ldr	r2, [pc, #468]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e01d      	b.n	80046c0 <HAL_RCC_OscConfig+0xb0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x98>
 800468e:	4b70      	ldr	r3, [pc, #448]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6f      	ldr	r2, [pc, #444]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b6d      	ldr	r3, [pc, #436]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6c      	ldr	r2, [pc, #432]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0xb0>
 80046a8:	4b69      	ldr	r3, [pc, #420]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a68      	ldr	r2, [pc, #416]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b66      	ldr	r3, [pc, #408]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a65      	ldr	r2, [pc, #404]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fd f936 	bl	8001938 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fd f932 	bl	8001938 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e207      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0xc0>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fd f922 	bl	8001938 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fd f91e 	bl	8001938 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	@ 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1f3      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	4b51      	ldr	r3, [pc, #324]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0xe8>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004726:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004732:	4b47      	ldr	r3, [pc, #284]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800473a:	2b08      	cmp	r3, #8
 800473c:	d11c      	bne.n	8004778 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b44      	ldr	r3, [pc, #272]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x152>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e1c7      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b3b      	ldr	r3, [pc, #236]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4937      	ldr	r1, [pc, #220]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	e03a      	b.n	80047ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004780:	4b34      	ldr	r3, [pc, #208]	@ (8004854 <HAL_RCC_OscConfig+0x244>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fd f8d7 	bl	8001938 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fd f8d3 	bl	8001938 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1a8      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b28      	ldr	r3, [pc, #160]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4925      	ldr	r1, [pc, #148]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]
 80047c0:	e015      	b.n	80047ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <HAL_RCC_OscConfig+0x244>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fd f8b6 	bl	8001938 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d0:	f7fd f8b2 	bl	8001938 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e187      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d036      	beq.n	8004868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <HAL_RCC_OscConfig+0x248>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fd f896 	bl	8001938 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7fd f892 	bl	8001938 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e167      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x200>
 800482e:	e01b      	b.n	8004868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004830:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_RCC_OscConfig+0x248>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fd f87f 	bl	8001938 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	e00e      	b.n	800485c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483e:	f7fd f87b 	bl	8001938 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d907      	bls.n	800485c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e150      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
 8004850:	40023800 	.word	0x40023800
 8004854:	42470000 	.word	0x42470000
 8004858:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	4b88      	ldr	r3, [pc, #544]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ea      	bne.n	800483e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8097 	beq.w	80049a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487a:	4b81      	ldr	r3, [pc, #516]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	@ 0x40
 8004896:	4b7a      	ldr	r3, [pc, #488]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	4b77      	ldr	r3, [pc, #476]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d118      	bne.n	80048e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b2:	4b74      	ldr	r3, [pc, #464]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a73      	ldr	r2, [pc, #460]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048be:	f7fd f83b 	bl	8001938 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fd f837 	bl	8001938 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e10c      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x2ea>
 80048ec:	4b64      	ldr	r3, [pc, #400]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a63      	ldr	r2, [pc, #396]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f8:	e01c      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d10c      	bne.n	800491c <HAL_RCC_OscConfig+0x30c>
 8004902:	4b5f      	ldr	r3, [pc, #380]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	4a5e      	ldr	r2, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	6713      	str	r3, [r2, #112]	@ 0x70
 800490e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	4a5b      	ldr	r2, [pc, #364]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	@ 0x70
 800491a:	e00b      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
 800491c:	4b58      	ldr	r3, [pc, #352]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004920:	4a57      	ldr	r2, [pc, #348]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	@ 0x70
 8004928:	4b55      	ldr	r3, [pc, #340]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a54      	ldr	r2, [pc, #336]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 0304 	bic.w	r3, r3, #4
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493c:	f7fc fffc 	bl	8001938 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fc fff8 	bl	8001938 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0cb      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495a:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ee      	beq.n	8004944 <HAL_RCC_OscConfig+0x334>
 8004966:	e014      	b.n	8004992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004968:	f7fc ffe6 	bl	8001938 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	e00a      	b.n	8004986 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004970:	f7fc ffe2 	bl	8001938 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0b5      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004986:	4b3e      	ldr	r3, [pc, #248]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ee      	bne.n	8004970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d105      	bne.n	80049a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004998:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	4a38      	ldr	r2, [pc, #224]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80a1 	beq.w	8004af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ae:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d05c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d141      	bne.n	8004a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fc ffb6 	bl	8001938 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fc ffb2 	bl	8001938 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e087      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	491b      	ldr	r1, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fc ff8b 	bl	8001938 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fc ff87 	bl	8001938 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e05c      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x416>
 8004a44:	e054      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fc ff74 	bl	8001938 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fc ff70 	bl	8001938 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e045      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x444>
 8004a72:	e03d      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e038      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x4ec>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d028      	beq.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d121      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11a      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d111      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0cc      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b14:	4b68      	ldr	r3, [pc, #416]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d90c      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b65      	ldr	r3, [pc, #404]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b8      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b54:	4b59      	ldr	r3, [pc, #356]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a58      	ldr	r2, [pc, #352]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b6c:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a52      	ldr	r2, [pc, #328]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b50      	ldr	r3, [pc, #320]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	494d      	ldr	r1, [pc, #308]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d044      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d119      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	4b3b      	ldr	r3, [pc, #236]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e067      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bde:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4934      	ldr	r1, [pc, #208]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fc fea2 	bl	8001938 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7fc fe9e 	bl	8001938 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 020c 	and.w	r2, r3, #12
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1eb      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20c      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b22      	ldr	r3, [pc, #136]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e032      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c54:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4916      	ldr	r1, [pc, #88]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	490e      	ldr	r1, [pc, #56]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c86:	f000 f821 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490a      	ldr	r1, [pc, #40]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a09      	ldr	r2, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fc fe02 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	0800c358 	.word	0x0800c358
 8004cc4:	20000000 	.word	0x20000000
 8004cc8:	20000004 	.word	0x20000004

08004ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b094      	sub	sp, #80	@ 0x50
 8004cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce4:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d00d      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x40>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	f200 80e1 	bhi.w	8004eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfe:	e0db      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b73      	ldr	r3, [pc, #460]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d04:	e0db      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d06:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d0a:	e0d8      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d063      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d22:	4b6a      	ldr	r3, [pc, #424]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	2200      	movs	r2, #0
 8004d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d50:	0150      	lsls	r0, r2, #5
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4621      	mov	r1, r4
 8004d58:	1a51      	subs	r1, r2, r1
 8004d5a:	6139      	str	r1, [r7, #16]
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d70:	4659      	mov	r1, fp
 8004d72:	018b      	lsls	r3, r1, #6
 8004d74:	4651      	mov	r1, sl
 8004d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	018a      	lsls	r2, r1, #6
 8004d7e:	4651      	mov	r1, sl
 8004d80:	ebb2 0801 	subs.w	r8, r2, r1
 8004d84:	4659      	mov	r1, fp
 8004d86:	eb63 0901 	sbc.w	r9, r3, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	eb18 0303 	adds.w	r3, r8, r3
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	462b      	mov	r3, r5
 8004dac:	eb49 0303 	adc.w	r3, r9, r3
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	024b      	lsls	r3, r1, #9
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dc8:	4621      	mov	r1, r4
 8004dca:	024a      	lsls	r2, r1, #9
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ddc:	f7fb fee4 	bl	8000ba8 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4613      	mov	r3, r2
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	e058      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dea:	4b38      	ldr	r3, [pc, #224]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	2200      	movs	r2, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	4611      	mov	r1, r2
 8004df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dfa:	623b      	str	r3, [r7, #32]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	0159      	lsls	r1, r3, #5
 8004e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e16:	0150      	lsls	r0, r2, #5
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e40:	eb63 050b 	sbc.w	r5, r3, fp
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	00eb      	lsls	r3, r5, #3
 8004e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e52:	00e2      	lsls	r2, r4, #3
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	18e3      	adds	r3, r4, r3
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb45 0303 	adc.w	r3, r5, r3
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e72:	4629      	mov	r1, r5
 8004e74:	028b      	lsls	r3, r1, #10
 8004e76:	4621      	mov	r1, r4
 8004e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	028a      	lsls	r2, r1, #10
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e86:	2200      	movs	r2, #0
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	61fa      	str	r2, [r7, #28]
 8004e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e90:	f7fb fe8a 	bl	8000ba8 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3750      	adds	r7, #80	@ 0x50
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	007a1200 	.word	0x007a1200

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b03      	ldr	r3, [pc, #12]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e041      	b.n	8004f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fb26 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f000 faac 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e04e      	b.n	8005046 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	@ (8005054 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd2:	d01d      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <HAL_TIM_Base_Start_IT+0xcc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_TIM_Base_Start_IT+0xd8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x80>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a18      	ldr	r2, [pc, #96]	@ (800506c <HAL_TIM_Base_Start_IT+0xdc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d010      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e007      	b.n	8005044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40010400 	.word	0x40010400
 8005068:	40014000 	.word	0x40014000
 800506c:	40001800 	.word	0x40001800

08005070 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10f      	bne.n	80050b8 <HAL_TIM_Base_Stop_IT+0x48>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a1a      	ldr	r2, [r3, #32]
 800509e:	f240 4344 	movw	r3, #1092	@ 0x444
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d107      	bne.n	80050b8 <HAL_TIM_Base_Stop_IT+0x48>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01b      	beq.n	8005132 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f06f 0202 	mvn.w	r2, #2
 8005102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f999 	bl	8005450 <HAL_TIM_IC_CaptureCallback>
 800511e:	e005      	b.n	800512c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f98b 	bl	800543c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f99c 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0204 	mvn.w	r2, #4
 800514e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f973 	bl	8005450 <HAL_TIM_IC_CaptureCallback>
 800516a:	e005      	b.n	8005178 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f965 	bl	800543c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f976 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01b      	beq.n	80051ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0208 	mvn.w	r2, #8
 800519a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2204      	movs	r2, #4
 80051a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f94d 	bl	8005450 <HAL_TIM_IC_CaptureCallback>
 80051b6:	e005      	b.n	80051c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f93f 	bl	800543c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f950 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01b      	beq.n	8005216 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f06f 0210 	mvn.w	r2, #16
 80051e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2208      	movs	r2, #8
 80051ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f927 	bl	8005450 <HAL_TIM_IC_CaptureCallback>
 8005202:	e005      	b.n	8005210 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f919 	bl	800543c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f92a 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f06f 0201 	mvn.w	r2, #1
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fc f8dd 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fadd 	bl	8005818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8fb 	bl	8005478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0220 	mvn.w	r2, #32
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 faaf 	bl	8005804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_ConfigClockSource+0x1c>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e0b4      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x186>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005302:	d03e      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xd4>
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005308:	f200 8087 	bhi.w	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005310:	f000 8086 	beq.w	8005420 <HAL_TIM_ConfigClockSource+0x172>
 8005314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005318:	d87f      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800531a:	2b70      	cmp	r3, #112	@ 0x70
 800531c:	d01a      	beq.n	8005354 <HAL_TIM_ConfigClockSource+0xa6>
 800531e:	2b70      	cmp	r3, #112	@ 0x70
 8005320:	d87b      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 8005322:	2b60      	cmp	r3, #96	@ 0x60
 8005324:	d050      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x11a>
 8005326:	2b60      	cmp	r3, #96	@ 0x60
 8005328:	d877      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800532a:	2b50      	cmp	r3, #80	@ 0x50
 800532c:	d03c      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0xfa>
 800532e:	2b50      	cmp	r3, #80	@ 0x50
 8005330:	d873      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d058      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x13a>
 8005336:	2b40      	cmp	r3, #64	@ 0x40
 8005338:	d86f      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800533a:	2b30      	cmp	r3, #48	@ 0x30
 800533c:	d064      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 800533e:	2b30      	cmp	r3, #48	@ 0x30
 8005340:	d86b      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 8005342:	2b20      	cmp	r3, #32
 8005344:	d060      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 8005346:	2b20      	cmp	r3, #32
 8005348:	d867      	bhi.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d05c      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 800534e:	2b10      	cmp	r3, #16
 8005350:	d05a      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x15a>
 8005352:	e062      	b.n	800541a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	f000 f9b2 	bl	80056cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005376:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]
      break;
 8005380:	e04f      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	f000 f99b 	bl	80056cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053a4:	609a      	str	r2, [r3, #8]
      break;
 80053a6:	e03c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b4:	461a      	mov	r2, r3
 80053b6:	f000 f90f 	bl	80055d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2150      	movs	r1, #80	@ 0x50
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f968 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 80053c6:	e02c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d4:	461a      	mov	r2, r3
 80053d6:	f000 f92e 	bl	8005636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2160      	movs	r1, #96	@ 0x60
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f958 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 80053e6:	e01c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f4:	461a      	mov	r2, r3
 80053f6:	f000 f8ef 	bl	80055d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2140      	movs	r1, #64	@ 0x40
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f948 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 8005406:	e00c      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 f93f 	bl	8005696 <TIM_ITRx_SetConfig>
      break;
 8005418:	e003      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      break;
 800541e:	e000      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a43      	ldr	r2, [pc, #268]	@ (80055ac <TIM_Base_SetConfig+0x120>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054aa:	d00f      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	@ (80055b0 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3f      	ldr	r2, [pc, #252]	@ (80055b4 <TIM_Base_SetConfig+0x128>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3e      	ldr	r2, [pc, #248]	@ (80055b8 <TIM_Base_SetConfig+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3d      	ldr	r2, [pc, #244]	@ (80055bc <TIM_Base_SetConfig+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d108      	bne.n	80054de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a32      	ldr	r2, [pc, #200]	@ (80055ac <TIM_Base_SetConfig+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d02b      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ec:	d027      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	@ (80055b0 <TIM_Base_SetConfig+0x124>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d023      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2e      	ldr	r2, [pc, #184]	@ (80055b4 <TIM_Base_SetConfig+0x128>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2d      	ldr	r2, [pc, #180]	@ (80055b8 <TIM_Base_SetConfig+0x12c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01b      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2c      	ldr	r2, [pc, #176]	@ (80055bc <TIM_Base_SetConfig+0x130>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d017      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2b      	ldr	r2, [pc, #172]	@ (80055c0 <TIM_Base_SetConfig+0x134>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2a      	ldr	r2, [pc, #168]	@ (80055c4 <TIM_Base_SetConfig+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a29      	ldr	r2, [pc, #164]	@ (80055c8 <TIM_Base_SetConfig+0x13c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a28      	ldr	r2, [pc, #160]	@ (80055cc <TIM_Base_SetConfig+0x140>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a27      	ldr	r2, [pc, #156]	@ (80055d0 <TIM_Base_SetConfig+0x144>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <TIM_Base_SetConfig+0x148>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a0e      	ldr	r2, [pc, #56]	@ (80055ac <TIM_Base_SetConfig+0x120>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_Base_SetConfig+0xf2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a10      	ldr	r2, [pc, #64]	@ (80055bc <TIM_Base_SetConfig+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d103      	bne.n	8005586 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800
 80055cc:	40001800 	.word	0x40001800
 80055d0:	40001c00 	.word	0x40001c00
 80055d4:	40002000 	.word	0x40002000

080055d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 030a 	bic.w	r3, r3, #10
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0210 	bic.w	r2, r3, #16
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005672:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f043 0307 	orr.w	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e05a      	b.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a21      	ldr	r2, [pc, #132]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d022      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005770:	d01d      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d018      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1b      	ldr	r2, [pc, #108]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1a      	ldr	r2, [pc, #104]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a17      	ldr	r2, [pc, #92]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10c      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40000c00 	.word	0x40000c00
 80057f8:	40010400 	.word	0x40010400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40001800 	.word	0x40001800

08005804 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 001c 	add.w	r0, r7, #28
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800583e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005842:	2b01      	cmp	r3, #1
 8005844:	d123      	bne.n	800588e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800585a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800586e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005872:	2b01      	cmp	r3, #1
 8005874:	d105      	bne.n	8005882 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fae8 	bl	8006e58 <USB_CoreReset>
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]
 800588c:	e01b      	b.n	80058c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fadc 	bl	8006e58 <USB_CoreReset>
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80058b8:	e005      	b.n	80058c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058c6:	7fbb      	ldrb	r3, [r7, #30]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d10b      	bne.n	80058e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f043 0206 	orr.w	r2, r3, #6
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f0:	b004      	add	sp, #16
 80058f2:	4770      	bx	lr

080058f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d165      	bne.n	80059d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a41      	ldr	r2, [pc, #260]	@ (8005a10 <USB_SetTurnaroundTime+0x11c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d906      	bls.n	800591e <USB_SetTurnaroundTime+0x2a>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a40      	ldr	r2, [pc, #256]	@ (8005a14 <USB_SetTurnaroundTime+0x120>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d202      	bcs.n	800591e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005918:	230f      	movs	r3, #15
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e062      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a3c      	ldr	r2, [pc, #240]	@ (8005a14 <USB_SetTurnaroundTime+0x120>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d306      	bcc.n	8005934 <USB_SetTurnaroundTime+0x40>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a3b      	ldr	r2, [pc, #236]	@ (8005a18 <USB_SetTurnaroundTime+0x124>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d202      	bcs.n	8005934 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800592e:	230e      	movs	r3, #14
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e057      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a38      	ldr	r2, [pc, #224]	@ (8005a18 <USB_SetTurnaroundTime+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d306      	bcc.n	800594a <USB_SetTurnaroundTime+0x56>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a37      	ldr	r2, [pc, #220]	@ (8005a1c <USB_SetTurnaroundTime+0x128>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d202      	bcs.n	800594a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005944:	230d      	movs	r3, #13
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e04c      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a33      	ldr	r2, [pc, #204]	@ (8005a1c <USB_SetTurnaroundTime+0x128>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d306      	bcc.n	8005960 <USB_SetTurnaroundTime+0x6c>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a32      	ldr	r2, [pc, #200]	@ (8005a20 <USB_SetTurnaroundTime+0x12c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d802      	bhi.n	8005960 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800595a:	230c      	movs	r3, #12
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e041      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4a2f      	ldr	r2, [pc, #188]	@ (8005a20 <USB_SetTurnaroundTime+0x12c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d906      	bls.n	8005976 <USB_SetTurnaroundTime+0x82>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a2e      	ldr	r2, [pc, #184]	@ (8005a24 <USB_SetTurnaroundTime+0x130>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d802      	bhi.n	8005976 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005970:	230b      	movs	r3, #11
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e036      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4a2a      	ldr	r2, [pc, #168]	@ (8005a24 <USB_SetTurnaroundTime+0x130>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d906      	bls.n	800598c <USB_SetTurnaroundTime+0x98>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4a29      	ldr	r2, [pc, #164]	@ (8005a28 <USB_SetTurnaroundTime+0x134>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d802      	bhi.n	800598c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005986:	230a      	movs	r3, #10
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e02b      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4a26      	ldr	r2, [pc, #152]	@ (8005a28 <USB_SetTurnaroundTime+0x134>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d906      	bls.n	80059a2 <USB_SetTurnaroundTime+0xae>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4a25      	ldr	r2, [pc, #148]	@ (8005a2c <USB_SetTurnaroundTime+0x138>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d202      	bcs.n	80059a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800599c:	2309      	movs	r3, #9
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e020      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4a21      	ldr	r2, [pc, #132]	@ (8005a2c <USB_SetTurnaroundTime+0x138>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d306      	bcc.n	80059b8 <USB_SetTurnaroundTime+0xc4>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4a20      	ldr	r2, [pc, #128]	@ (8005a30 <USB_SetTurnaroundTime+0x13c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d802      	bhi.n	80059b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059b2:	2308      	movs	r3, #8
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e015      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005a30 <USB_SetTurnaroundTime+0x13c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d906      	bls.n	80059ce <USB_SetTurnaroundTime+0xda>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a34 <USB_SetTurnaroundTime+0x140>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d202      	bcs.n	80059ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059c8:	2307      	movs	r3, #7
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e00a      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059ce:	2306      	movs	r3, #6
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e007      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059da:	2309      	movs	r3, #9
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e001      	b.n	80059e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059e0:	2309      	movs	r3, #9
 80059e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	029b      	lsls	r3, r3, #10
 80059f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	00d8acbf 	.word	0x00d8acbf
 8005a14:	00e4e1c0 	.word	0x00e4e1c0
 8005a18:	00f42400 	.word	0x00f42400
 8005a1c:	01067380 	.word	0x01067380
 8005a20:	011a499f 	.word	0x011a499f
 8005a24:	01312cff 	.word	0x01312cff
 8005a28:	014ca43f 	.word	0x014ca43f
 8005a2c:	016e3600 	.word	0x016e3600
 8005a30:	01a6ab1f 	.word	0x01a6ab1f
 8005a34:	01e84800 	.word	0x01e84800

08005a38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f043 0201 	orr.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d115      	bne.n	8005aca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005aaa:	200a      	movs	r0, #10
 8005aac:	f7fb ff50 	bl	8001950 <HAL_Delay>
      ms += 10U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	330a      	adds	r3, #10
 8005ab4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f93f 	bl	8006d3a <USB_GetMode>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d01e      	beq.n	8005b00 <USB_SetCurrentMode+0x84>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ac6:	d9f0      	bls.n	8005aaa <USB_SetCurrentMode+0x2e>
 8005ac8:	e01a      	b.n	8005b00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d115      	bne.n	8005afc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005adc:	200a      	movs	r0, #10
 8005ade:	f7fb ff37 	bl	8001950 <HAL_Delay>
      ms += 10U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	330a      	adds	r3, #10
 8005ae6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 f926 	bl	8006d3a <USB_GetMode>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <USB_SetCurrentMode+0x84>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005af8:	d9f0      	bls.n	8005adc <USB_SetCurrentMode+0x60>
 8005afa:	e001      	b.n	8005b00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e005      	b.n	8005b0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b04:	d101      	bne.n	8005b0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b14:	b084      	sub	sp, #16
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	e009      	b.n	8005b48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3340      	adds	r3, #64	@ 0x40
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	3301      	adds	r3, #1
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b0e      	cmp	r3, #14
 8005b4c:	d9f2      	bls.n	8005b34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d11c      	bne.n	8005b90 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b8e:	e00b      	b.n	8005ba8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d10d      	bne.n	8005bd8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f968 	bl	8005e9c <USB_SetDevSpeed>
 8005bcc:	e008      	b.n	8005be0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f963 	bl	8005e9c <USB_SetDevSpeed>
 8005bd6:	e003      	b.n	8005be0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bd8:	2103      	movs	r1, #3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f95e 	bl	8005e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be0:	2110      	movs	r1, #16
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8fa 	bl	8005ddc <USB_FlushTxFifo>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f924 	bl	8005e40 <USB_FlushRxFifo>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c20:	461a      	mov	r2, r3
 8005c22:	2300      	movs	r3, #0
 8005c24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e043      	b.n	8005cb4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c42:	d118      	bne.n	8005c76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c56:	461a      	mov	r2, r3
 8005c58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e013      	b.n	8005c88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e008      	b.n	8005c88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	2300      	movs	r3, #0
 8005c86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cb8:	461a      	mov	r2, r3
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d3b5      	bcc.n	8005c2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	e043      	b.n	8005d4e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cdc:	d118      	bne.n	8005d10 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e013      	b.n	8005d22 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d06:	461a      	mov	r2, r3
 8005d08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e008      	b.n	8005d22 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2300      	movs	r3, #0
 8005d32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d40:	461a      	mov	r2, r3
 8005d42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d52:	461a      	mov	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d3b5      	bcc.n	8005cc6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	4b10      	ldr	r3, [pc, #64]	@ (8005dd8 <USB_DevInit+0x2c4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f043 0208 	orr.w	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005db0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dc0:	f043 0304 	orr.w	r3, r3, #4
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd4:	b004      	add	sp, #16
 8005dd6:	4770      	bx	lr
 8005dd8:	803c3800 	.word	0x803c3800

08005ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005df6:	d901      	bls.n	8005dfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e01b      	b.n	8005e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	daf2      	bge.n	8005dea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	019b      	lsls	r3, r3, #6
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e20:	d901      	bls.n	8005e26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e006      	b.n	8005e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d0f0      	beq.n	8005e14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e58:	d901      	bls.n	8005e5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e018      	b.n	8005e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	daf2      	bge.n	8005e4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e7c:	d901      	bls.n	8005e82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e006      	b.n	8005e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d0f0      	beq.n	8005e70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
 8005ef2:	e00a      	b.n	8005f0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d002      	beq.n	8005f00 <USB_GetDevSpeed+0x32>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d102      	bne.n	8005f06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f00:	2302      	movs	r3, #2
 8005f02:	75fb      	strb	r3, [r7, #23]
 8005f04:	e001      	b.n	8005f0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f06:	230f      	movs	r3, #15
 8005f08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d13a      	bne.n	8005faa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	68f9      	ldr	r1, [r7, #12]
 8005f4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d155      	bne.n	8006018 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	791b      	ldrb	r3, [r3, #4]
 8005f86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f90:	4313      	orrs	r3, r2
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e036      	b.n	8006018 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb0:	69da      	ldr	r2, [r3, #28]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	2101      	movs	r1, #1
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11a      	bne.n	8006018 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ffe:	430b      	orrs	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006016:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d161      	bne.n	8006108 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800605a:	d11f      	bne.n	800609c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006076:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800607a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006096:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800609a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060bc:	4013      	ands	r3, r2
 80060be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060e0:	4013      	ands	r3, r2
 80060e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	0159      	lsls	r1, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060fe:	4619      	mov	r1, r3
 8006100:	4b35      	ldr	r3, [pc, #212]	@ (80061d8 <USB_DeactivateEndpoint+0x1b0>)
 8006102:	4013      	ands	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
 8006106:	e060      	b.n	80061ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800611e:	d11f      	bne.n	8006160 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800615a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800615e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	43db      	mvns	r3, r3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061a4:	4013      	ands	r3, r2
 80061a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	0159      	lsls	r1, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	440b      	add	r3, r1
 80061be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c2:	4619      	mov	r1, r3
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <USB_DeactivateEndpoint+0x1b4>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	ec337800 	.word	0xec337800
 80061dc:	eff37800 	.word	0xeff37800

080061e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	@ 0x28
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 817f 	bne.w	8006500 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d132      	bne.n	8006270 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006224:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006228:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800622c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006248:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800624c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006268:	0cdb      	lsrs	r3, r3, #19
 800626a:	04db      	lsls	r3, r3, #19
 800626c:	6113      	str	r3, [r2, #16]
 800626e:	e097      	b.n	80063a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628a:	0cdb      	lsrs	r3, r3, #19
 800628c:	04db      	lsls	r3, r3, #19
 800628e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d11a      	bne.n	80062f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d903      	bls.n	80062ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062ec:	6113      	str	r3, [r2, #16]
 80062ee:	e044      	b.n	800637a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	1e5a      	subs	r2, r3, #1
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	8afb      	ldrh	r3, [r7, #22]
 8006316:	04d9      	lsls	r1, r3, #19
 8006318:	4ba4      	ldr	r3, [pc, #656]	@ (80065ac <USB_EPStartXfer+0x3cc>)
 800631a:	400b      	ands	r3, r1
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	0148      	lsls	r0, r1, #5
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	4401      	add	r1, r0
 8006324:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006328:	4313      	orrs	r3, r2
 800632a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	791b      	ldrb	r3, [r3, #4]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d122      	bne.n	800637a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800634e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006352:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	8afb      	ldrh	r3, [r7, #22]
 8006364:	075b      	lsls	r3, r3, #29
 8006366:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	0148      	lsls	r0, r1, #5
 800636e:	69f9      	ldr	r1, [r7, #28]
 8006370:	4401      	add	r1, r0
 8006372:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006390:	69b9      	ldr	r1, [r7, #24]
 8006392:	0148      	lsls	r0, r1, #5
 8006394:	69f9      	ldr	r1, [r7, #28]
 8006396:	4401      	add	r1, r0
 8006398:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800639c:	4313      	orrs	r3, r2
 800639e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d14b      	bne.n	800643e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	791b      	ldrb	r3, [r3, #4]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d128      	bne.n	800641c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d110      	bne.n	80063fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e00f      	b.n	800641c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800641a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006436:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e166      	b.n	800670c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006458:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800645c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	791b      	ldrb	r3, [r3, #4]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d015      	beq.n	8006492 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 814e 	beq.w	800670c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	2101      	movs	r1, #1
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	69f9      	ldr	r1, [r7, #28]
 8006488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800648c:	4313      	orrs	r3, r2
 800648e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006490:	e13c      	b.n	800670c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d110      	bne.n	80064c4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e00f      	b.n	80064e4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	b298      	uxth	r0, r3
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4603      	mov	r3, r0
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f9b9 	bl	8006870 <USB_WritePacket>
 80064fe:	e105      	b.n	800670c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651a:	0cdb      	lsrs	r3, r3, #19
 800651c:	04db      	lsls	r3, r3, #19
 800651e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800653a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800653e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006542:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d132      	bne.n	80065b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006578:	69b9      	ldr	r1, [r7, #24]
 800657a:	0148      	lsls	r0, r1, #5
 800657c:	69f9      	ldr	r1, [r7, #28]
 800657e:	4401      	add	r1, r0
 8006580:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006584:	4313      	orrs	r3, r2
 8006586:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065a6:	6113      	str	r3, [r2, #16]
 80065a8:	e062      	b.n	8006670 <USB_EPStartXfer+0x490>
 80065aa:	bf00      	nop
 80065ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d123      	bne.n	8006600 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ce:	69b9      	ldr	r1, [r7, #24]
 80065d0:	0148      	lsls	r0, r1, #5
 80065d2:	69f9      	ldr	r1, [r7, #28]
 80065d4:	4401      	add	r1, r0
 80065d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065da:	4313      	orrs	r3, r2
 80065dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065fc:	6113      	str	r3, [r2, #16]
 80065fe:	e037      	b.n	8006670 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4413      	add	r3, r2
 800660a:	1e5a      	subs	r2, r3, #1
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	8afa      	ldrh	r2, [r7, #22]
 800661c:	fb03 f202 	mul.w	r2, r3, r2
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	8afb      	ldrh	r3, [r7, #22]
 8006634:	04d9      	lsls	r1, r3, #19
 8006636:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <USB_EPStartXfer+0x538>)
 8006638:	400b      	ands	r3, r1
 800663a:	69b9      	ldr	r1, [r7, #24]
 800663c:	0148      	lsls	r0, r1, #5
 800663e:	69f9      	ldr	r1, [r7, #28]
 8006640:	4401      	add	r1, r0
 8006642:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006646:	4313      	orrs	r3, r2
 8006648:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	0148      	lsls	r0, r1, #5
 8006664:	69f9      	ldr	r1, [r7, #28]
 8006666:	4401      	add	r1, r0
 8006668:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10d      	bne.n	8006692 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68d9      	ldr	r1, [r3, #12]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668e:	460a      	mov	r2, r1
 8006690:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	791b      	ldrb	r3, [r3, #4]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d128      	bne.n	80066ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d110      	bne.n	80066cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e00f      	b.n	80066ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006706:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800670a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	1ff80000 	.word	0x1ff80000

0800671c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d14a      	bne.n	80067d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800674e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006752:	f040 8086 	bne.w	8006862 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006774:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006778:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800679c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d902      	bls.n	80067b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]
          break;
 80067b2:	e056      	b.n	8006862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067cc:	d0e7      	beq.n	800679e <USB_EPStopXfer+0x82>
 80067ce:	e048      	b.n	8006862 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e8:	d13b      	bne.n	8006862 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	7812      	ldrb	r2, [r2, #0]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800680c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800682c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800683e:	4293      	cmp	r3, r2
 8006840:	d902      	bls.n	8006848 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
          break;
 8006846:	e00c      	b.n	8006862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800685c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006860:	d0e7      	beq.n	8006832 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006870:	b480      	push	{r7}
 8006872:	b089      	sub	sp, #36	@ 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	71fb      	strb	r3, [r7, #7]
 8006882:	4613      	mov	r3, r2
 8006884:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800688e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	d123      	bne.n	80068de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006896:	88bb      	ldrh	r3, [r7, #4]
 8006898:	3303      	adds	r3, #3
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e018      	b.n	80068d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	031a      	lsls	r2, r3, #12
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b0:	461a      	mov	r2, r3
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3301      	adds	r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3301      	adds	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3301      	adds	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d3e2      	bcc.n	80068a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3724      	adds	r7, #36	@ 0x24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b08b      	sub	sp, #44	@ 0x2c
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	089b      	lsrs	r3, r3, #2
 8006906:	b29b      	uxth	r3, r3
 8006908:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006912:	2300      	movs	r3, #0
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	e014      	b.n	8006942 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	601a      	str	r2, [r3, #0]
    pDest++;
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	3301      	adds	r3, #1
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	3301      	adds	r3, #1
 800692e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	3301      	adds	r3, #1
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	3301      	adds	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	3301      	adds	r3, #1
 8006940:	623b      	str	r3, [r7, #32]
 8006942:	6a3a      	ldr	r2, [r7, #32]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	429a      	cmp	r2, r3
 8006948:	d3e6      	bcc.n	8006918 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800694a:	8bfb      	ldrh	r3, [r7, #30]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01e      	beq.n	800698e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695a:	461a      	mov	r2, r3
 800695c:	f107 0310 	add.w	r3, r7, #16
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
 8006970:	b2da      	uxtb	r2, r3
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	701a      	strb	r2, [r3, #0]
      i++;
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	3301      	adds	r3, #1
 800697a:	623b      	str	r3, [r7, #32]
      pDest++;
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	3301      	adds	r3, #1
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006982:	8bfb      	ldrh	r3, [r7, #30]
 8006984:	3b01      	subs	r3, #1
 8006986:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006988:	8bfb      	ldrh	r3, [r7, #30]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ea      	bne.n	8006964 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006990:	4618      	mov	r0, r3
 8006992:	372c      	adds	r7, #44	@ 0x2c
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d12c      	bne.n	8006a12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	db12      	blt.n	80069f0 <USB_EPSetStall+0x54>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00f      	beq.n	80069f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e02b      	b.n	8006a6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	db12      	blt.n	8006a4a <USB_EPSetStall+0xae>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00f      	beq.n	8006a4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d128      	bne.n	8006ae6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ab2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	791b      	ldrb	r3, [r3, #4]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d003      	beq.n	8006ac4 <USB_EPClearStall+0x4c>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	791b      	ldrb	r3, [r3, #4]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d138      	bne.n	8006b36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e027      	b.n	8006b36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d003      	beq.n	8006b16 <USB_EPClearStall+0x9e>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d10f      	bne.n	8006b36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bbe:	f023 0302 	bic.w	r3, r3, #2
 8006bc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bec:	f023 0303 	bic.w	r3, r3, #3
 8006bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c00:	f043 0302 	orr.w	r3, r3, #2
 8006c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	0c1b      	lsrs	r3, r3, #16
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	b29b      	uxth	r3, r3
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f003 0301 	and.w	r3, r3, #1
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d74:	f023 0307 	bic.w	r3, r3, #7
 8006d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	460b      	mov	r3, r1
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	333c      	adds	r3, #60	@ 0x3c
 8006db2:	3304      	adds	r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4a26      	ldr	r2, [pc, #152]	@ (8006e54 <USB_EP0_OutStart+0xb8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d90a      	bls.n	8006dd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dd0:	d101      	bne.n	8006dd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e037      	b.n	8006e46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2300      	movs	r3, #0
 8006de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e04:	f043 0318 	orr.w	r3, r3, #24
 8006e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e18:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d10f      	bne.n	8006e44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	4f54300a 	.word	0x4f54300a

08006e58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e70:	d901      	bls.n	8006e76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e022      	b.n	8006ebc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	daf2      	bge.n	8006e64 <USB_CoreReset+0xc>

  count = 10U;
 8006e7e:	230a      	movs	r3, #10
 8006e80:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006e82:	e002      	b.n	8006e8a <USB_CoreReset+0x32>
  {
    count--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f9      	bne.n	8006e84 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f043 0201 	orr.w	r2, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ea8:	d901      	bls.n	8006eae <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e006      	b.n	8006ebc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d0f0      	beq.n	8006e9c <USB_CoreReset+0x44>

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ed4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006ed8:	f002 fd20 	bl	800991c <USBD_static_malloc>
 8006edc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	32b0      	adds	r2, #176	@ 0xb0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e0d4      	b.n	80070a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ef8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006efc:	2100      	movs	r1, #0
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f003 fabd 	bl	800a47e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32b0      	adds	r2, #176	@ 0xb0
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32b0      	adds	r2, #176	@ 0xb0
 8006f1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7c1b      	ldrb	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d138      	bne.n	8006fa2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f30:	4b5e      	ldr	r3, [pc, #376]	@ (80070ac <USBD_CDC_Init+0x1e4>)
 8006f32:	7819      	ldrb	r1, [r3, #0]
 8006f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f38:	2202      	movs	r2, #2
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f002 fbcb 	bl	80096d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f40:	4b5a      	ldr	r3, [pc, #360]	@ (80070ac <USBD_CDC_Init+0x1e4>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	f003 020f 	and.w	r2, r3, #15
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	3323      	adds	r3, #35	@ 0x23
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f5a:	4b55      	ldr	r3, [pc, #340]	@ (80070b0 <USBD_CDC_Init+0x1e8>)
 8006f5c:	7819      	ldrb	r1, [r3, #0]
 8006f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f62:	2202      	movs	r2, #2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 fbb6 	bl	80096d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f6a:	4b51      	ldr	r3, [pc, #324]	@ (80070b0 <USBD_CDC_Init+0x1e8>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 020f 	and.w	r2, r3, #15
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f82:	2201      	movs	r2, #1
 8006f84:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f86:	4b4b      	ldr	r3, [pc, #300]	@ (80070b4 <USBD_CDC_Init+0x1ec>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f003 020f 	and.w	r2, r3, #15
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	331c      	adds	r3, #28
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e035      	b.n	800700e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fa2:	4b42      	ldr	r3, [pc, #264]	@ (80070ac <USBD_CDC_Init+0x1e4>)
 8006fa4:	7819      	ldrb	r1, [r3, #0]
 8006fa6:	2340      	movs	r3, #64	@ 0x40
 8006fa8:	2202      	movs	r2, #2
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 fb93 	bl	80096d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80070ac <USBD_CDC_Init+0x1e4>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3323      	adds	r3, #35	@ 0x23
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fca:	4b39      	ldr	r3, [pc, #228]	@ (80070b0 <USBD_CDC_Init+0x1e8>)
 8006fcc:	7819      	ldrb	r1, [r3, #0]
 8006fce:	2340      	movs	r3, #64	@ 0x40
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f002 fb7f 	bl	80096d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fd8:	4b35      	ldr	r3, [pc, #212]	@ (80070b0 <USBD_CDC_Init+0x1e8>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 020f 	and.w	r2, r3, #15
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	440b      	add	r3, r1
 8006fec:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80070b4 <USBD_CDC_Init+0x1ec>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 020f 	and.w	r2, r3, #15
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	331c      	adds	r3, #28
 800700a:	2210      	movs	r2, #16
 800700c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800700e:	4b29      	ldr	r3, [pc, #164]	@ (80070b4 <USBD_CDC_Init+0x1ec>)
 8007010:	7819      	ldrb	r1, [r3, #0]
 8007012:	2308      	movs	r3, #8
 8007014:	2203      	movs	r2, #3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 fb5d 	bl	80096d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800701c:	4b25      	ldr	r3, [pc, #148]	@ (80070b4 <USBD_CDC_Init+0x1ec>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3323      	adds	r3, #35	@ 0x23
 8007032:	2201      	movs	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	33b0      	adds	r3, #176	@ 0xb0
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800706c:	2302      	movs	r3, #2
 800706e:	e018      	b.n	80070a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	7c1b      	ldrb	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007078:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <USBD_CDC_Init+0x1e8>)
 800707a:	7819      	ldrb	r1, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f002 fc14 	bl	80098b4 <USBD_LL_PrepareReceive>
 800708c:	e008      	b.n	80070a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800708e:	4b08      	ldr	r3, [pc, #32]	@ (80070b0 <USBD_CDC_Init+0x1e8>)
 8007090:	7819      	ldrb	r1, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007098:	2340      	movs	r3, #64	@ 0x40
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f002 fc0a 	bl	80098b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000093 	.word	0x20000093
 80070b0:	20000094 	.word	0x20000094
 80070b4:	20000095 	.word	0x20000095

080070b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070c4:	4b3a      	ldr	r3, [pc, #232]	@ (80071b0 <USBD_CDC_DeInit+0xf8>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f002 fb29 	bl	8009722 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80070d0:	4b37      	ldr	r3, [pc, #220]	@ (80071b0 <USBD_CDC_DeInit+0xf8>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	3323      	adds	r3, #35	@ 0x23
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80070ea:	4b32      	ldr	r3, [pc, #200]	@ (80071b4 <USBD_CDC_DeInit+0xfc>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f002 fb16 	bl	8009722 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070f6:	4b2f      	ldr	r3, [pc, #188]	@ (80071b4 <USBD_CDC_DeInit+0xfc>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007112:	4b29      	ldr	r3, [pc, #164]	@ (80071b8 <USBD_CDC_DeInit+0x100>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f002 fb02 	bl	8009722 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800711e:	4b26      	ldr	r3, [pc, #152]	@ (80071b8 <USBD_CDC_DeInit+0x100>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	3323      	adds	r3, #35	@ 0x23
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007138:	4b1f      	ldr	r3, [pc, #124]	@ (80071b8 <USBD_CDC_DeInit+0x100>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f003 020f 	and.w	r2, r3, #15
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	440b      	add	r3, r1
 800714c:	331c      	adds	r3, #28
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	32b0      	adds	r2, #176	@ 0xb0
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01f      	beq.n	80071a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	33b0      	adds	r3, #176	@ 0xb0
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32b0      	adds	r2, #176	@ 0xb0
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	4618      	mov	r0, r3
 8007188:	f002 fbd6 	bl	8009938 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32b0      	adds	r2, #176	@ 0xb0
 8007196:	2100      	movs	r1, #0
 8007198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000093 	.word	0x20000093
 80071b4:	20000094 	.word	0x20000094
 80071b8:	20000095 	.word	0x20000095

080071bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	32b0      	adds	r2, #176	@ 0xb0
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e0bf      	b.n	800736c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d050      	beq.n	800729a <USBD_CDC_Setup+0xde>
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	f040 80af 	bne.w	800735c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	88db      	ldrh	r3, [r3, #6]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d03a      	beq.n	800727c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	b25b      	sxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	da1b      	bge.n	8007248 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	33b0      	adds	r3, #176	@ 0xb0
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007226:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	88d2      	ldrh	r2, [r2, #6]
 800722c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	88db      	ldrh	r3, [r3, #6]
 8007232:	2b07      	cmp	r3, #7
 8007234:	bf28      	it	cs
 8007236:	2307      	movcs	r3, #7
 8007238:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	89fa      	ldrh	r2, [r7, #14]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fda9 	bl	8008d98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007246:	e090      	b.n	800736a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	785a      	ldrb	r2, [r3, #1]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88db      	ldrh	r3, [r3, #6]
 8007256:	2b3f      	cmp	r3, #63	@ 0x3f
 8007258:	d803      	bhi.n	8007262 <USBD_CDC_Setup+0xa6>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	88db      	ldrh	r3, [r3, #6]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	e000      	b.n	8007264 <USBD_CDC_Setup+0xa8>
 8007262:	2240      	movs	r2, #64	@ 0x40
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800726a:	6939      	ldr	r1, [r7, #16]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007272:	461a      	mov	r2, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fdbe 	bl	8008df6 <USBD_CtlPrepareRx>
      break;
 800727a:	e076      	b.n	800736a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	33b0      	adds	r3, #176	@ 0xb0
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	7850      	ldrb	r0, [r2, #1]
 8007292:	2200      	movs	r2, #0
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	4798      	blx	r3
      break;
 8007298:	e067      	b.n	800736a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b0b      	cmp	r3, #11
 80072a0:	d851      	bhi.n	8007346 <USBD_CDC_Setup+0x18a>
 80072a2:	a201      	add	r2, pc, #4	@ (adr r2, 80072a8 <USBD_CDC_Setup+0xec>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072d9 	.word	0x080072d9
 80072ac:	08007355 	.word	0x08007355
 80072b0:	08007347 	.word	0x08007347
 80072b4:	08007347 	.word	0x08007347
 80072b8:	08007347 	.word	0x08007347
 80072bc:	08007347 	.word	0x08007347
 80072c0:	08007347 	.word	0x08007347
 80072c4:	08007347 	.word	0x08007347
 80072c8:	08007347 	.word	0x08007347
 80072cc:	08007347 	.word	0x08007347
 80072d0:	08007303 	.word	0x08007303
 80072d4:	0800732d 	.word	0x0800732d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d107      	bne.n	80072f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072e4:	f107 030a 	add.w	r3, r7, #10
 80072e8:	2202      	movs	r2, #2
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fd53 	bl	8008d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072f2:	e032      	b.n	800735a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fcd1 	bl	8008c9e <USBD_CtlError>
            ret = USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007300:	e02b      	b.n	800735a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d107      	bne.n	800731e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800730e:	f107 030d 	add.w	r3, r7, #13
 8007312:	2201      	movs	r2, #1
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fd3e 	bl	8008d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800731c:	e01d      	b.n	800735a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fcbc 	bl	8008c9e <USBD_CtlError>
            ret = USBD_FAIL;
 8007326:	2303      	movs	r3, #3
 8007328:	75fb      	strb	r3, [r7, #23]
          break;
 800732a:	e016      	b.n	800735a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b03      	cmp	r3, #3
 8007336:	d00f      	beq.n	8007358 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fcaf 	bl	8008c9e <USBD_CtlError>
            ret = USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007344:	e008      	b.n	8007358 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fca8 	bl	8008c9e <USBD_CtlError>
          ret = USBD_FAIL;
 800734e:	2303      	movs	r3, #3
 8007350:	75fb      	strb	r3, [r7, #23]
          break;
 8007352:	e002      	b.n	800735a <USBD_CDC_Setup+0x19e>
          break;
 8007354:	bf00      	nop
 8007356:	e008      	b.n	800736a <USBD_CDC_Setup+0x1ae>
          break;
 8007358:	bf00      	nop
      }
      break;
 800735a:	e006      	b.n	800736a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fc9d 	bl	8008c9e <USBD_CtlError>
      ret = USBD_FAIL;
 8007364:	2303      	movs	r3, #3
 8007366:	75fb      	strb	r3, [r7, #23]
      break;
 8007368:	bf00      	nop
  }

  return (uint8_t)ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007386:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32b0      	adds	r2, #176	@ 0xb0
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800739a:	2303      	movs	r3, #3
 800739c:	e065      	b.n	800746a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	32b0      	adds	r2, #176	@ 0xb0
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3314      	adds	r3, #20
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d02f      	beq.n	8007428 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	f003 020f 	and.w	r2, r3, #15
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	3314      	adds	r3, #20
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	f003 010f 	and.w	r1, r3, #15
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	460b      	mov	r3, r1
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	440b      	add	r3, r1
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4403      	add	r3, r0
 80073f0:	331c      	adds	r3, #28
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d112      	bne.n	8007428 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	3314      	adds	r3, #20
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800741a:	78f9      	ldrb	r1, [r7, #3]
 800741c:	2300      	movs	r3, #0
 800741e:	2200      	movs	r2, #0
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 fa26 	bl	8009872 <USBD_LL_Transmit>
 8007426:	e01f      	b.n	8007468 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	33b0      	adds	r3, #176	@ 0xb0
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	33b0      	adds	r3, #176	@ 0xb0
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	32b0      	adds	r2, #176	@ 0xb0
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	32b0      	adds	r2, #176	@ 0xb0
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e01a      	b.n	80074da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f002 fa24 	bl	80098f6 <USBD_LL_GetRxDataSize>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	33b0      	adds	r3, #176	@ 0xb0
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80074d4:	4611      	mov	r1, r2
 80074d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	32b0      	adds	r2, #176	@ 0xb0
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e024      	b.n	800754e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	33b0      	adds	r3, #176	@ 0xb0
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d019      	beq.n	800754c <USBD_CDC_EP0_RxReady+0x6a>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800751e:	2bff      	cmp	r3, #255	@ 0xff
 8007520:	d014      	beq.n	800754c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	33b0      	adds	r3, #176	@ 0xb0
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800753a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007542:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	22ff      	movs	r2, #255	@ 0xff
 8007548:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007560:	2182      	movs	r1, #130	@ 0x82
 8007562:	4818      	ldr	r0, [pc, #96]	@ (80075c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007564:	f000 fd62 	bl	800802c <USBD_GetEpDesc>
 8007568:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800756a:	2101      	movs	r1, #1
 800756c:	4815      	ldr	r0, [pc, #84]	@ (80075c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800756e:	f000 fd5d 	bl	800802c <USBD_GetEpDesc>
 8007572:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007574:	2181      	movs	r1, #129	@ 0x81
 8007576:	4813      	ldr	r0, [pc, #76]	@ (80075c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007578:	f000 fd58 	bl	800802c <USBD_GetEpDesc>
 800757c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2210      	movs	r2, #16
 8007588:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d006      	beq.n	800759e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2200      	movs	r2, #0
 8007594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007598:	711a      	strb	r2, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d006      	beq.n	80075b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ac:	711a      	strb	r2, [r3, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2243      	movs	r2, #67	@ 0x43
 80075b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075b8:	4b02      	ldr	r3, [pc, #8]	@ (80075c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000050 	.word	0x20000050

080075c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075d0:	2182      	movs	r1, #130	@ 0x82
 80075d2:	4818      	ldr	r0, [pc, #96]	@ (8007634 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075d4:	f000 fd2a 	bl	800802c <USBD_GetEpDesc>
 80075d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075da:	2101      	movs	r1, #1
 80075dc:	4815      	ldr	r0, [pc, #84]	@ (8007634 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075de:	f000 fd25 	bl	800802c <USBD_GetEpDesc>
 80075e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075e4:	2181      	movs	r1, #129	@ 0x81
 80075e6:	4813      	ldr	r0, [pc, #76]	@ (8007634 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075e8:	f000 fd20 	bl	800802c <USBD_GetEpDesc>
 80075ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2210      	movs	r2, #16
 80075f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d006      	beq.n	800760e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2200      	movs	r2, #0
 8007604:	711a      	strb	r2, [r3, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f042 0202 	orr.w	r2, r2, #2
 800760c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d006      	beq.n	8007622 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	711a      	strb	r2, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f042 0202 	orr.w	r2, r2, #2
 8007620:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2243      	movs	r2, #67	@ 0x43
 8007626:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007628:	4b02      	ldr	r3, [pc, #8]	@ (8007634 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000050 	.word	0x20000050

08007638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007640:	2182      	movs	r1, #130	@ 0x82
 8007642:	4818      	ldr	r0, [pc, #96]	@ (80076a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007644:	f000 fcf2 	bl	800802c <USBD_GetEpDesc>
 8007648:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800764a:	2101      	movs	r1, #1
 800764c:	4815      	ldr	r0, [pc, #84]	@ (80076a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800764e:	f000 fced 	bl	800802c <USBD_GetEpDesc>
 8007652:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007654:	2181      	movs	r1, #129	@ 0x81
 8007656:	4813      	ldr	r0, [pc, #76]	@ (80076a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007658:	f000 fce8 	bl	800802c <USBD_GetEpDesc>
 800765c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2210      	movs	r2, #16
 8007668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d006      	beq.n	800767e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2200      	movs	r2, #0
 8007674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007678:	711a      	strb	r2, [r3, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800768c:	711a      	strb	r2, [r3, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2243      	movs	r2, #67	@ 0x43
 8007696:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007698:	4b02      	ldr	r3, [pc, #8]	@ (80076a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000050 	.word	0x20000050

080076a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	220a      	movs	r2, #10
 80076b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076b6:	4b03      	ldr	r3, [pc, #12]	@ (80076c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	2000000c 	.word	0x2000000c

080076c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e009      	b.n	80076f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	33b0      	adds	r3, #176	@ 0xb0
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	32b0      	adds	r2, #176	@ 0xb0
 8007712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007716:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800771e:	2303      	movs	r3, #3
 8007720:	e008      	b.n	8007734 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	32b0      	adds	r2, #176	@ 0xb0
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	e004      	b.n	800776e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	32b0      	adds	r2, #176	@ 0xb0
 800778e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007792:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800779e:	2303      	movs	r3, #3
 80077a0:	e025      	b.n	80077ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11f      	bne.n	80077ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80077b4:	4b10      	ldr	r3, [pc, #64]	@ (80077f8 <USBD_CDC_TransmitPacket+0x7c>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4403      	add	r3, r0
 80077ce:	3314      	adds	r3, #20
 80077d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80077d2:	4b09      	ldr	r3, [pc, #36]	@ (80077f8 <USBD_CDC_TransmitPacket+0x7c>)
 80077d4:	7819      	ldrb	r1, [r3, #0]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f002 f845 	bl	8009872 <USBD_LL_Transmit>

    ret = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000093 	.word	0x20000093

080077fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32b0      	adds	r2, #176	@ 0xb0
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32b0      	adds	r2, #176	@ 0xb0
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	e018      	b.n	800785c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c1b      	ldrb	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007832:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <USBD_CDC_ReceivePacket+0x68>)
 8007834:	7819      	ldrb	r1, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800783c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f837 	bl	80098b4 <USBD_LL_PrepareReceive>
 8007846:	e008      	b.n	800785a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007848:	4b06      	ldr	r3, [pc, #24]	@ (8007864 <USBD_CDC_ReceivePacket+0x68>)
 800784a:	7819      	ldrb	r1, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007852:	2340      	movs	r3, #64	@ 0x40
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f002 f82d 	bl	80098b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000094 	.word	0x20000094

08007868 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4613      	mov	r3, r2
 8007874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800787c:	2303      	movs	r3, #3
 800787e:	e01f      	b.n	80078c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	79fa      	ldrb	r2, [r7, #7]
 80078b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f001 fea7 	bl	8009608 <USBD_LL_Init>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	e025      	b.n	800792c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	@ 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00f      	beq.n	800791c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32ae      	adds	r2, #174	@ 0xae
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	f107 020e 	add.w	r2, r7, #14
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	4602      	mov	r2, r0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 feaf 	bl	80096a0 <USBD_LL_Start>
 8007942:	4603      	mov	r3, r0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	4611      	mov	r1, r2
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4611      	mov	r1, r2
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 f922 	bl	8008c2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a02:	f003 031f 	and.w	r3, r3, #31
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d01a      	beq.n	8007a40 <USBD_LL_SetupStage+0x72>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d822      	bhi.n	8007a54 <USBD_LL_SetupStage+0x86>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <USBD_LL_SetupStage+0x4a>
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d00a      	beq.n	8007a2c <USBD_LL_SetupStage+0x5e>
 8007a16:	e01d      	b.n	8007a54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fb77 	bl	8008114 <USBD_StdDevReq>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2a:	e020      	b.n	8007a6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fbdf 	bl	80081f8 <USBD_StdItfReq>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3e:	e016      	b.n	8007a6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fc41 	bl	80082d0 <USBD_StdEPReq>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
      break;
 8007a52:	e00c      	b.n	8007a6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fe7c 	bl	8009760 <USBD_LL_StallEP>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	bf00      	nop
  }

  return ret;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	460b      	mov	r3, r1
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d177      	bne.n	8007b80 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	f040 80a1 	bne.w	8007be6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	8992      	ldrh	r2, [r2, #12]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d91c      	bls.n	8007aea <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	8992      	ldrh	r2, [r2, #12]
 8007ab8:	1a9a      	subs	r2, r3, r2
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	8992      	ldrh	r2, [r2, #12]
 8007ac6:	441a      	add	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6919      	ldr	r1, [r3, #16]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	899b      	ldrh	r3, [r3, #12]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4293      	cmp	r3, r2
 8007adc:	bf38      	it	cc
 8007ade:	4613      	movcc	r3, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 f9a8 	bl	8008e38 <USBD_CtlContinueRx>
 8007ae8:	e07d      	b.n	8007be6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d014      	beq.n	8007b22 <USBD_LL_DataOutStage+0xaa>
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d81d      	bhi.n	8007b38 <USBD_LL_DataOutStage+0xc0>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <USBD_LL_DataOutStage+0x8e>
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d003      	beq.n	8007b0c <USBD_LL_DataOutStage+0x94>
 8007b04:	e018      	b.n	8007b38 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75bb      	strb	r3, [r7, #22]
            break;
 8007b0a:	e018      	b.n	8007b3e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fa6e 	bl	8007ff8 <USBD_CoreFindIF>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75bb      	strb	r3, [r7, #22]
            break;
 8007b20:	e00d      	b.n	8007b3e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fa70 	bl	8008012 <USBD_CoreFindEP>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75bb      	strb	r3, [r7, #22]
            break;
 8007b36:	e002      	b.n	8007b3e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8007b3c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b3e:	7dbb      	ldrb	r3, [r7, #22]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d119      	bne.n	8007b78 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d113      	bne.n	8007b78 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b50:	7dba      	ldrb	r2, [r7, #22]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	32ae      	adds	r2, #174	@ 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007b60:	7dba      	ldrb	r2, [r7, #22]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b68:	7dba      	ldrb	r2, [r7, #22]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	32ae      	adds	r2, #174	@ 0xae
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 f96e 	bl	8008e5a <USBD_CtlSendStatus>
 8007b7e:	e032      	b.n	8007be6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	4619      	mov	r1, r3
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fa41 	bl	8008012 <USBD_CoreFindEP>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b94:	7dbb      	ldrb	r3, [r7, #22]
 8007b96:	2bff      	cmp	r3, #255	@ 0xff
 8007b98:	d025      	beq.n	8007be6 <USBD_LL_DataOutStage+0x16e>
 8007b9a:	7dbb      	ldrb	r3, [r7, #22]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d122      	bne.n	8007be6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d117      	bne.n	8007bdc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bac:	7dba      	ldrb	r2, [r7, #22]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	32ae      	adds	r2, #174	@ 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00f      	beq.n	8007bdc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007bbc:	7dba      	ldrb	r2, [r7, #22]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bc4:	7dba      	ldrb	r2, [r7, #22]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	32ae      	adds	r2, #174	@ 0xae
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	7afa      	ldrb	r2, [r7, #11]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	4798      	blx	r3
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	e000      	b.n	8007be8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d178      	bne.n	8007cf6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3314      	adds	r3, #20
 8007c08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d163      	bne.n	8007cdc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	8992      	ldrh	r2, [r2, #12]
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d91c      	bls.n	8007c5a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	8992      	ldrh	r2, [r2, #12]
 8007c28:	1a9a      	subs	r2, r3, r2
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	8992      	ldrh	r2, [r2, #12]
 8007c36:	441a      	add	r2, r3
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6919      	ldr	r1, [r3, #16]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	461a      	mov	r2, r3
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f001 f8c4 	bl	8008dd4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f001 fe2e 	bl	80098b4 <USBD_LL_PrepareReceive>
 8007c58:	e040      	b.n	8007cdc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	899b      	ldrh	r3, [r3, #12]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d11c      	bne.n	8007ca2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d316      	bcc.n	8007ca2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d20f      	bcs.n	8007ca2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c82:	2200      	movs	r2, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f001 f8a4 	bl	8008dd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c94:	2300      	movs	r3, #0
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f001 fe0a 	bl	80098b4 <USBD_LL_PrepareReceive>
 8007ca0:	e01c      	b.n	8007cdc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d10f      	bne.n	8007cce <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cce:	2180      	movs	r1, #128	@ 0x80
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f001 fd45 	bl	8009760 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 f8d2 	bl	8008e80 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d03a      	beq.n	8007d5c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fe30 	bl	800794c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007cf4:	e032      	b.n	8007d5c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f986 	bl	8008012 <USBD_CoreFindEP>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	2bff      	cmp	r3, #255	@ 0xff
 8007d0e:	d025      	beq.n	8007d5c <USBD_LL_DataInStage+0x16c>
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d122      	bne.n	8007d5c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d11c      	bne.n	8007d5c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d22:	7dfa      	ldrb	r2, [r7, #23]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	32ae      	adds	r2, #174	@ 0xae
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d014      	beq.n	8007d5c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007d32:	7dfa      	ldrb	r2, [r7, #23]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d3a:	7dfa      	ldrb	r2, [r7, #23]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	32ae      	adds	r2, #174	@ 0xae
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	7afa      	ldrb	r2, [r7, #11]
 8007d48:	4611      	mov	r1, r2
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d52:	7dbb      	ldrb	r3, [r7, #22]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007d58:	7dbb      	ldrb	r3, [r7, #22]
 8007d5a:	e000      	b.n	8007d5e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d014      	beq.n	8007dcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00e      	beq.n	8007dcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6852      	ldr	r2, [r2, #4]
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dcc:	2340      	movs	r3, #64	@ 0x40
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fc7f 	bl	80096d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2240      	movs	r2, #64	@ 0x40
 8007de4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007de8:	2340      	movs	r3, #64	@ 0x40
 8007dea:	2200      	movs	r2, #0
 8007dec:	2180      	movs	r1, #128	@ 0x80
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fc71 	bl	80096d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2240      	movs	r2, #64	@ 0x40
 8007e00:	841a      	strh	r2, [r3, #32]

  return ret;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d006      	beq.n	8007e4e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2204      	movs	r2, #4
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d106      	bne.n	8007e86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d110      	bne.n	8007eca <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32ae      	adds	r2, #174	@ 0xae
 8007eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e01c      	b.n	8007f30 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d115      	bne.n	8007f2e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	32ae      	adds	r2, #174	@ 0xae
 8007f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32ae      	adds	r2, #174	@ 0xae
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	4611      	mov	r1, r2
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	32ae      	adds	r2, #174	@ 0xae
 8007f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e01c      	b.n	8007f94 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d115      	bne.n	8007f92 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	32ae      	adds	r2, #174	@ 0xae
 8007f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32ae      	adds	r2, #174	@ 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8a:	78fa      	ldrb	r2, [r7, #3]
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00e      	beq.n	8007fee <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6852      	ldr	r2, [r2, #4]
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	4611      	mov	r1, r2
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007fea:	2303      	movs	r3, #3
 8007fec:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008004:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800801e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	885b      	ldrh	r3, [r3, #2]
 8008048:	b29b      	uxth	r3, r3
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	4293      	cmp	r3, r2
 8008050:	d91f      	bls.n	8008092 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008058:	e013      	b.n	8008082 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800805a:	f107 030a 	add.w	r3, r7, #10
 800805e:	4619      	mov	r1, r3
 8008060:	6978      	ldr	r0, [r7, #20]
 8008062:	f000 f81b 	bl	800809c <USBD_GetNextDesc>
 8008066:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b05      	cmp	r3, #5
 800806e:	d108      	bne.n	8008082 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	789b      	ldrb	r3, [r3, #2]
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	429a      	cmp	r2, r3
 800807c:	d008      	beq.n	8008090 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	b29a      	uxth	r2, r3
 8008088:	897b      	ldrh	r3, [r7, #10]
 800808a:	429a      	cmp	r2, r3
 800808c:	d8e5      	bhi.n	800805a <USBD_GetEpDesc+0x2e>
 800808e:	e000      	b.n	8008092 <USBD_GetEpDesc+0x66>
          break;
 8008090:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008092:	693b      	ldr	r3, [r7, #16]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	4413      	add	r3, r2
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4413      	add	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080c6:	68fb      	ldr	r3, [r7, #12]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	3301      	adds	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	b21a      	sxth	r2, r3
 80080fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080fe:	4313      	orrs	r3, r2
 8008100:	b21b      	sxth	r3, r3
 8008102:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008104:	89fb      	ldrh	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
	...

08008114 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800812a:	2b40      	cmp	r3, #64	@ 0x40
 800812c:	d005      	beq.n	800813a <USBD_StdDevReq+0x26>
 800812e:	2b40      	cmp	r3, #64	@ 0x40
 8008130:	d857      	bhi.n	80081e2 <USBD_StdDevReq+0xce>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00f      	beq.n	8008156 <USBD_StdDevReq+0x42>
 8008136:	2b20      	cmp	r3, #32
 8008138:	d153      	bne.n	80081e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	32ae      	adds	r2, #174	@ 0xae
 8008144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]
      break;
 8008154:	e04a      	b.n	80081ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b09      	cmp	r3, #9
 800815c:	d83b      	bhi.n	80081d6 <USBD_StdDevReq+0xc2>
 800815e:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <USBD_StdDevReq+0x50>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	080081b9 	.word	0x080081b9
 8008168:	080081cd 	.word	0x080081cd
 800816c:	080081d7 	.word	0x080081d7
 8008170:	080081c3 	.word	0x080081c3
 8008174:	080081d7 	.word	0x080081d7
 8008178:	08008197 	.word	0x08008197
 800817c:	0800818d 	.word	0x0800818d
 8008180:	080081d7 	.word	0x080081d7
 8008184:	080081af 	.word	0x080081af
 8008188:	080081a1 	.word	0x080081a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa3e 	bl	8008610 <USBD_GetDescriptor>
          break;
 8008194:	e024      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fba3 	bl	80088e4 <USBD_SetAddress>
          break;
 800819e:	e01f      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fbe2 	bl	800896c <USBD_SetConfig>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]
          break;
 80081ac:	e018      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fc85 	bl	8008ac0 <USBD_GetConfig>
          break;
 80081b6:	e013      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fcb6 	bl	8008b2c <USBD_GetStatus>
          break;
 80081c0:	e00e      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fce5 	bl	8008b94 <USBD_SetFeature>
          break;
 80081ca:	e009      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fd09 	bl	8008be6 <USBD_ClrFeature>
          break;
 80081d4:	e004      	b.n	80081e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fd60 	bl	8008c9e <USBD_CtlError>
          break;
 80081de:	bf00      	nop
      }
      break;
 80081e0:	e004      	b.n	80081ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fd5a 	bl	8008c9e <USBD_CtlError>
      break;
 80081ea:	bf00      	nop
  }

  return ret;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop

080081f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800820e:	2b40      	cmp	r3, #64	@ 0x40
 8008210:	d005      	beq.n	800821e <USBD_StdItfReq+0x26>
 8008212:	2b40      	cmp	r3, #64	@ 0x40
 8008214:	d852      	bhi.n	80082bc <USBD_StdItfReq+0xc4>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <USBD_StdItfReq+0x26>
 800821a:	2b20      	cmp	r3, #32
 800821c:	d14e      	bne.n	80082bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008224:	b2db      	uxtb	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	2b02      	cmp	r3, #2
 800822a:	d840      	bhi.n	80082ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	889b      	ldrh	r3, [r3, #4]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	d836      	bhi.n	80082a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	889b      	ldrh	r3, [r3, #4]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff feda 	bl	8007ff8 <USBD_CoreFindIF>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2bff      	cmp	r3, #255	@ 0xff
 800824c:	d01d      	beq.n	800828a <USBD_StdItfReq+0x92>
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d11a      	bne.n	800828a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008254:	7bba      	ldrb	r2, [r7, #14]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	32ae      	adds	r2, #174	@ 0xae
 800825a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00f      	beq.n	8008284 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008264:	7bba      	ldrb	r2, [r7, #14]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800826c:	7bba      	ldrb	r2, [r7, #14]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	32ae      	adds	r2, #174	@ 0xae
 8008272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008282:	e004      	b.n	800828e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008288:	e001      	b.n	800828e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800828a:	2303      	movs	r3, #3
 800828c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	88db      	ldrh	r3, [r3, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d110      	bne.n	80082b8 <USBD_StdItfReq+0xc0>
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10d      	bne.n	80082b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fddc 	bl	8008e5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082a2:	e009      	b.n	80082b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fcf9 	bl	8008c9e <USBD_CtlError>
          break;
 80082ac:	e004      	b.n	80082b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fcf4 	bl	8008c9e <USBD_CtlError>
          break;
 80082b6:	e000      	b.n	80082ba <USBD_StdItfReq+0xc2>
          break;
 80082b8:	bf00      	nop
      }
      break;
 80082ba:	e004      	b.n	80082c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fced 	bl	8008c9e <USBD_CtlError>
      break;
 80082c4:	bf00      	nop
  }

  return ret;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	889b      	ldrh	r3, [r3, #4]
 80082e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082ec:	2b40      	cmp	r3, #64	@ 0x40
 80082ee:	d007      	beq.n	8008300 <USBD_StdEPReq+0x30>
 80082f0:	2b40      	cmp	r3, #64	@ 0x40
 80082f2:	f200 8181 	bhi.w	80085f8 <USBD_StdEPReq+0x328>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d02a      	beq.n	8008350 <USBD_StdEPReq+0x80>
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	f040 817c 	bne.w	80085f8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff fe84 	bl	8008012 <USBD_CoreFindEP>
 800830a:	4603      	mov	r3, r0
 800830c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800830e:	7b7b      	ldrb	r3, [r7, #13]
 8008310:	2bff      	cmp	r3, #255	@ 0xff
 8008312:	f000 8176 	beq.w	8008602 <USBD_StdEPReq+0x332>
 8008316:	7b7b      	ldrb	r3, [r7, #13]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 8172 	bne.w	8008602 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800831e:	7b7a      	ldrb	r2, [r7, #13]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008326:	7b7a      	ldrb	r2, [r7, #13]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	32ae      	adds	r2, #174	@ 0xae
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8165 	beq.w	8008602 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008338:	7b7a      	ldrb	r2, [r7, #13]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	32ae      	adds	r2, #174	@ 0xae
 800833e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800834e:	e158      	b.n	8008602 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d008      	beq.n	800836a <USBD_StdEPReq+0x9a>
 8008358:	2b03      	cmp	r3, #3
 800835a:	f300 8147 	bgt.w	80085ec <USBD_StdEPReq+0x31c>
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 809b 	beq.w	800849a <USBD_StdEPReq+0x1ca>
 8008364:	2b01      	cmp	r3, #1
 8008366:	d03c      	beq.n	80083e2 <USBD_StdEPReq+0x112>
 8008368:	e140      	b.n	80085ec <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d002      	beq.n	800837c <USBD_StdEPReq+0xac>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d016      	beq.n	80083a8 <USBD_StdEPReq+0xd8>
 800837a:	e02c      	b.n	80083d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00d      	beq.n	800839e <USBD_StdEPReq+0xce>
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b80      	cmp	r3, #128	@ 0x80
 8008386:	d00a      	beq.n	800839e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 f9e7 	bl	8009760 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008392:	2180      	movs	r1, #128	@ 0x80
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f9e3 	bl	8009760 <USBD_LL_StallEP>
 800839a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800839c:	e020      	b.n	80083e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc7c 	bl	8008c9e <USBD_CtlError>
              break;
 80083a6:	e01b      	b.n	80083e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	885b      	ldrh	r3, [r3, #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10e      	bne.n	80083ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <USBD_StdEPReq+0xfe>
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b80      	cmp	r3, #128	@ 0x80
 80083ba:	d008      	beq.n	80083ce <USBD_StdEPReq+0xfe>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	88db      	ldrh	r3, [r3, #6]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 f9c9 	bl	8009760 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fd43 	bl	8008e5a <USBD_CtlSendStatus>

              break;
 80083d4:	e004      	b.n	80083e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc60 	bl	8008c9e <USBD_CtlError>
              break;
 80083de:	bf00      	nop
          }
          break;
 80083e0:	e109      	b.n	80085f6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d002      	beq.n	80083f4 <USBD_StdEPReq+0x124>
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d016      	beq.n	8008420 <USBD_StdEPReq+0x150>
 80083f2:	e04b      	b.n	800848c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00d      	beq.n	8008416 <USBD_StdEPReq+0x146>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b80      	cmp	r3, #128	@ 0x80
 80083fe:	d00a      	beq.n	8008416 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f9ab 	bl	8009760 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800840a:	2180      	movs	r1, #128	@ 0x80
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f9a7 	bl	8009760 <USBD_LL_StallEP>
 8008412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008414:	e040      	b.n	8008498 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc40 	bl	8008c9e <USBD_CtlError>
              break;
 800841e:	e03b      	b.n	8008498 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	885b      	ldrh	r3, [r3, #2]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d136      	bne.n	8008496 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f9b1 	bl	800979e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fd0c 	bl	8008e5a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fde3 	bl	8008012 <USBD_CoreFindEP>
 800844c:	4603      	mov	r3, r0
 800844e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008450:	7b7b      	ldrb	r3, [r7, #13]
 8008452:	2bff      	cmp	r3, #255	@ 0xff
 8008454:	d01f      	beq.n	8008496 <USBD_StdEPReq+0x1c6>
 8008456:	7b7b      	ldrb	r3, [r7, #13]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d11c      	bne.n	8008496 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800845c:	7b7a      	ldrb	r2, [r7, #13]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008464:	7b7a      	ldrb	r2, [r7, #13]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	32ae      	adds	r2, #174	@ 0xae
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d010      	beq.n	8008496 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008474:	7b7a      	ldrb	r2, [r7, #13]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	32ae      	adds	r2, #174	@ 0xae
 800847a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800848a:	e004      	b.n	8008496 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fc05 	bl	8008c9e <USBD_CtlError>
              break;
 8008494:	e000      	b.n	8008498 <USBD_StdEPReq+0x1c8>
              break;
 8008496:	bf00      	nop
          }
          break;
 8008498:	e0ad      	b.n	80085f6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d002      	beq.n	80084ac <USBD_StdEPReq+0x1dc>
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d033      	beq.n	8008512 <USBD_StdEPReq+0x242>
 80084aa:	e099      	b.n	80085e0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <USBD_StdEPReq+0x1f2>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b80      	cmp	r3, #128	@ 0x80
 80084b6:	d004      	beq.n	80084c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fbef 	bl	8008c9e <USBD_CtlError>
                break;
 80084c0:	e093      	b.n	80085ea <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da0b      	bge.n	80084e2 <USBD_StdEPReq+0x212>
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	3310      	adds	r3, #16
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	3304      	adds	r3, #4
 80084e0:	e00b      	b.n	80084fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	4413      	add	r3, r2
 80084f8:	3304      	adds	r3, #4
 80084fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2200      	movs	r2, #0
 8008500:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	330e      	adds	r3, #14
 8008506:	2202      	movs	r2, #2
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fc44 	bl	8008d98 <USBD_CtlSendData>
              break;
 8008510:	e06b      	b.n	80085ea <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008516:	2b00      	cmp	r3, #0
 8008518:	da11      	bge.n	800853e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	f003 020f 	and.w	r2, r3, #15
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	440b      	add	r3, r1
 800852c:	3323      	adds	r3, #35	@ 0x23
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d117      	bne.n	8008564 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fbb1 	bl	8008c9e <USBD_CtlError>
                  break;
 800853c:	e055      	b.n	80085ea <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	f003 020f 	and.w	r2, r3, #15
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fb9e 	bl	8008c9e <USBD_CtlError>
                  break;
 8008562:	e042      	b.n	80085ea <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008568:	2b00      	cmp	r3, #0
 800856a:	da0b      	bge.n	8008584 <USBD_StdEPReq+0x2b4>
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	3310      	adds	r3, #16
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	4413      	add	r3, r2
 8008580:	3304      	adds	r3, #4
 8008582:	e00b      	b.n	800859c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	4413      	add	r3, r2
 800859a:	3304      	adds	r3, #4
 800859c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <USBD_StdEPReq+0x2da>
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b80      	cmp	r3, #128	@ 0x80
 80085a8:	d103      	bne.n	80085b2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2200      	movs	r2, #0
 80085ae:	739a      	strb	r2, [r3, #14]
 80085b0:	e00e      	b.n	80085d0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 f910 	bl	80097dc <USBD_LL_IsStallEP>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2201      	movs	r2, #1
 80085c6:	739a      	strb	r2, [r3, #14]
 80085c8:	e002      	b.n	80085d0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	330e      	adds	r3, #14
 80085d4:	2202      	movs	r2, #2
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fbdd 	bl	8008d98 <USBD_CtlSendData>
              break;
 80085de:	e004      	b.n	80085ea <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb5b 	bl	8008c9e <USBD_CtlError>
              break;
 80085e8:	bf00      	nop
          }
          break;
 80085ea:	e004      	b.n	80085f6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fb55 	bl	8008c9e <USBD_CtlError>
          break;
 80085f4:	bf00      	nop
      }
      break;
 80085f6:	e005      	b.n	8008604 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fb4f 	bl	8008c9e <USBD_CtlError>
      break;
 8008600:	e000      	b.n	8008604 <USBD_StdEPReq+0x334>
      break;
 8008602:	bf00      	nop
  }

  return ret;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	885b      	ldrh	r3, [r3, #2]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	2b06      	cmp	r3, #6
 8008632:	f200 8128 	bhi.w	8008886 <USBD_GetDescriptor+0x276>
 8008636:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <USBD_GetDescriptor+0x2c>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008659 	.word	0x08008659
 8008640:	08008671 	.word	0x08008671
 8008644:	080086b1 	.word	0x080086b1
 8008648:	08008887 	.word	0x08008887
 800864c:	08008887 	.word	0x08008887
 8008650:	08008827 	.word	0x08008827
 8008654:	08008853 	.word	0x08008853
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
      break;
 800866e:	e112      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7c1b      	ldrb	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10d      	bne.n	8008694 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800867e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008680:	f107 0208 	add.w	r2, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	2202      	movs	r2, #2
 8008690:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008692:	e100      	b.n	8008896 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869c:	f107 0208 	add.w	r2, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
      break;
 80086ae:	e0f2      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	885b      	ldrh	r3, [r3, #2]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	f200 80ac 	bhi.w	8008814 <USBD_GetDescriptor+0x204>
 80086bc:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <USBD_GetDescriptor+0xb4>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008745 	.word	0x08008745
 80086d0:	08008779 	.word	0x08008779
 80086d4:	080087ad 	.word	0x080087ad
 80086d8:	080087e1 	.word	0x080087e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7c12      	ldrb	r2, [r2, #16]
 80086f4:	f107 0108 	add.w	r1, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fe:	e091      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 facb 	bl	8008c9e <USBD_CtlError>
            err++;
 8008708:	7afb      	ldrb	r3, [r7, #11]
 800870a:	3301      	adds	r3, #1
 800870c:	72fb      	strb	r3, [r7, #11]
          break;
 800870e:	e089      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7c12      	ldrb	r2, [r2, #16]
 8008728:	f107 0108 	add.w	r1, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008732:	e077      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fab1 	bl	8008c9e <USBD_CtlError>
            err++;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	3301      	adds	r3, #1
 8008740:	72fb      	strb	r3, [r7, #11]
          break;
 8008742:	e06f      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7c12      	ldrb	r2, [r2, #16]
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008766:	e05d      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa97 	bl	8008c9e <USBD_CtlError>
            err++;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	3301      	adds	r3, #1
 8008774:	72fb      	strb	r3, [r7, #11]
          break;
 8008776:	e055      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	7c12      	ldrb	r2, [r2, #16]
 8008790:	f107 0108 	add.w	r1, r7, #8
 8008794:	4610      	mov	r0, r2
 8008796:	4798      	blx	r3
 8008798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879a:	e043      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa7d 	bl	8008c9e <USBD_CtlError>
            err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
          break;
 80087aa:	e03b      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7c12      	ldrb	r2, [r2, #16]
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ce:	e029      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa63 	bl	8008c9e <USBD_CtlError>
            err++;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	3301      	adds	r3, #1
 80087dc:	72fb      	strb	r3, [r7, #11]
          break;
 80087de:	e021      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7c12      	ldrb	r2, [r2, #16]
 80087f8:	f107 0108 	add.w	r1, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008802:	e00f      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa49 	bl	8008c9e <USBD_CtlError>
            err++;
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	3301      	adds	r3, #1
 8008810:	72fb      	strb	r3, [r7, #11]
          break;
 8008812:	e007      	b.n	8008824 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa41 	bl	8008c9e <USBD_CtlError>
          err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008822:	bf00      	nop
      }
      break;
 8008824:	e037      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7c1b      	ldrb	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008836:	f107 0208 	add.w	r2, r7, #8
 800883a:	4610      	mov	r0, r2
 800883c:	4798      	blx	r3
 800883e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008840:	e029      	b.n	8008896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fa2a 	bl	8008c9e <USBD_CtlError>
        err++;
 800884a:	7afb      	ldrb	r3, [r7, #11]
 800884c:	3301      	adds	r3, #1
 800884e:	72fb      	strb	r3, [r7, #11]
      break;
 8008850:	e021      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7c1b      	ldrb	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10d      	bne.n	8008876 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008862:	f107 0208 	add.w	r2, r7, #8
 8008866:	4610      	mov	r0, r2
 8008868:	4798      	blx	r3
 800886a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	2207      	movs	r2, #7
 8008872:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008874:	e00f      	b.n	8008896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fa10 	bl	8008c9e <USBD_CtlError>
        err++;
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	3301      	adds	r3, #1
 8008882:	72fb      	strb	r3, [r7, #11]
      break;
 8008884:	e007      	b.n	8008896 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fa08 	bl	8008c9e <USBD_CtlError>
      err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	bf00      	nop
  }

  if (err != 0U)
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d11e      	bne.n	80088da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	88db      	ldrh	r3, [r3, #6]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d016      	beq.n	80088d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088a4:	893b      	ldrh	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00e      	beq.n	80088c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	88da      	ldrh	r2, [r3, #6]
 80088ae:	893b      	ldrh	r3, [r7, #8]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	bf28      	it	cs
 80088b4:	4613      	movcs	r3, r2
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ba:	893b      	ldrh	r3, [r7, #8]
 80088bc:	461a      	mov	r2, r3
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa69 	bl	8008d98 <USBD_CtlSendData>
 80088c6:	e009      	b.n	80088dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f9e7 	bl	8008c9e <USBD_CtlError>
 80088d0:	e004      	b.n	80088dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fac1 	bl	8008e5a <USBD_CtlSendStatus>
 80088d8:	e000      	b.n	80088dc <USBD_GetDescriptor+0x2cc>
    return;
 80088da:	bf00      	nop
  }
}
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop

080088e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	889b      	ldrh	r3, [r3, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d131      	bne.n	800895a <USBD_SetAddress+0x76>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	88db      	ldrh	r3, [r3, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d12d      	bne.n	800895a <USBD_SetAddress+0x76>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	2b7f      	cmp	r3, #127	@ 0x7f
 8008904:	d829      	bhi.n	800895a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008910:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d104      	bne.n	8008928 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9bc 	bl	8008c9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008926:	e01d      	b.n	8008964 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7bfa      	ldrb	r2, [r7, #15]
 800892c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 ff7d 	bl	8009834 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa8d 	bl	8008e5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2202      	movs	r2, #2
 800894a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	e009      	b.n	8008964 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	e004      	b.n	8008964 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f99e 	bl	8008c9e <USBD_CtlError>
  }
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	885b      	ldrh	r3, [r3, #2]
 800897e:	b2da      	uxtb	r2, r3
 8008980:	4b4e      	ldr	r3, [pc, #312]	@ (8008abc <USBD_SetConfig+0x150>)
 8008982:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008984:	4b4d      	ldr	r3, [pc, #308]	@ (8008abc <USBD_SetConfig+0x150>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d905      	bls.n	8008998 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f985 	bl	8008c9e <USBD_CtlError>
    return USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	e08c      	b.n	8008ab2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d002      	beq.n	80089aa <USBD_SetConfig+0x3e>
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d029      	beq.n	80089fc <USBD_SetConfig+0x90>
 80089a8:	e075      	b.n	8008a96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089aa:	4b44      	ldr	r3, [pc, #272]	@ (8008abc <USBD_SetConfig+0x150>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d020      	beq.n	80089f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089b2:	4b42      	ldr	r3, [pc, #264]	@ (8008abc <USBD_SetConfig+0x150>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089bc:	4b3f      	ldr	r3, [pc, #252]	@ (8008abc <USBD_SetConfig+0x150>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fe ffcd 	bl	8007962 <USBD_SetClassConfig>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f962 	bl	8008c9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089e2:	e065      	b.n	8008ab0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fa38 	bl	8008e5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2203      	movs	r2, #3
 80089ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80089f2:	e05d      	b.n	8008ab0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fa30 	bl	8008e5a <USBD_CtlSendStatus>
      break;
 80089fa:	e059      	b.n	8008ab0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089fc:	4b2f      	ldr	r3, [pc, #188]	@ (8008abc <USBD_SetConfig+0x150>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d112      	bne.n	8008a2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008abc <USBD_SetConfig+0x150>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a16:	4b29      	ldr	r3, [pc, #164]	@ (8008abc <USBD_SetConfig+0x150>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7fe ffbc 	bl	800799a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa19 	bl	8008e5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a28:	e042      	b.n	8008ab0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a2a:	4b24      	ldr	r3, [pc, #144]	@ (8008abc <USBD_SetConfig+0x150>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d02a      	beq.n	8008a8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7fe ffaa 	bl	800799a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a46:	4b1d      	ldr	r3, [pc, #116]	@ (8008abc <USBD_SetConfig+0x150>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a50:	4b1a      	ldr	r3, [pc, #104]	@ (8008abc <USBD_SetConfig+0x150>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fe ff83 	bl	8007962 <USBD_SetClassConfig>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f918 	bl	8008c9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe ff8f 	bl	800799a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a84:	e014      	b.n	8008ab0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9e7 	bl	8008e5a <USBD_CtlSendStatus>
      break;
 8008a8c:	e010      	b.n	8008ab0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9e3 	bl	8008e5a <USBD_CtlSendStatus>
      break;
 8008a94:	e00c      	b.n	8008ab0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f900 	bl	8008c9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a9e:	4b07      	ldr	r3, [pc, #28]	@ (8008abc <USBD_SetConfig+0x150>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fe ff78 	bl	800799a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	bf00      	nop
  }

  return ret;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000480 	.word	0x20000480

08008ac0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d004      	beq.n	8008adc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8e2 	bl	8008c9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ada:	e023      	b.n	8008b24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	dc02      	bgt.n	8008aee <USBD_GetConfig+0x2e>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc03      	bgt.n	8008af4 <USBD_GetConfig+0x34>
 8008aec:	e015      	b.n	8008b1a <USBD_GetConfig+0x5a>
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d00b      	beq.n	8008b0a <USBD_GetConfig+0x4a>
 8008af2:	e012      	b.n	8008b1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3308      	adds	r3, #8
 8008afe:	2201      	movs	r2, #1
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f948 	bl	8008d98 <USBD_CtlSendData>
        break;
 8008b08:	e00c      	b.n	8008b24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f940 	bl	8008d98 <USBD_CtlSendData>
        break;
 8008b18:	e004      	b.n	8008b24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8be 	bl	8008c9e <USBD_CtlError>
        break;
 8008b22:	bf00      	nop
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d81e      	bhi.n	8008b82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d004      	beq.n	8008b56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8a5 	bl	8008c9e <USBD_CtlError>
        break;
 8008b54:	e01a      	b.n	8008b8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f043 0202 	orr.w	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	330c      	adds	r3, #12
 8008b76:	2202      	movs	r2, #2
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f90c 	bl	8008d98 <USBD_CtlSendData>
      break;
 8008b80:	e004      	b.n	8008b8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f88a 	bl	8008c9e <USBD_CtlError>
      break;
 8008b8a:	bf00      	nop
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d107      	bne.n	8008bb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f953 	bl	8008e5a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bb4:	e013      	b.n	8008bde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	885b      	ldrh	r3, [r3, #2]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d10b      	bne.n	8008bd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	889b      	ldrh	r3, [r3, #4]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f943 	bl	8008e5a <USBD_CtlSendStatus>
}
 8008bd4:	e003      	b.n	8008bde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f860 	bl	8008c9e <USBD_CtlError>
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d80b      	bhi.n	8008c16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	885b      	ldrh	r3, [r3, #2]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10c      	bne.n	8008c20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f923 	bl	8008e5a <USBD_CtlSendStatus>
      }
      break;
 8008c14:	e004      	b.n	8008c20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f840 	bl	8008c9e <USBD_CtlError>
      break;
 8008c1e:	e000      	b.n	8008c22 <USBD_ClrFeature+0x3c>
      break;
 8008c20:	bf00      	nop
  }
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7ff fa3d 	bl	80080d4 <SWAPBYTE>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3301      	adds	r3, #1
 8008c66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff fa30 	bl	80080d4 <SWAPBYTE>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3301      	adds	r3, #1
 8008c86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f7ff fa23 	bl	80080d4 <SWAPBYTE>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	461a      	mov	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	80da      	strh	r2, [r3, #6]
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ca8:	2180      	movs	r1, #128	@ 0x80
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fd58 	bl	8009760 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fd54 	bl	8009760 <USBD_LL_StallEP>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d042      	beq.n	8008d5c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008cda:	6938      	ldr	r0, [r7, #16]
 8008cdc:	f000 f842 	bl	8008d64 <USBD_GetLen>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cea:	d808      	bhi.n	8008cfe <USBD_GetString+0x3e>
 8008cec:	6938      	ldr	r0, [r7, #16]
 8008cee:	f000 f839 	bl	8008d64 <USBD_GetLen>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	e001      	b.n	8008d02 <USBD_GetString+0x42>
 8008cfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	7812      	ldrb	r2, [r2, #0]
 8008d10:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	3301      	adds	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	2203      	movs	r2, #3
 8008d20:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	3301      	adds	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d28:	e013      	b.n	8008d52 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	4413      	add	r3, r2
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
    idx++;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	4413      	add	r3, r2
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e7      	bne.n	8008d2a <USBD_GetString+0x6a>
 8008d5a:	e000      	b.n	8008d5e <USBD_GetString+0x9e>
    return;
 8008d5c:	bf00      	nop
  }
}
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d74:	e005      	b.n	8008d82 <USBD_GetLen+0x1e>
  {
    len++;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f5      	bne.n	8008d76 <USBD_GetLen+0x12>
  }

  return len;
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fd54 	bl	8009872 <USBD_LL_Transmit>

  return USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fd43 	bl	8009872 <USBD_LL_Transmit>

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2203      	movs	r2, #3
 8008e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fd43 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	2100      	movs	r1, #0
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fd32 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2204      	movs	r2, #4
 8008e66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2100      	movs	r1, #0
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fcfe 	bl	8009872 <USBD_LL_Transmit>

  return USBD_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e90:	2300      	movs	r3, #0
 8008e92:	2200      	movs	r2, #0
 8008e94:	2100      	movs	r1, #0
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd0c 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008eac:	2200      	movs	r2, #0
 8008eae:	4912      	ldr	r1, [pc, #72]	@ (8008ef8 <MX_USB_DEVICE_Init+0x50>)
 8008eb0:	4812      	ldr	r0, [pc, #72]	@ (8008efc <MX_USB_DEVICE_Init+0x54>)
 8008eb2:	f7fe fcd9 	bl	8007868 <USBD_Init>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ebc:	f7f8 faca 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ec0:	490f      	ldr	r1, [pc, #60]	@ (8008f00 <MX_USB_DEVICE_Init+0x58>)
 8008ec2:	480e      	ldr	r0, [pc, #56]	@ (8008efc <MX_USB_DEVICE_Init+0x54>)
 8008ec4:	f7fe fd00 	bl	80078c8 <USBD_RegisterClass>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ece:	f7f8 fac1 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ed2:	490c      	ldr	r1, [pc, #48]	@ (8008f04 <MX_USB_DEVICE_Init+0x5c>)
 8008ed4:	4809      	ldr	r0, [pc, #36]	@ (8008efc <MX_USB_DEVICE_Init+0x54>)
 8008ed6:	f7fe fbf7 	bl	80076c8 <USBD_CDC_RegisterInterface>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ee0:	f7f8 fab8 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ee4:	4805      	ldr	r0, [pc, #20]	@ (8008efc <MX_USB_DEVICE_Init+0x54>)
 8008ee6:	f7fe fd25 	bl	8007934 <USBD_Start>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ef0:	f7f8 fab0 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ef4:	bf00      	nop
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200000ac 	.word	0x200000ac
 8008efc:	20000484 	.word	0x20000484
 8008f00:	20000018 	.word	0x20000018
 8008f04:	20000098 	.word	0x20000098

08008f08 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4905      	ldr	r1, [pc, #20]	@ (8008f24 <CDC_Init_FS+0x1c>)
 8008f10:	4805      	ldr	r0, [pc, #20]	@ (8008f28 <CDC_Init_FS+0x20>)
 8008f12:	f7fe fbf3 	bl	80076fc <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f16:	4905      	ldr	r1, [pc, #20]	@ (8008f2c <CDC_Init_FS+0x24>)
 8008f18:	4803      	ldr	r0, [pc, #12]	@ (8008f28 <CDC_Init_FS+0x20>)
 8008f1a:	f7fe fc11 	bl	8007740 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008f1e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20001064 	.word	0x20001064
 8008f28:	20000484 	.word	0x20000484
 8008f2c:	20000864 	.word	0x20000864

08008f30 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8008f34:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b23      	cmp	r3, #35	@ 0x23
 8008f54:	d84a      	bhi.n	8008fec <CDC_Control_FS+0xac>
 8008f56:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <CDC_Control_FS+0x1c>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008fed 	.word	0x08008fed
 8008f60:	08008fed 	.word	0x08008fed
 8008f64:	08008fed 	.word	0x08008fed
 8008f68:	08008fed 	.word	0x08008fed
 8008f6c:	08008fed 	.word	0x08008fed
 8008f70:	08008fed 	.word	0x08008fed
 8008f74:	08008fed 	.word	0x08008fed
 8008f78:	08008fed 	.word	0x08008fed
 8008f7c:	08008fed 	.word	0x08008fed
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	08008fed 	.word	0x08008fed
 8008f8c:	08008fed 	.word	0x08008fed
 8008f90:	08008fed 	.word	0x08008fed
 8008f94:	08008fed 	.word	0x08008fed
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008fed 	.word	0x08008fed
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08008fed 	.word	0x08008fed
 8008fac:	08008fed 	.word	0x08008fed
 8008fb0:	08008fed 	.word	0x08008fed
 8008fb4:	08008fed 	.word	0x08008fed
 8008fb8:	08008fed 	.word	0x08008fed
 8008fbc:	08008fed 	.word	0x08008fed
 8008fc0:	08008fed 	.word	0x08008fed
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08008fed 	.word	0x08008fed
 8008fd0:	08008fed 	.word	0x08008fed
 8008fd4:	08008fed 	.word	0x08008fed
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08008fed 	.word	0x08008fed
 8008fe0:	08008fed 	.word	0x08008fed
 8008fe4:	08008fed 	.word	0x08008fed
 8008fe8:	08008fed 	.word	0x08008fed
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008fec:	bf00      	nop
	}

	return (USBD_OK);
 8008fee:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4805      	ldr	r0, [pc, #20]	@ (8009020 <CDC_Receive_FS+0x24>)
 800900a:	f7fe fb99 	bl	8007740 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800900e:	4804      	ldr	r0, [pc, #16]	@ (8009020 <CDC_Receive_FS+0x24>)
 8009010:	f7fe fbf4 	bl	80077fc <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009014:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000484 	.word	0x20000484

08009024 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	flush_tx_fifo(); //try to send the next chunk
 8009036:	f000 f83f 	bl	80090b8 <flush_tx_fifo>
	/* USER CODE END 13 */
	return result;
 800903a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <CDC_Transmit_NonBlocking>:

//copies len bytes from the sender into the ring buffer, parks the data
//each time we store a byte into ring buffer, we advance head. If the next
// position is colliding with the tail, we return busy.
uint8_t CDC_Transmit_NonBlocking(const uint8_t *p, uint16_t len)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	807b      	strh	r3, [r7, #2]
	while (len--){
 8009054:	e01d      	b.n	8009092 <CDC_Transmit_NonBlocking+0x4a>
		uint16_t next = (head + 1) % TX_BUF_SIZE;
 8009056:	4b15      	ldr	r3, [pc, #84]	@ (80090ac <CDC_Transmit_NonBlocking+0x64>)
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	3301      	adds	r3, #1
 800905e:	425a      	negs	r2, r3
 8009060:	b2db      	uxtb	r3, r3
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	bf58      	it	pl
 8009066:	4253      	negpl	r3, r2
 8009068:	81fb      	strh	r3, [r7, #14]
		if(next == tail)
 800906a:	4b11      	ldr	r3, [pc, #68]	@ (80090b0 <CDC_Transmit_NonBlocking+0x68>)
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	89fa      	ldrh	r2, [r7, #14]
 8009072:	429a      	cmp	r2, r3
 8009074:	d101      	bne.n	800907a <CDC_Transmit_NonBlocking+0x32>
			return USBD_BUSY; //buffer full
 8009076:	2301      	movs	r3, #1
 8009078:	e011      	b.n	800909e <CDC_Transmit_NonBlocking+0x56>
		txBuf[head] = *p++;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <CDC_Transmit_NonBlocking+0x64>)
 8009082:	8812      	ldrh	r2, [r2, #0]
 8009084:	b292      	uxth	r2, r2
 8009086:	7819      	ldrb	r1, [r3, #0]
 8009088:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <CDC_Transmit_NonBlocking+0x6c>)
 800908a:	5499      	strb	r1, [r3, r2]
		head = next;
 800908c:	4a07      	ldr	r2, [pc, #28]	@ (80090ac <CDC_Transmit_NonBlocking+0x64>)
 800908e:	89fb      	ldrh	r3, [r7, #14]
 8009090:	8013      	strh	r3, [r2, #0]
	while (len--){
 8009092:	887b      	ldrh	r3, [r7, #2]
 8009094:	1e5a      	subs	r2, r3, #1
 8009096:	807a      	strh	r2, [r7, #2]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1dc      	bne.n	8009056 <CDC_Transmit_NonBlocking+0xe>
	}
	return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20000860 	.word	0x20000860
 80090b0:	20000862 	.word	0x20000862
 80090b4:	20000760 	.word	0x20000760

080090b8 <flush_tx_fifo>:
// If the device is configured, and there is something in the fifo, it ships
//one continous chunk to USB stack. Will drain the buffer, called repetaedly.
// decide how many bytes are consecutive between head and tail
// kick transfer, advance tail on success
static void flush_tx_fifo(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
	if(tail == head || hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) //if full or USB not configured
 80090be:	4b23      	ldr	r3, [pc, #140]	@ (800914c <flush_tx_fifo+0x94>)
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	4b22      	ldr	r3, [pc, #136]	@ (8009150 <flush_tx_fifo+0x98>)
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d03a      	beq.n	8009144 <flush_tx_fifo+0x8c>
 80090ce:	4b21      	ldr	r3, [pc, #132]	@ (8009154 <flush_tx_fifo+0x9c>)
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d134      	bne.n	8009144 <flush_tx_fifo+0x8c>
		return;

	uint16_t len = (head >= tail) ? (head - tail) : (TX_BUF_SIZE - tail); //how many bytes are in there, decide
 80090da:	4b1d      	ldr	r3, [pc, #116]	@ (8009150 <flush_tx_fifo+0x98>)
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	4b1a      	ldr	r3, [pc, #104]	@ (800914c <flush_tx_fifo+0x94>)
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d308      	bcc.n	80090fc <flush_tx_fifo+0x44>
 80090ea:	4b19      	ldr	r3, [pc, #100]	@ (8009150 <flush_tx_fifo+0x98>)
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	4b16      	ldr	r3, [pc, #88]	@ (800914c <flush_tx_fifo+0x94>)
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	e005      	b.n	8009108 <flush_tx_fifo+0x50>
 80090fc:	4b13      	ldr	r3, [pc, #76]	@ (800914c <flush_tx_fifo+0x94>)
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	b29b      	uxth	r3, r3
 8009102:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8009106:	b29b      	uxth	r3, r3
 8009108:	80fb      	strh	r3, [r7, #6]
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &txBuf[tail], len); //points USB to that region
 800910a:	4b10      	ldr	r3, [pc, #64]	@ (800914c <flush_tx_fifo+0x94>)
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	b29b      	uxth	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	4b11      	ldr	r3, [pc, #68]	@ (8009158 <flush_tx_fifo+0xa0>)
 8009114:	4413      	add	r3, r2
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	4619      	mov	r1, r3
 800911a:	480e      	ldr	r0, [pc, #56]	@ (8009154 <flush_tx_fifo+0x9c>)
 800911c:	f7fe faee 	bl	80076fc <USBD_CDC_SetTxBuffer>

	if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK) //kick transfer, advance the tail on success
 8009120:	480c      	ldr	r0, [pc, #48]	@ (8009154 <flush_tx_fifo+0x9c>)
 8009122:	f7fe fb2b 	bl	800777c <USBD_CDC_TransmitPacket>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10c      	bne.n	8009146 <flush_tx_fifo+0x8e>
		tail = (tail + len) & TX_BUF_SIZE;
 800912c:	4b07      	ldr	r3, [pc, #28]	@ (800914c <flush_tx_fifo+0x94>)
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	b29a      	uxth	r2, r3
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	4413      	add	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913c:	b29a      	uxth	r2, r3
 800913e:	4b03      	ldr	r3, [pc, #12]	@ (800914c <flush_tx_fifo+0x94>)
 8009140:	801a      	strh	r2, [r3, #0]
 8009142:	e000      	b.n	8009146 <flush_tx_fifo+0x8e>
		return;
 8009144:	bf00      	nop
}
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20000862 	.word	0x20000862
 8009150:	20000860 	.word	0x20000860
 8009154:	20000484 	.word	0x20000484
 8009158:	20000760 	.word	0x20000760

0800915c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2212      	movs	r2, #18
 800916c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800916e:	4b03      	ldr	r3, [pc, #12]	@ (800917c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	200000c8 	.word	0x200000c8

08009180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2204      	movs	r2, #4
 8009190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009192:	4b03      	ldr	r3, [pc, #12]	@ (80091a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	200000dc 	.word	0x200000dc

080091a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	6039      	str	r1, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d105      	bne.n	80091c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4907      	ldr	r1, [pc, #28]	@ (80091d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80091ba:	4808      	ldr	r0, [pc, #32]	@ (80091dc <USBD_FS_ProductStrDescriptor+0x38>)
 80091bc:	f7ff fd80 	bl	8008cc0 <USBD_GetString>
 80091c0:	e004      	b.n	80091cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4904      	ldr	r1, [pc, #16]	@ (80091d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80091c6:	4805      	ldr	r0, [pc, #20]	@ (80091dc <USBD_FS_ProductStrDescriptor+0x38>)
 80091c8:	f7ff fd7a 	bl	8008cc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091cc:	4b02      	ldr	r3, [pc, #8]	@ (80091d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20001864 	.word	0x20001864
 80091dc:	0800c310 	.word	0x0800c310

080091e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	4904      	ldr	r1, [pc, #16]	@ (8009200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091f0:	4804      	ldr	r0, [pc, #16]	@ (8009204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091f2:	f7ff fd65 	bl	8008cc0 <USBD_GetString>
  return USBD_StrDesc;
 80091f6:	4b02      	ldr	r3, [pc, #8]	@ (8009200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20001864 	.word	0x20001864
 8009204:	0800c328 	.word	0x0800c328

08009208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	221a      	movs	r2, #26
 8009218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800921a:	f000 f843 	bl	80092a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800921e:	4b02      	ldr	r3, [pc, #8]	@ (8009228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	200000e0 	.word	0x200000e0

0800922c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d105      	bne.n	800924a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4907      	ldr	r1, [pc, #28]	@ (8009260 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009242:	4808      	ldr	r0, [pc, #32]	@ (8009264 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009244:	f7ff fd3c 	bl	8008cc0 <USBD_GetString>
 8009248:	e004      	b.n	8009254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4904      	ldr	r1, [pc, #16]	@ (8009260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800924e:	4805      	ldr	r0, [pc, #20]	@ (8009264 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009250:	f7ff fd36 	bl	8008cc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009254:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20001864 	.word	0x20001864
 8009264:	0800c33c 	.word	0x0800c33c

08009268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4907      	ldr	r1, [pc, #28]	@ (800929c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800927e:	4808      	ldr	r0, [pc, #32]	@ (80092a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009280:	f7ff fd1e 	bl	8008cc0 <USBD_GetString>
 8009284:	e004      	b.n	8009290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4904      	ldr	r1, [pc, #16]	@ (800929c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800928a:	4805      	ldr	r0, [pc, #20]	@ (80092a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800928c:	f7ff fd18 	bl	8008cc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009290:	4b02      	ldr	r3, [pc, #8]	@ (800929c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20001864 	.word	0x20001864
 80092a0:	0800c348 	.word	0x0800c348

080092a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092aa:	4b0f      	ldr	r3, [pc, #60]	@ (80092e8 <Get_SerialNum+0x44>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092b0:	4b0e      	ldr	r3, [pc, #56]	@ (80092ec <Get_SerialNum+0x48>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092b6:	4b0e      	ldr	r3, [pc, #56]	@ (80092f0 <Get_SerialNum+0x4c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4413      	add	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092ca:	2208      	movs	r2, #8
 80092cc:	4909      	ldr	r1, [pc, #36]	@ (80092f4 <Get_SerialNum+0x50>)
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f814 	bl	80092fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092d4:	2204      	movs	r2, #4
 80092d6:	4908      	ldr	r1, [pc, #32]	@ (80092f8 <Get_SerialNum+0x54>)
 80092d8:	68b8      	ldr	r0, [r7, #8]
 80092da:	f000 f80f 	bl	80092fc <IntToUnicode>
  }
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	1fff7a10 	.word	0x1fff7a10
 80092ec:	1fff7a14 	.word	0x1fff7a14
 80092f0:	1fff7a18 	.word	0x1fff7a18
 80092f4:	200000e2 	.word	0x200000e2
 80092f8:	200000f2 	.word	0x200000f2

080092fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800930e:	2300      	movs	r3, #0
 8009310:	75fb      	strb	r3, [r7, #23]
 8009312:	e027      	b.n	8009364 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	0f1b      	lsrs	r3, r3, #28
 8009318:	2b09      	cmp	r3, #9
 800931a:	d80b      	bhi.n	8009334 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	0f1b      	lsrs	r3, r3, #28
 8009320:	b2da      	uxtb	r2, r3
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4619      	mov	r1, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	440b      	add	r3, r1
 800932c:	3230      	adds	r2, #48	@ 0x30
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e00a      	b.n	800934a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	0f1b      	lsrs	r3, r3, #28
 8009338:	b2da      	uxtb	r2, r3
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4619      	mov	r1, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	440b      	add	r3, r1
 8009344:	3237      	adds	r2, #55	@ 0x37
 8009346:	b2d2      	uxtb	r2, r2
 8009348:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	3301      	adds	r3, #1
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	4413      	add	r3, r2
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	3301      	adds	r3, #1
 8009362:	75fb      	strb	r3, [r7, #23]
 8009364:	7dfa      	ldrb	r2, [r7, #23]
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	429a      	cmp	r2, r3
 800936a:	d3d3      	bcc.n	8009314 <IntToUnicode+0x18>
  }
}
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	@ 0x28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009384:	f107 0314 	add.w	r3, r7, #20
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	609a      	str	r2, [r3, #8]
 8009390:	60da      	str	r2, [r3, #12]
 8009392:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800939c:	d13a      	bne.n	8009414 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800939e:	2300      	movs	r3, #0
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	4b1e      	ldr	r3, [pc, #120]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a6:	4a1d      	ldr	r2, [pc, #116]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093a8:	f043 0301 	orr.w	r3, r3, #1
 80093ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80093ae:	4b1b      	ldr	r3, [pc, #108]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	613b      	str	r3, [r7, #16]
 80093b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80093be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093c0:	2302      	movs	r3, #2
 80093c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093c8:	2303      	movs	r3, #3
 80093ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093cc:	230a      	movs	r3, #10
 80093ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093d0:	f107 0314 	add.w	r3, r7, #20
 80093d4:	4619      	mov	r1, r3
 80093d6:	4812      	ldr	r0, [pc, #72]	@ (8009420 <HAL_PCD_MspInit+0xa4>)
 80093d8:	f7f9 fcb0 	bl	8002d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093dc:	4b0f      	ldr	r3, [pc, #60]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e0:	4a0e      	ldr	r2, [pc, #56]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	4b0b      	ldr	r3, [pc, #44]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f0:	4a0a      	ldr	r2, [pc, #40]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80093f8:	4b08      	ldr	r3, [pc, #32]	@ (800941c <HAL_PCD_MspInit+0xa0>)
 80093fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009404:	2200      	movs	r2, #0
 8009406:	2100      	movs	r1, #0
 8009408:	2043      	movs	r0, #67	@ 0x43
 800940a:	f7f9 f8f0 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800940e:	2043      	movs	r0, #67	@ 0x43
 8009410:	f7f9 f909 	bl	8002626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009414:	bf00      	nop
 8009416:	3728      	adds	r7, #40	@ 0x28
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	40023800 	.word	0x40023800
 8009420:	40020000 	.word	0x40020000

08009424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f7fe fac7 	bl	80079ce <USBD_LL_SetupStage>
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	4619      	mov	r1, r3
 8009472:	f7fe fb01 	bl	8007a78 <USBD_LL_DataOutStage>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	4613      	mov	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	440b      	add	r3, r1
 800949e:	3320      	adds	r3, #32
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	4619      	mov	r1, r3
 80094a6:	f7fe fba3 	bl	8007bf0 <USBD_LL_DataInStage>
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe fce7 	bl	8007e94 <USBD_LL_SOF>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094d6:	2301      	movs	r3, #1
 80094d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	79db      	ldrb	r3, [r3, #7]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d102      	bne.n	80094e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
 80094e6:	e008      	b.n	80094fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	79db      	ldrb	r3, [r3, #7]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d102      	bne.n	80094f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	e001      	b.n	80094fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80094f6:	f7f7 ffad 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009500:	7bfa      	ldrb	r2, [r7, #15]
 8009502:	4611      	mov	r1, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fc81 	bl	8007e0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fc28 	bl	8007d66 <USBD_LL_Reset>
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fc7c 	bl	8007e2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6812      	ldr	r2, [r2, #0]
 8009542:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009546:	f043 0301 	orr.w	r3, r3, #1
 800954a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7adb      	ldrb	r3, [r3, #11]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009554:	4b04      	ldr	r3, [pc, #16]	@ (8009568 <HAL_PCD_SuspendCallback+0x48>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4a03      	ldr	r2, [pc, #12]	@ (8009568 <HAL_PCD_SuspendCallback+0x48>)
 800955a:	f043 0306 	orr.w	r3, r3, #6
 800955e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	e000ed00 	.word	0xe000ed00

0800956c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fc72 	bl	8007e64 <USBD_LL_Resume>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fcca 	bl	8007f38 <USBD_LL_IsoOUTIncomplete>
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fc86 	bl	8007ed4 <USBD_LL_IsoINIncomplete>
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe fcdc 	bl	8007f9c <USBD_LL_DevConnected>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe fcd9 	bl	8007fb2 <USBD_LL_DevDisconnected>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d13c      	bne.n	8009692 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009618:	4a20      	ldr	r2, [pc, #128]	@ (800969c <USBD_LL_Init+0x94>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1e      	ldr	r2, [pc, #120]	@ (800969c <USBD_LL_Init+0x94>)
 8009624:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009628:	4b1c      	ldr	r3, [pc, #112]	@ (800969c <USBD_LL_Init+0x94>)
 800962a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800962e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009630:	4b1a      	ldr	r3, [pc, #104]	@ (800969c <USBD_LL_Init+0x94>)
 8009632:	2204      	movs	r2, #4
 8009634:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009636:	4b19      	ldr	r3, [pc, #100]	@ (800969c <USBD_LL_Init+0x94>)
 8009638:	2202      	movs	r2, #2
 800963a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800963c:	4b17      	ldr	r3, [pc, #92]	@ (800969c <USBD_LL_Init+0x94>)
 800963e:	2200      	movs	r2, #0
 8009640:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009642:	4b16      	ldr	r3, [pc, #88]	@ (800969c <USBD_LL_Init+0x94>)
 8009644:	2202      	movs	r2, #2
 8009646:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009648:	4b14      	ldr	r3, [pc, #80]	@ (800969c <USBD_LL_Init+0x94>)
 800964a:	2200      	movs	r2, #0
 800964c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800964e:	4b13      	ldr	r3, [pc, #76]	@ (800969c <USBD_LL_Init+0x94>)
 8009650:	2200      	movs	r2, #0
 8009652:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009654:	4b11      	ldr	r3, [pc, #68]	@ (800969c <USBD_LL_Init+0x94>)
 8009656:	2200      	movs	r2, #0
 8009658:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800965a:	4b10      	ldr	r3, [pc, #64]	@ (800969c <USBD_LL_Init+0x94>)
 800965c:	2200      	movs	r2, #0
 800965e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009660:	4b0e      	ldr	r3, [pc, #56]	@ (800969c <USBD_LL_Init+0x94>)
 8009662:	2200      	movs	r2, #0
 8009664:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009666:	480d      	ldr	r0, [pc, #52]	@ (800969c <USBD_LL_Init+0x94>)
 8009668:	f7f9 fd50 	bl	800310c <HAL_PCD_Init>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009672:	f7f7 feef 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009676:	2180      	movs	r1, #128	@ 0x80
 8009678:	4808      	ldr	r0, [pc, #32]	@ (800969c <USBD_LL_Init+0x94>)
 800967a:	f7fa ff7c 	bl	8004576 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800967e:	2240      	movs	r2, #64	@ 0x40
 8009680:	2100      	movs	r1, #0
 8009682:	4806      	ldr	r0, [pc, #24]	@ (800969c <USBD_LL_Init+0x94>)
 8009684:	f7fa ff30 	bl	80044e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009688:	2280      	movs	r2, #128	@ 0x80
 800968a:	2101      	movs	r1, #1
 800968c:	4803      	ldr	r0, [pc, #12]	@ (800969c <USBD_LL_Init+0x94>)
 800968e:	f7fa ff2b 	bl	80044e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20001a64 	.word	0x20001a64

080096a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7f9 fe37 	bl	800332a <HAL_PCD_Start>
 80096bc:	4603      	mov	r3, r0
 80096be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f942 	bl	800994c <USBD_Get_USB_Status>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	4608      	mov	r0, r1
 80096e0:	4611      	mov	r1, r2
 80096e2:	461a      	mov	r2, r3
 80096e4:	4603      	mov	r3, r0
 80096e6:	70fb      	strb	r3, [r7, #3]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70bb      	strb	r3, [r7, #2]
 80096ec:	4613      	mov	r3, r2
 80096ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096fe:	78bb      	ldrb	r3, [r7, #2]
 8009700:	883a      	ldrh	r2, [r7, #0]
 8009702:	78f9      	ldrb	r1, [r7, #3]
 8009704:	f7fa fb0b 	bl	8003d1e <HAL_PCD_EP_Open>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f91c 	bl	800994c <USBD_Get_USB_Status>
 8009714:	4603      	mov	r3, r0
 8009716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009718:	7bbb      	ldrb	r3, [r7, #14]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800973c:	78fa      	ldrb	r2, [r7, #3]
 800973e:	4611      	mov	r1, r2
 8009740:	4618      	mov	r0, r3
 8009742:	f7fa fb56 	bl	8003df2 <HAL_PCD_EP_Close>
 8009746:	4603      	mov	r3, r0
 8009748:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	4618      	mov	r0, r3
 800974e:	f000 f8fd 	bl	800994c <USBD_Get_USB_Status>
 8009752:	4603      	mov	r3, r0
 8009754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009756:	7bbb      	ldrb	r3, [r7, #14]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7fa fc0e 	bl	8003fa0 <HAL_PCD_EP_SetStall>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f8de 	bl	800994c <USBD_Get_USB_Status>
 8009790:	4603      	mov	r3, r0
 8009792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009794:	7bbb      	ldrb	r3, [r7, #14]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fa fc52 	bl	8004066 <HAL_PCD_EP_ClrStall>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 f8bf 	bl	800994c <USBD_Get_USB_Status>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da0b      	bge.n	8009810 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	4613      	mov	r3, r2
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	3316      	adds	r3, #22
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	e00b      	b.n	8009828 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009826:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f7fa fa3f 	bl	8003cd6 <HAL_PCD_SetAddress>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f874 	bl	800994c <USBD_Get_USB_Status>
 8009864:	4603      	mov	r3, r0
 8009866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009868:	7bbb      	ldrb	r3, [r7, #14]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b086      	sub	sp, #24
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	460b      	mov	r3, r1
 8009880:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009890:	7af9      	ldrb	r1, [r7, #11]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	f7fa fb49 	bl	8003f2c <HAL_PCD_EP_Transmit>
 800989a:	4603      	mov	r3, r0
 800989c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f853 	bl	800994c <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	460b      	mov	r3, r1
 80098c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098d2:	7af9      	ldrb	r1, [r7, #11]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	f7fa fad5 	bl	8003e86 <HAL_PCD_EP_Receive>
 80098dc:	4603      	mov	r3, r0
 80098de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f832 	bl	800994c <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7fa faf5 	bl	8003efc <HAL_PCD_EP_GetRxCount>
 8009912:	4603      	mov	r3, r0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009924:	4b03      	ldr	r3, [pc, #12]	@ (8009934 <USBD_static_malloc+0x18>)
}
 8009926:	4618      	mov	r0, r3
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20001f48 	.word	0x20001f48

08009938 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	2b03      	cmp	r3, #3
 800995e:	d817      	bhi.n	8009990 <USBD_Get_USB_Status+0x44>
 8009960:	a201      	add	r2, pc, #4	@ (adr r2, 8009968 <USBD_Get_USB_Status+0x1c>)
 8009962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009966:	bf00      	nop
 8009968:	08009979 	.word	0x08009979
 800996c:	0800997f 	.word	0x0800997f
 8009970:	08009985 	.word	0x08009985
 8009974:	0800998b 	.word	0x0800998b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
    break;
 800997c:	e00b      	b.n	8009996 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800997e:	2303      	movs	r3, #3
 8009980:	73fb      	strb	r3, [r7, #15]
    break;
 8009982:	e008      	b.n	8009996 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009984:	2301      	movs	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
    break;
 8009988:	e005      	b.n	8009996 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800998a:	2303      	movs	r3, #3
 800998c:	73fb      	strb	r3, [r7, #15]
    break;
 800998e:	e002      	b.n	8009996 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009990:	2303      	movs	r3, #3
 8009992:	73fb      	strb	r3, [r7, #15]
    break;
 8009994:	bf00      	nop
  }
  return usb_status;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <__cvt>:
 80099a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	ec57 6b10 	vmov	r6, r7, d0
 80099ac:	2f00      	cmp	r7, #0
 80099ae:	460c      	mov	r4, r1
 80099b0:	4619      	mov	r1, r3
 80099b2:	463b      	mov	r3, r7
 80099b4:	bfbb      	ittet	lt
 80099b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099ba:	461f      	movlt	r7, r3
 80099bc:	2300      	movge	r3, #0
 80099be:	232d      	movlt	r3, #45	@ 0x2d
 80099c0:	700b      	strb	r3, [r1, #0]
 80099c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099c8:	4691      	mov	r9, r2
 80099ca:	f023 0820 	bic.w	r8, r3, #32
 80099ce:	bfbc      	itt	lt
 80099d0:	4632      	movlt	r2, r6
 80099d2:	4616      	movlt	r6, r2
 80099d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099d8:	d005      	beq.n	80099e6 <__cvt+0x42>
 80099da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099de:	d100      	bne.n	80099e2 <__cvt+0x3e>
 80099e0:	3401      	adds	r4, #1
 80099e2:	2102      	movs	r1, #2
 80099e4:	e000      	b.n	80099e8 <__cvt+0x44>
 80099e6:	2103      	movs	r1, #3
 80099e8:	ab03      	add	r3, sp, #12
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	ab02      	add	r3, sp, #8
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	ec47 6b10 	vmov	d0, r6, r7
 80099f4:	4653      	mov	r3, sl
 80099f6:	4622      	mov	r2, r4
 80099f8:	f000 fe4a 	bl	800a690 <_dtoa_r>
 80099fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a00:	4605      	mov	r5, r0
 8009a02:	d119      	bne.n	8009a38 <__cvt+0x94>
 8009a04:	f019 0f01 	tst.w	r9, #1
 8009a08:	d00e      	beq.n	8009a28 <__cvt+0x84>
 8009a0a:	eb00 0904 	add.w	r9, r0, r4
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2300      	movs	r3, #0
 8009a12:	4630      	mov	r0, r6
 8009a14:	4639      	mov	r1, r7
 8009a16:	f7f7 f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a1a:	b108      	cbz	r0, 8009a20 <__cvt+0x7c>
 8009a1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a20:	2230      	movs	r2, #48	@ 0x30
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	454b      	cmp	r3, r9
 8009a26:	d31e      	bcc.n	8009a66 <__cvt+0xc2>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a2c:	1b5b      	subs	r3, r3, r5
 8009a2e:	4628      	mov	r0, r5
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	b004      	add	sp, #16
 8009a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a3c:	eb00 0904 	add.w	r9, r0, r4
 8009a40:	d1e5      	bne.n	8009a0e <__cvt+0x6a>
 8009a42:	7803      	ldrb	r3, [r0, #0]
 8009a44:	2b30      	cmp	r3, #48	@ 0x30
 8009a46:	d10a      	bne.n	8009a5e <__cvt+0xba>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f7 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a54:	b918      	cbnz	r0, 8009a5e <__cvt+0xba>
 8009a56:	f1c4 0401 	rsb	r4, r4, #1
 8009a5a:	f8ca 4000 	str.w	r4, [sl]
 8009a5e:	f8da 3000 	ldr.w	r3, [sl]
 8009a62:	4499      	add	r9, r3
 8009a64:	e7d3      	b.n	8009a0e <__cvt+0x6a>
 8009a66:	1c59      	adds	r1, r3, #1
 8009a68:	9103      	str	r1, [sp, #12]
 8009a6a:	701a      	strb	r2, [r3, #0]
 8009a6c:	e7d9      	b.n	8009a22 <__cvt+0x7e>

08009a6e <__exponent>:
 8009a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a70:	2900      	cmp	r1, #0
 8009a72:	bfba      	itte	lt
 8009a74:	4249      	neglt	r1, r1
 8009a76:	232d      	movlt	r3, #45	@ 0x2d
 8009a78:	232b      	movge	r3, #43	@ 0x2b
 8009a7a:	2909      	cmp	r1, #9
 8009a7c:	7002      	strb	r2, [r0, #0]
 8009a7e:	7043      	strb	r3, [r0, #1]
 8009a80:	dd29      	ble.n	8009ad6 <__exponent+0x68>
 8009a82:	f10d 0307 	add.w	r3, sp, #7
 8009a86:	461d      	mov	r5, r3
 8009a88:	270a      	movs	r7, #10
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a90:	fb07 1416 	mls	r4, r7, r6, r1
 8009a94:	3430      	adds	r4, #48	@ 0x30
 8009a96:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	2c63      	cmp	r4, #99	@ 0x63
 8009a9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	dcf1      	bgt.n	8009a8a <__exponent+0x1c>
 8009aa6:	3130      	adds	r1, #48	@ 0x30
 8009aa8:	1e94      	subs	r4, r2, #2
 8009aaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aae:	1c41      	adds	r1, r0, #1
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	42ab      	cmp	r3, r5
 8009ab4:	d30a      	bcc.n	8009acc <__exponent+0x5e>
 8009ab6:	f10d 0309 	add.w	r3, sp, #9
 8009aba:	1a9b      	subs	r3, r3, r2
 8009abc:	42ac      	cmp	r4, r5
 8009abe:	bf88      	it	hi
 8009ac0:	2300      	movhi	r3, #0
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	4403      	add	r3, r0
 8009ac6:	1a18      	subs	r0, r3, r0
 8009ac8:	b003      	add	sp, #12
 8009aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009acc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ad0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ad4:	e7ed      	b.n	8009ab2 <__exponent+0x44>
 8009ad6:	2330      	movs	r3, #48	@ 0x30
 8009ad8:	3130      	adds	r1, #48	@ 0x30
 8009ada:	7083      	strb	r3, [r0, #2]
 8009adc:	70c1      	strb	r1, [r0, #3]
 8009ade:	1d03      	adds	r3, r0, #4
 8009ae0:	e7f1      	b.n	8009ac6 <__exponent+0x58>
	...

08009ae4 <_printf_float>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	b08d      	sub	sp, #52	@ 0x34
 8009aea:	460c      	mov	r4, r1
 8009aec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009af0:	4616      	mov	r6, r2
 8009af2:	461f      	mov	r7, r3
 8009af4:	4605      	mov	r5, r0
 8009af6:	f000 fccb 	bl	800a490 <_localeconv_r>
 8009afa:	6803      	ldr	r3, [r0, #0]
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7f6 fbb6 	bl	8000270 <strlen>
 8009b04:	2300      	movs	r3, #0
 8009b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b08:	f8d8 3000 	ldr.w	r3, [r8]
 8009b0c:	9005      	str	r0, [sp, #20]
 8009b0e:	3307      	adds	r3, #7
 8009b10:	f023 0307 	bic.w	r3, r3, #7
 8009b14:	f103 0208 	add.w	r2, r3, #8
 8009b18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b1c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b20:	f8c8 2000 	str.w	r2, [r8]
 8009b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b2c:	9307      	str	r3, [sp, #28]
 8009b2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b3a:	4b9c      	ldr	r3, [pc, #624]	@ (8009dac <_printf_float+0x2c8>)
 8009b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b40:	f7f6 fff4 	bl	8000b2c <__aeabi_dcmpun>
 8009b44:	bb70      	cbnz	r0, 8009ba4 <_printf_float+0xc0>
 8009b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b4a:	4b98      	ldr	r3, [pc, #608]	@ (8009dac <_printf_float+0x2c8>)
 8009b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b50:	f7f6 ffce 	bl	8000af0 <__aeabi_dcmple>
 8009b54:	bb30      	cbnz	r0, 8009ba4 <_printf_float+0xc0>
 8009b56:	2200      	movs	r2, #0
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	f7f6 ffbd 	bl	8000adc <__aeabi_dcmplt>
 8009b62:	b110      	cbz	r0, 8009b6a <_printf_float+0x86>
 8009b64:	232d      	movs	r3, #45	@ 0x2d
 8009b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b6a:	4a91      	ldr	r2, [pc, #580]	@ (8009db0 <_printf_float+0x2cc>)
 8009b6c:	4b91      	ldr	r3, [pc, #580]	@ (8009db4 <_printf_float+0x2d0>)
 8009b6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b72:	bf8c      	ite	hi
 8009b74:	4690      	movhi	r8, r2
 8009b76:	4698      	movls	r8, r3
 8009b78:	2303      	movs	r3, #3
 8009b7a:	6123      	str	r3, [r4, #16]
 8009b7c:	f02b 0304 	bic.w	r3, fp, #4
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	9700      	str	r7, [sp, #0]
 8009b88:	4633      	mov	r3, r6
 8009b8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 f9d2 	bl	8009f38 <_printf_common>
 8009b94:	3001      	adds	r0, #1
 8009b96:	f040 808d 	bne.w	8009cb4 <_printf_float+0x1d0>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	b00d      	add	sp, #52	@ 0x34
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	4642      	mov	r2, r8
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f6 ffbe 	bl	8000b2c <__aeabi_dcmpun>
 8009bb0:	b140      	cbz	r0, 8009bc4 <_printf_float+0xe0>
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfbc      	itt	lt
 8009bb8:	232d      	movlt	r3, #45	@ 0x2d
 8009bba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8009db8 <_printf_float+0x2d4>)
 8009bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8009dbc <_printf_float+0x2d8>)
 8009bc2:	e7d4      	b.n	8009b6e <_printf_float+0x8a>
 8009bc4:	6863      	ldr	r3, [r4, #4]
 8009bc6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bca:	9206      	str	r2, [sp, #24]
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	d13b      	bne.n	8009c48 <_printf_float+0x164>
 8009bd0:	2306      	movs	r3, #6
 8009bd2:	6063      	str	r3, [r4, #4]
 8009bd4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009bd8:	2300      	movs	r3, #0
 8009bda:	6022      	str	r2, [r4, #0]
 8009bdc:	9303      	str	r3, [sp, #12]
 8009bde:	ab0a      	add	r3, sp, #40	@ 0x28
 8009be0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009be4:	ab09      	add	r3, sp, #36	@ 0x24
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	6861      	ldr	r1, [r4, #4]
 8009bea:	ec49 8b10 	vmov	d0, r8, r9
 8009bee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f7ff fed6 	bl	80099a4 <__cvt>
 8009bf8:	9b06      	ldr	r3, [sp, #24]
 8009bfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bfc:	2b47      	cmp	r3, #71	@ 0x47
 8009bfe:	4680      	mov	r8, r0
 8009c00:	d129      	bne.n	8009c56 <_printf_float+0x172>
 8009c02:	1cc8      	adds	r0, r1, #3
 8009c04:	db02      	blt.n	8009c0c <_printf_float+0x128>
 8009c06:	6863      	ldr	r3, [r4, #4]
 8009c08:	4299      	cmp	r1, r3
 8009c0a:	dd41      	ble.n	8009c90 <_printf_float+0x1ac>
 8009c0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c10:	fa5f fa8a 	uxtb.w	sl, sl
 8009c14:	3901      	subs	r1, #1
 8009c16:	4652      	mov	r2, sl
 8009c18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c1e:	f7ff ff26 	bl	8009a6e <__exponent>
 8009c22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c24:	1813      	adds	r3, r2, r0
 8009c26:	2a01      	cmp	r2, #1
 8009c28:	4681      	mov	r9, r0
 8009c2a:	6123      	str	r3, [r4, #16]
 8009c2c:	dc02      	bgt.n	8009c34 <_printf_float+0x150>
 8009c2e:	6822      	ldr	r2, [r4, #0]
 8009c30:	07d2      	lsls	r2, r2, #31
 8009c32:	d501      	bpl.n	8009c38 <_printf_float+0x154>
 8009c34:	3301      	adds	r3, #1
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0a2      	beq.n	8009b86 <_printf_float+0xa2>
 8009c40:	232d      	movs	r3, #45	@ 0x2d
 8009c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c46:	e79e      	b.n	8009b86 <_printf_float+0xa2>
 8009c48:	9a06      	ldr	r2, [sp, #24]
 8009c4a:	2a47      	cmp	r2, #71	@ 0x47
 8009c4c:	d1c2      	bne.n	8009bd4 <_printf_float+0xf0>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1c0      	bne.n	8009bd4 <_printf_float+0xf0>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e7bd      	b.n	8009bd2 <_printf_float+0xee>
 8009c56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c5a:	d9db      	bls.n	8009c14 <_printf_float+0x130>
 8009c5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c60:	d118      	bne.n	8009c94 <_printf_float+0x1b0>
 8009c62:	2900      	cmp	r1, #0
 8009c64:	6863      	ldr	r3, [r4, #4]
 8009c66:	dd0b      	ble.n	8009c80 <_printf_float+0x19c>
 8009c68:	6121      	str	r1, [r4, #16]
 8009c6a:	b913      	cbnz	r3, 8009c72 <_printf_float+0x18e>
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	07d0      	lsls	r0, r2, #31
 8009c70:	d502      	bpl.n	8009c78 <_printf_float+0x194>
 8009c72:	3301      	adds	r3, #1
 8009c74:	440b      	add	r3, r1
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c7a:	f04f 0900 	mov.w	r9, #0
 8009c7e:	e7db      	b.n	8009c38 <_printf_float+0x154>
 8009c80:	b913      	cbnz	r3, 8009c88 <_printf_float+0x1a4>
 8009c82:	6822      	ldr	r2, [r4, #0]
 8009c84:	07d2      	lsls	r2, r2, #31
 8009c86:	d501      	bpl.n	8009c8c <_printf_float+0x1a8>
 8009c88:	3302      	adds	r3, #2
 8009c8a:	e7f4      	b.n	8009c76 <_printf_float+0x192>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e7f2      	b.n	8009c76 <_printf_float+0x192>
 8009c90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c96:	4299      	cmp	r1, r3
 8009c98:	db05      	blt.n	8009ca6 <_printf_float+0x1c2>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	6121      	str	r1, [r4, #16]
 8009c9e:	07d8      	lsls	r0, r3, #31
 8009ca0:	d5ea      	bpl.n	8009c78 <_printf_float+0x194>
 8009ca2:	1c4b      	adds	r3, r1, #1
 8009ca4:	e7e7      	b.n	8009c76 <_printf_float+0x192>
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	bfd4      	ite	le
 8009caa:	f1c1 0202 	rsble	r2, r1, #2
 8009cae:	2201      	movgt	r2, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	e7e0      	b.n	8009c76 <_printf_float+0x192>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	055a      	lsls	r2, r3, #21
 8009cb8:	d407      	bmi.n	8009cca <_printf_float+0x1e6>
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d12b      	bne.n	8009d20 <_printf_float+0x23c>
 8009cc8:	e767      	b.n	8009b9a <_printf_float+0xb6>
 8009cca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cce:	f240 80dd 	bls.w	8009e8c <_printf_float+0x3a8>
 8009cd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f7f6 fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d033      	beq.n	8009d4a <_printf_float+0x266>
 8009ce2:	4a37      	ldr	r2, [pc, #220]	@ (8009dc0 <_printf_float+0x2dc>)
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f af54 	beq.w	8009b9a <_printf_float+0xb6>
 8009cf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cf6:	4543      	cmp	r3, r8
 8009cf8:	db02      	blt.n	8009d00 <_printf_float+0x21c>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	07d8      	lsls	r0, r3, #31
 8009cfe:	d50f      	bpl.n	8009d20 <_printf_float+0x23c>
 8009d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af45 	beq.w	8009b9a <_printf_float+0xb6>
 8009d10:	f04f 0900 	mov.w	r9, #0
 8009d14:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d18:	f104 0a1a 	add.w	sl, r4, #26
 8009d1c:	45c8      	cmp	r8, r9
 8009d1e:	dc09      	bgt.n	8009d34 <_printf_float+0x250>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	079b      	lsls	r3, r3, #30
 8009d24:	f100 8103 	bmi.w	8009f2e <_printf_float+0x44a>
 8009d28:	68e0      	ldr	r0, [r4, #12]
 8009d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d2c:	4298      	cmp	r0, r3
 8009d2e:	bfb8      	it	lt
 8009d30:	4618      	movlt	r0, r3
 8009d32:	e734      	b.n	8009b9e <_printf_float+0xba>
 8009d34:	2301      	movs	r3, #1
 8009d36:	4652      	mov	r2, sl
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f43f af2b 	beq.w	8009b9a <_printf_float+0xb6>
 8009d44:	f109 0901 	add.w	r9, r9, #1
 8009d48:	e7e8      	b.n	8009d1c <_printf_float+0x238>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc39      	bgt.n	8009dc4 <_printf_float+0x2e0>
 8009d50:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc0 <_printf_float+0x2dc>)
 8009d52:	2301      	movs	r3, #1
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af1d 	beq.w	8009b9a <_printf_float+0xb6>
 8009d60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d64:	ea59 0303 	orrs.w	r3, r9, r3
 8009d68:	d102      	bne.n	8009d70 <_printf_float+0x28c>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	07d9      	lsls	r1, r3, #31
 8009d6e:	d5d7      	bpl.n	8009d20 <_printf_float+0x23c>
 8009d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f af0d 	beq.w	8009b9a <_printf_float+0xb6>
 8009d80:	f04f 0a00 	mov.w	sl, #0
 8009d84:	f104 0b1a 	add.w	fp, r4, #26
 8009d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8a:	425b      	negs	r3, r3
 8009d8c:	4553      	cmp	r3, sl
 8009d8e:	dc01      	bgt.n	8009d94 <_printf_float+0x2b0>
 8009d90:	464b      	mov	r3, r9
 8009d92:	e793      	b.n	8009cbc <_printf_float+0x1d8>
 8009d94:	2301      	movs	r3, #1
 8009d96:	465a      	mov	r2, fp
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f aefb 	beq.w	8009b9a <_printf_float+0xb6>
 8009da4:	f10a 0a01 	add.w	sl, sl, #1
 8009da8:	e7ee      	b.n	8009d88 <_printf_float+0x2a4>
 8009daa:	bf00      	nop
 8009dac:	7fefffff 	.word	0x7fefffff
 8009db0:	0800c374 	.word	0x0800c374
 8009db4:	0800c370 	.word	0x0800c370
 8009db8:	0800c37c 	.word	0x0800c37c
 8009dbc:	0800c378 	.word	0x0800c378
 8009dc0:	0800c380 	.word	0x0800c380
 8009dc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dca:	4553      	cmp	r3, sl
 8009dcc:	bfa8      	it	ge
 8009dce:	4653      	movge	r3, sl
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	4699      	mov	r9, r3
 8009dd4:	dc36      	bgt.n	8009e44 <_printf_float+0x360>
 8009dd6:	f04f 0b00 	mov.w	fp, #0
 8009dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dde:	f104 021a 	add.w	r2, r4, #26
 8009de2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009de4:	9306      	str	r3, [sp, #24]
 8009de6:	eba3 0309 	sub.w	r3, r3, r9
 8009dea:	455b      	cmp	r3, fp
 8009dec:	dc31      	bgt.n	8009e52 <_printf_float+0x36e>
 8009dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df0:	459a      	cmp	sl, r3
 8009df2:	dc3a      	bgt.n	8009e6a <_printf_float+0x386>
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	07da      	lsls	r2, r3, #31
 8009df8:	d437      	bmi.n	8009e6a <_printf_float+0x386>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfc:	ebaa 0903 	sub.w	r9, sl, r3
 8009e00:	9b06      	ldr	r3, [sp, #24]
 8009e02:	ebaa 0303 	sub.w	r3, sl, r3
 8009e06:	4599      	cmp	r9, r3
 8009e08:	bfa8      	it	ge
 8009e0a:	4699      	movge	r9, r3
 8009e0c:	f1b9 0f00 	cmp.w	r9, #0
 8009e10:	dc33      	bgt.n	8009e7a <_printf_float+0x396>
 8009e12:	f04f 0800 	mov.w	r8, #0
 8009e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1a:	f104 0b1a 	add.w	fp, r4, #26
 8009e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e20:	ebaa 0303 	sub.w	r3, sl, r3
 8009e24:	eba3 0309 	sub.w	r3, r3, r9
 8009e28:	4543      	cmp	r3, r8
 8009e2a:	f77f af79 	ble.w	8009d20 <_printf_float+0x23c>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	465a      	mov	r2, fp
 8009e32:	4631      	mov	r1, r6
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b8      	blx	r7
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f43f aeae 	beq.w	8009b9a <_printf_float+0xb6>
 8009e3e:	f108 0801 	add.w	r8, r8, #1
 8009e42:	e7ec      	b.n	8009e1e <_printf_float+0x33a>
 8009e44:	4642      	mov	r2, r8
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1c2      	bne.n	8009dd6 <_printf_float+0x2f2>
 8009e50:	e6a3      	b.n	8009b9a <_printf_float+0xb6>
 8009e52:	2301      	movs	r3, #1
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	9206      	str	r2, [sp, #24]
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae9c 	beq.w	8009b9a <_printf_float+0xb6>
 8009e62:	9a06      	ldr	r2, [sp, #24]
 8009e64:	f10b 0b01 	add.w	fp, fp, #1
 8009e68:	e7bb      	b.n	8009de2 <_printf_float+0x2fe>
 8009e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	d1c0      	bne.n	8009dfa <_printf_float+0x316>
 8009e78:	e68f      	b.n	8009b9a <_printf_float+0xb6>
 8009e7a:	9a06      	ldr	r2, [sp, #24]
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	4442      	add	r2, r8
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	d1c3      	bne.n	8009e12 <_printf_float+0x32e>
 8009e8a:	e686      	b.n	8009b9a <_printf_float+0xb6>
 8009e8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e90:	f1ba 0f01 	cmp.w	sl, #1
 8009e94:	dc01      	bgt.n	8009e9a <_printf_float+0x3b6>
 8009e96:	07db      	lsls	r3, r3, #31
 8009e98:	d536      	bpl.n	8009f08 <_printf_float+0x424>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4642      	mov	r2, r8
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b8      	blx	r7
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	f43f ae78 	beq.w	8009b9a <_printf_float+0xb6>
 8009eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f43f ae70 	beq.w	8009b9a <_printf_float+0xb6>
 8009eba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ec6:	f7f6 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eca:	b9c0      	cbnz	r0, 8009efe <_printf_float+0x41a>
 8009ecc:	4653      	mov	r3, sl
 8009ece:	f108 0201 	add.w	r2, r8, #1
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d10c      	bne.n	8009ef6 <_printf_float+0x412>
 8009edc:	e65d      	b.n	8009b9a <_printf_float+0xb6>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	465a      	mov	r2, fp
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f ae56 	beq.w	8009b9a <_printf_float+0xb6>
 8009eee:	f108 0801 	add.w	r8, r8, #1
 8009ef2:	45d0      	cmp	r8, sl
 8009ef4:	dbf3      	blt.n	8009ede <_printf_float+0x3fa>
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009efc:	e6df      	b.n	8009cbe <_printf_float+0x1da>
 8009efe:	f04f 0800 	mov.w	r8, #0
 8009f02:	f104 0b1a 	add.w	fp, r4, #26
 8009f06:	e7f4      	b.n	8009ef2 <_printf_float+0x40e>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4642      	mov	r2, r8
 8009f0c:	e7e1      	b.n	8009ed2 <_printf_float+0x3ee>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	464a      	mov	r2, r9
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae3e 	beq.w	8009b9a <_printf_float+0xb6>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f26:	1a5b      	subs	r3, r3, r1
 8009f28:	4543      	cmp	r3, r8
 8009f2a:	dcf0      	bgt.n	8009f0e <_printf_float+0x42a>
 8009f2c:	e6fc      	b.n	8009d28 <_printf_float+0x244>
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	f104 0919 	add.w	r9, r4, #25
 8009f36:	e7f4      	b.n	8009f22 <_printf_float+0x43e>

08009f38 <_printf_common>:
 8009f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3c:	4616      	mov	r6, r2
 8009f3e:	4698      	mov	r8, r3
 8009f40:	688a      	ldr	r2, [r1, #8]
 8009f42:	690b      	ldr	r3, [r1, #16]
 8009f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	bfb8      	it	lt
 8009f4c:	4613      	movlt	r3, r2
 8009f4e:	6033      	str	r3, [r6, #0]
 8009f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f54:	4607      	mov	r7, r0
 8009f56:	460c      	mov	r4, r1
 8009f58:	b10a      	cbz	r2, 8009f5e <_printf_common+0x26>
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	6033      	str	r3, [r6, #0]
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	0699      	lsls	r1, r3, #26
 8009f62:	bf42      	ittt	mi
 8009f64:	6833      	ldrmi	r3, [r6, #0]
 8009f66:	3302      	addmi	r3, #2
 8009f68:	6033      	strmi	r3, [r6, #0]
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	f015 0506 	ands.w	r5, r5, #6
 8009f70:	d106      	bne.n	8009f80 <_printf_common+0x48>
 8009f72:	f104 0a19 	add.w	sl, r4, #25
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	6832      	ldr	r2, [r6, #0]
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	42ab      	cmp	r3, r5
 8009f7e:	dc26      	bgt.n	8009fce <_printf_common+0x96>
 8009f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	3b00      	subs	r3, #0
 8009f88:	bf18      	it	ne
 8009f8a:	2301      	movne	r3, #1
 8009f8c:	0692      	lsls	r2, r2, #26
 8009f8e:	d42b      	bmi.n	8009fe8 <_printf_common+0xb0>
 8009f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f94:	4641      	mov	r1, r8
 8009f96:	4638      	mov	r0, r7
 8009f98:	47c8      	blx	r9
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d01e      	beq.n	8009fdc <_printf_common+0xa4>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	6922      	ldr	r2, [r4, #16]
 8009fa2:	f003 0306 	and.w	r3, r3, #6
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	bf02      	ittt	eq
 8009faa:	68e5      	ldreq	r5, [r4, #12]
 8009fac:	6833      	ldreq	r3, [r6, #0]
 8009fae:	1aed      	subeq	r5, r5, r3
 8009fb0:	68a3      	ldr	r3, [r4, #8]
 8009fb2:	bf0c      	ite	eq
 8009fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fb8:	2500      	movne	r5, #0
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	bfc4      	itt	gt
 8009fbe:	1a9b      	subgt	r3, r3, r2
 8009fc0:	18ed      	addgt	r5, r5, r3
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	341a      	adds	r4, #26
 8009fc6:	42b5      	cmp	r5, r6
 8009fc8:	d11a      	bne.n	800a000 <_printf_common+0xc8>
 8009fca:	2000      	movs	r0, #0
 8009fcc:	e008      	b.n	8009fe0 <_printf_common+0xa8>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4652      	mov	r2, sl
 8009fd2:	4641      	mov	r1, r8
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	47c8      	blx	r9
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d103      	bne.n	8009fe4 <_printf_common+0xac>
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe4:	3501      	adds	r5, #1
 8009fe6:	e7c6      	b.n	8009f76 <_printf_common+0x3e>
 8009fe8:	18e1      	adds	r1, r4, r3
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	2030      	movs	r0, #48	@ 0x30
 8009fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ff2:	4422      	add	r2, r4
 8009ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	e7c7      	b.n	8009f90 <_printf_common+0x58>
 800a000:	2301      	movs	r3, #1
 800a002:	4622      	mov	r2, r4
 800a004:	4641      	mov	r1, r8
 800a006:	4638      	mov	r0, r7
 800a008:	47c8      	blx	r9
 800a00a:	3001      	adds	r0, #1
 800a00c:	d0e6      	beq.n	8009fdc <_printf_common+0xa4>
 800a00e:	3601      	adds	r6, #1
 800a010:	e7d9      	b.n	8009fc6 <_printf_common+0x8e>
	...

0800a014 <_printf_i>:
 800a014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	7e0f      	ldrb	r7, [r1, #24]
 800a01a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a01c:	2f78      	cmp	r7, #120	@ 0x78
 800a01e:	4691      	mov	r9, r2
 800a020:	4680      	mov	r8, r0
 800a022:	460c      	mov	r4, r1
 800a024:	469a      	mov	sl, r3
 800a026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a02a:	d807      	bhi.n	800a03c <_printf_i+0x28>
 800a02c:	2f62      	cmp	r7, #98	@ 0x62
 800a02e:	d80a      	bhi.n	800a046 <_printf_i+0x32>
 800a030:	2f00      	cmp	r7, #0
 800a032:	f000 80d1 	beq.w	800a1d8 <_printf_i+0x1c4>
 800a036:	2f58      	cmp	r7, #88	@ 0x58
 800a038:	f000 80b8 	beq.w	800a1ac <_printf_i+0x198>
 800a03c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a044:	e03a      	b.n	800a0bc <_printf_i+0xa8>
 800a046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a04a:	2b15      	cmp	r3, #21
 800a04c:	d8f6      	bhi.n	800a03c <_printf_i+0x28>
 800a04e:	a101      	add	r1, pc, #4	@ (adr r1, 800a054 <_printf_i+0x40>)
 800a050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a054:	0800a0ad 	.word	0x0800a0ad
 800a058:	0800a0c1 	.word	0x0800a0c1
 800a05c:	0800a03d 	.word	0x0800a03d
 800a060:	0800a03d 	.word	0x0800a03d
 800a064:	0800a03d 	.word	0x0800a03d
 800a068:	0800a03d 	.word	0x0800a03d
 800a06c:	0800a0c1 	.word	0x0800a0c1
 800a070:	0800a03d 	.word	0x0800a03d
 800a074:	0800a03d 	.word	0x0800a03d
 800a078:	0800a03d 	.word	0x0800a03d
 800a07c:	0800a03d 	.word	0x0800a03d
 800a080:	0800a1bf 	.word	0x0800a1bf
 800a084:	0800a0eb 	.word	0x0800a0eb
 800a088:	0800a179 	.word	0x0800a179
 800a08c:	0800a03d 	.word	0x0800a03d
 800a090:	0800a03d 	.word	0x0800a03d
 800a094:	0800a1e1 	.word	0x0800a1e1
 800a098:	0800a03d 	.word	0x0800a03d
 800a09c:	0800a0eb 	.word	0x0800a0eb
 800a0a0:	0800a03d 	.word	0x0800a03d
 800a0a4:	0800a03d 	.word	0x0800a03d
 800a0a8:	0800a181 	.word	0x0800a181
 800a0ac:	6833      	ldr	r3, [r6, #0]
 800a0ae:	1d1a      	adds	r2, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6032      	str	r2, [r6, #0]
 800a0b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e09c      	b.n	800a1fa <_printf_i+0x1e6>
 800a0c0:	6833      	ldr	r3, [r6, #0]
 800a0c2:	6820      	ldr	r0, [r4, #0]
 800a0c4:	1d19      	adds	r1, r3, #4
 800a0c6:	6031      	str	r1, [r6, #0]
 800a0c8:	0606      	lsls	r6, r0, #24
 800a0ca:	d501      	bpl.n	800a0d0 <_printf_i+0xbc>
 800a0cc:	681d      	ldr	r5, [r3, #0]
 800a0ce:	e003      	b.n	800a0d8 <_printf_i+0xc4>
 800a0d0:	0645      	lsls	r5, r0, #25
 800a0d2:	d5fb      	bpl.n	800a0cc <_printf_i+0xb8>
 800a0d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0d8:	2d00      	cmp	r5, #0
 800a0da:	da03      	bge.n	800a0e4 <_printf_i+0xd0>
 800a0dc:	232d      	movs	r3, #45	@ 0x2d
 800a0de:	426d      	negs	r5, r5
 800a0e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e4:	4858      	ldr	r0, [pc, #352]	@ (800a248 <_printf_i+0x234>)
 800a0e6:	230a      	movs	r3, #10
 800a0e8:	e011      	b.n	800a10e <_printf_i+0xfa>
 800a0ea:	6821      	ldr	r1, [r4, #0]
 800a0ec:	6833      	ldr	r3, [r6, #0]
 800a0ee:	0608      	lsls	r0, r1, #24
 800a0f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0f4:	d402      	bmi.n	800a0fc <_printf_i+0xe8>
 800a0f6:	0649      	lsls	r1, r1, #25
 800a0f8:	bf48      	it	mi
 800a0fa:	b2ad      	uxthmi	r5, r5
 800a0fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0fe:	4852      	ldr	r0, [pc, #328]	@ (800a248 <_printf_i+0x234>)
 800a100:	6033      	str	r3, [r6, #0]
 800a102:	bf14      	ite	ne
 800a104:	230a      	movne	r3, #10
 800a106:	2308      	moveq	r3, #8
 800a108:	2100      	movs	r1, #0
 800a10a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a10e:	6866      	ldr	r6, [r4, #4]
 800a110:	60a6      	str	r6, [r4, #8]
 800a112:	2e00      	cmp	r6, #0
 800a114:	db05      	blt.n	800a122 <_printf_i+0x10e>
 800a116:	6821      	ldr	r1, [r4, #0]
 800a118:	432e      	orrs	r6, r5
 800a11a:	f021 0104 	bic.w	r1, r1, #4
 800a11e:	6021      	str	r1, [r4, #0]
 800a120:	d04b      	beq.n	800a1ba <_printf_i+0x1a6>
 800a122:	4616      	mov	r6, r2
 800a124:	fbb5 f1f3 	udiv	r1, r5, r3
 800a128:	fb03 5711 	mls	r7, r3, r1, r5
 800a12c:	5dc7      	ldrb	r7, [r0, r7]
 800a12e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a132:	462f      	mov	r7, r5
 800a134:	42bb      	cmp	r3, r7
 800a136:	460d      	mov	r5, r1
 800a138:	d9f4      	bls.n	800a124 <_printf_i+0x110>
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d10b      	bne.n	800a156 <_printf_i+0x142>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	07df      	lsls	r7, r3, #31
 800a142:	d508      	bpl.n	800a156 <_printf_i+0x142>
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	6861      	ldr	r1, [r4, #4]
 800a148:	4299      	cmp	r1, r3
 800a14a:	bfde      	ittt	le
 800a14c:	2330      	movle	r3, #48	@ 0x30
 800a14e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a152:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a156:	1b92      	subs	r2, r2, r6
 800a158:	6122      	str	r2, [r4, #16]
 800a15a:	f8cd a000 	str.w	sl, [sp]
 800a15e:	464b      	mov	r3, r9
 800a160:	aa03      	add	r2, sp, #12
 800a162:	4621      	mov	r1, r4
 800a164:	4640      	mov	r0, r8
 800a166:	f7ff fee7 	bl	8009f38 <_printf_common>
 800a16a:	3001      	adds	r0, #1
 800a16c:	d14a      	bne.n	800a204 <_printf_i+0x1f0>
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	b004      	add	sp, #16
 800a174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	f043 0320 	orr.w	r3, r3, #32
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	4832      	ldr	r0, [pc, #200]	@ (800a24c <_printf_i+0x238>)
 800a182:	2778      	movs	r7, #120	@ 0x78
 800a184:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	6831      	ldr	r1, [r6, #0]
 800a18c:	061f      	lsls	r7, r3, #24
 800a18e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a192:	d402      	bmi.n	800a19a <_printf_i+0x186>
 800a194:	065f      	lsls	r7, r3, #25
 800a196:	bf48      	it	mi
 800a198:	b2ad      	uxthmi	r5, r5
 800a19a:	6031      	str	r1, [r6, #0]
 800a19c:	07d9      	lsls	r1, r3, #31
 800a19e:	bf44      	itt	mi
 800a1a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1a4:	6023      	strmi	r3, [r4, #0]
 800a1a6:	b11d      	cbz	r5, 800a1b0 <_printf_i+0x19c>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	e7ad      	b.n	800a108 <_printf_i+0xf4>
 800a1ac:	4826      	ldr	r0, [pc, #152]	@ (800a248 <_printf_i+0x234>)
 800a1ae:	e7e9      	b.n	800a184 <_printf_i+0x170>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	f023 0320 	bic.w	r3, r3, #32
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	e7f6      	b.n	800a1a8 <_printf_i+0x194>
 800a1ba:	4616      	mov	r6, r2
 800a1bc:	e7bd      	b.n	800a13a <_printf_i+0x126>
 800a1be:	6833      	ldr	r3, [r6, #0]
 800a1c0:	6825      	ldr	r5, [r4, #0]
 800a1c2:	6961      	ldr	r1, [r4, #20]
 800a1c4:	1d18      	adds	r0, r3, #4
 800a1c6:	6030      	str	r0, [r6, #0]
 800a1c8:	062e      	lsls	r6, r5, #24
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	d501      	bpl.n	800a1d2 <_printf_i+0x1be>
 800a1ce:	6019      	str	r1, [r3, #0]
 800a1d0:	e002      	b.n	800a1d8 <_printf_i+0x1c4>
 800a1d2:	0668      	lsls	r0, r5, #25
 800a1d4:	d5fb      	bpl.n	800a1ce <_printf_i+0x1ba>
 800a1d6:	8019      	strh	r1, [r3, #0]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	4616      	mov	r6, r2
 800a1de:	e7bc      	b.n	800a15a <_printf_i+0x146>
 800a1e0:	6833      	ldr	r3, [r6, #0]
 800a1e2:	1d1a      	adds	r2, r3, #4
 800a1e4:	6032      	str	r2, [r6, #0]
 800a1e6:	681e      	ldr	r6, [r3, #0]
 800a1e8:	6862      	ldr	r2, [r4, #4]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7f5 ffef 	bl	80001d0 <memchr>
 800a1f2:	b108      	cbz	r0, 800a1f8 <_printf_i+0x1e4>
 800a1f4:	1b80      	subs	r0, r0, r6
 800a1f6:	6060      	str	r0, [r4, #4]
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a202:	e7aa      	b.n	800a15a <_printf_i+0x146>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	4632      	mov	r2, r6
 800a208:	4649      	mov	r1, r9
 800a20a:	4640      	mov	r0, r8
 800a20c:	47d0      	blx	sl
 800a20e:	3001      	adds	r0, #1
 800a210:	d0ad      	beq.n	800a16e <_printf_i+0x15a>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	079b      	lsls	r3, r3, #30
 800a216:	d413      	bmi.n	800a240 <_printf_i+0x22c>
 800a218:	68e0      	ldr	r0, [r4, #12]
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	4298      	cmp	r0, r3
 800a21e:	bfb8      	it	lt
 800a220:	4618      	movlt	r0, r3
 800a222:	e7a6      	b.n	800a172 <_printf_i+0x15e>
 800a224:	2301      	movs	r3, #1
 800a226:	4632      	mov	r2, r6
 800a228:	4649      	mov	r1, r9
 800a22a:	4640      	mov	r0, r8
 800a22c:	47d0      	blx	sl
 800a22e:	3001      	adds	r0, #1
 800a230:	d09d      	beq.n	800a16e <_printf_i+0x15a>
 800a232:	3501      	adds	r5, #1
 800a234:	68e3      	ldr	r3, [r4, #12]
 800a236:	9903      	ldr	r1, [sp, #12]
 800a238:	1a5b      	subs	r3, r3, r1
 800a23a:	42ab      	cmp	r3, r5
 800a23c:	dcf2      	bgt.n	800a224 <_printf_i+0x210>
 800a23e:	e7eb      	b.n	800a218 <_printf_i+0x204>
 800a240:	2500      	movs	r5, #0
 800a242:	f104 0619 	add.w	r6, r4, #25
 800a246:	e7f5      	b.n	800a234 <_printf_i+0x220>
 800a248:	0800c382 	.word	0x0800c382
 800a24c:	0800c393 	.word	0x0800c393

0800a250 <std>:
 800a250:	2300      	movs	r3, #0
 800a252:	b510      	push	{r4, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	e9c0 3300 	strd	r3, r3, [r0]
 800a25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a25e:	6083      	str	r3, [r0, #8]
 800a260:	8181      	strh	r1, [r0, #12]
 800a262:	6643      	str	r3, [r0, #100]	@ 0x64
 800a264:	81c2      	strh	r2, [r0, #14]
 800a266:	6183      	str	r3, [r0, #24]
 800a268:	4619      	mov	r1, r3
 800a26a:	2208      	movs	r2, #8
 800a26c:	305c      	adds	r0, #92	@ 0x5c
 800a26e:	f000 f906 	bl	800a47e <memset>
 800a272:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a8 <std+0x58>)
 800a274:	6263      	str	r3, [r4, #36]	@ 0x24
 800a276:	4b0d      	ldr	r3, [pc, #52]	@ (800a2ac <std+0x5c>)
 800a278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a27a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b0 <std+0x60>)
 800a27c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a27e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b4 <std+0x64>)
 800a280:	6323      	str	r3, [r4, #48]	@ 0x30
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <std+0x68>)
 800a284:	6224      	str	r4, [r4, #32]
 800a286:	429c      	cmp	r4, r3
 800a288:	d006      	beq.n	800a298 <std+0x48>
 800a28a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a28e:	4294      	cmp	r4, r2
 800a290:	d002      	beq.n	800a298 <std+0x48>
 800a292:	33d0      	adds	r3, #208	@ 0xd0
 800a294:	429c      	cmp	r4, r3
 800a296:	d105      	bne.n	800a2a4 <std+0x54>
 800a298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a0:	f000 b96a 	b.w	800a578 <__retarget_lock_init_recursive>
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0800a3f9 	.word	0x0800a3f9
 800a2ac:	0800a41b 	.word	0x0800a41b
 800a2b0:	0800a453 	.word	0x0800a453
 800a2b4:	0800a477 	.word	0x0800a477
 800a2b8:	20002168 	.word	0x20002168

0800a2bc <stdio_exit_handler>:
 800a2bc:	4a02      	ldr	r2, [pc, #8]	@ (800a2c8 <stdio_exit_handler+0xc>)
 800a2be:	4903      	ldr	r1, [pc, #12]	@ (800a2cc <stdio_exit_handler+0x10>)
 800a2c0:	4803      	ldr	r0, [pc, #12]	@ (800a2d0 <stdio_exit_handler+0x14>)
 800a2c2:	f000 b869 	b.w	800a398 <_fwalk_sglue>
 800a2c6:	bf00      	nop
 800a2c8:	200000fc 	.word	0x200000fc
 800a2cc:	0800beb1 	.word	0x0800beb1
 800a2d0:	2000010c 	.word	0x2000010c

0800a2d4 <cleanup_stdio>:
 800a2d4:	6841      	ldr	r1, [r0, #4]
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <cleanup_stdio+0x34>)
 800a2d8:	4299      	cmp	r1, r3
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	4604      	mov	r4, r0
 800a2de:	d001      	beq.n	800a2e4 <cleanup_stdio+0x10>
 800a2e0:	f001 fde6 	bl	800beb0 <_fflush_r>
 800a2e4:	68a1      	ldr	r1, [r4, #8]
 800a2e6:	4b09      	ldr	r3, [pc, #36]	@ (800a30c <cleanup_stdio+0x38>)
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	d002      	beq.n	800a2f2 <cleanup_stdio+0x1e>
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f001 fddf 	bl	800beb0 <_fflush_r>
 800a2f2:	68e1      	ldr	r1, [r4, #12]
 800a2f4:	4b06      	ldr	r3, [pc, #24]	@ (800a310 <cleanup_stdio+0x3c>)
 800a2f6:	4299      	cmp	r1, r3
 800a2f8:	d004      	beq.n	800a304 <cleanup_stdio+0x30>
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a300:	f001 bdd6 	b.w	800beb0 <_fflush_r>
 800a304:	bd10      	pop	{r4, pc}
 800a306:	bf00      	nop
 800a308:	20002168 	.word	0x20002168
 800a30c:	200021d0 	.word	0x200021d0
 800a310:	20002238 	.word	0x20002238

0800a314 <global_stdio_init.part.0>:
 800a314:	b510      	push	{r4, lr}
 800a316:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <global_stdio_init.part.0+0x30>)
 800a318:	4c0b      	ldr	r4, [pc, #44]	@ (800a348 <global_stdio_init.part.0+0x34>)
 800a31a:	4a0c      	ldr	r2, [pc, #48]	@ (800a34c <global_stdio_init.part.0+0x38>)
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	4620      	mov	r0, r4
 800a320:	2200      	movs	r2, #0
 800a322:	2104      	movs	r1, #4
 800a324:	f7ff ff94 	bl	800a250 <std>
 800a328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a32c:	2201      	movs	r2, #1
 800a32e:	2109      	movs	r1, #9
 800a330:	f7ff ff8e 	bl	800a250 <std>
 800a334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a338:	2202      	movs	r2, #2
 800a33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a33e:	2112      	movs	r1, #18
 800a340:	f7ff bf86 	b.w	800a250 <std>
 800a344:	200022a0 	.word	0x200022a0
 800a348:	20002168 	.word	0x20002168
 800a34c:	0800a2bd 	.word	0x0800a2bd

0800a350 <__sfp_lock_acquire>:
 800a350:	4801      	ldr	r0, [pc, #4]	@ (800a358 <__sfp_lock_acquire+0x8>)
 800a352:	f000 b912 	b.w	800a57a <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	200022a9 	.word	0x200022a9

0800a35c <__sfp_lock_release>:
 800a35c:	4801      	ldr	r0, [pc, #4]	@ (800a364 <__sfp_lock_release+0x8>)
 800a35e:	f000 b90d 	b.w	800a57c <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	200022a9 	.word	0x200022a9

0800a368 <__sinit>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	f7ff fff0 	bl	800a350 <__sfp_lock_acquire>
 800a370:	6a23      	ldr	r3, [r4, #32]
 800a372:	b11b      	cbz	r3, 800a37c <__sinit+0x14>
 800a374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a378:	f7ff bff0 	b.w	800a35c <__sfp_lock_release>
 800a37c:	4b04      	ldr	r3, [pc, #16]	@ (800a390 <__sinit+0x28>)
 800a37e:	6223      	str	r3, [r4, #32]
 800a380:	4b04      	ldr	r3, [pc, #16]	@ (800a394 <__sinit+0x2c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1f5      	bne.n	800a374 <__sinit+0xc>
 800a388:	f7ff ffc4 	bl	800a314 <global_stdio_init.part.0>
 800a38c:	e7f2      	b.n	800a374 <__sinit+0xc>
 800a38e:	bf00      	nop
 800a390:	0800a2d5 	.word	0x0800a2d5
 800a394:	200022a0 	.word	0x200022a0

0800a398 <_fwalk_sglue>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	4607      	mov	r7, r0
 800a39e:	4688      	mov	r8, r1
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ac:	d505      	bpl.n	800a3ba <_fwalk_sglue+0x22>
 800a3ae:	6824      	ldr	r4, [r4, #0]
 800a3b0:	2c00      	cmp	r4, #0
 800a3b2:	d1f7      	bne.n	800a3a4 <_fwalk_sglue+0xc>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d907      	bls.n	800a3d0 <_fwalk_sglue+0x38>
 800a3c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	d003      	beq.n	800a3d0 <_fwalk_sglue+0x38>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c0      	blx	r8
 800a3ce:	4306      	orrs	r6, r0
 800a3d0:	3568      	adds	r5, #104	@ 0x68
 800a3d2:	e7e9      	b.n	800a3a8 <_fwalk_sglue+0x10>

0800a3d4 <iprintf>:
 800a3d4:	b40f      	push	{r0, r1, r2, r3}
 800a3d6:	b507      	push	{r0, r1, r2, lr}
 800a3d8:	4906      	ldr	r1, [pc, #24]	@ (800a3f4 <iprintf+0x20>)
 800a3da:	ab04      	add	r3, sp, #16
 800a3dc:	6808      	ldr	r0, [r1, #0]
 800a3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e2:	6881      	ldr	r1, [r0, #8]
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	f001 fbc7 	bl	800bb78 <_vfiprintf_r>
 800a3ea:	b003      	add	sp, #12
 800a3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f0:	b004      	add	sp, #16
 800a3f2:	4770      	bx	lr
 800a3f4:	20000108 	.word	0x20000108

0800a3f8 <__sread>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a400:	f000 f86c 	bl	800a4dc <_read_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	bfab      	itete	ge
 800a408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a40a:	89a3      	ldrhlt	r3, [r4, #12]
 800a40c:	181b      	addge	r3, r3, r0
 800a40e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a412:	bfac      	ite	ge
 800a414:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a416:	81a3      	strhlt	r3, [r4, #12]
 800a418:	bd10      	pop	{r4, pc}

0800a41a <__swrite>:
 800a41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	461f      	mov	r7, r3
 800a420:	898b      	ldrh	r3, [r1, #12]
 800a422:	05db      	lsls	r3, r3, #23
 800a424:	4605      	mov	r5, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4616      	mov	r6, r2
 800a42a:	d505      	bpl.n	800a438 <__swrite+0x1e>
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	2302      	movs	r3, #2
 800a432:	2200      	movs	r2, #0
 800a434:	f000 f840 	bl	800a4b8 <_lseek_r>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	4632      	mov	r2, r6
 800a446:	463b      	mov	r3, r7
 800a448:	4628      	mov	r0, r5
 800a44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	f000 b857 	b.w	800a500 <_write_r>

0800a452 <__sseek>:
 800a452:	b510      	push	{r4, lr}
 800a454:	460c      	mov	r4, r1
 800a456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45a:	f000 f82d 	bl	800a4b8 <_lseek_r>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	bf15      	itete	ne
 800a464:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a46a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a46e:	81a3      	strheq	r3, [r4, #12]
 800a470:	bf18      	it	ne
 800a472:	81a3      	strhne	r3, [r4, #12]
 800a474:	bd10      	pop	{r4, pc}

0800a476 <__sclose>:
 800a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47a:	f000 b80d 	b.w	800a498 <_close_r>

0800a47e <memset>:
 800a47e:	4402      	add	r2, r0
 800a480:	4603      	mov	r3, r0
 800a482:	4293      	cmp	r3, r2
 800a484:	d100      	bne.n	800a488 <memset+0xa>
 800a486:	4770      	bx	lr
 800a488:	f803 1b01 	strb.w	r1, [r3], #1
 800a48c:	e7f9      	b.n	800a482 <memset+0x4>
	...

0800a490 <_localeconv_r>:
 800a490:	4800      	ldr	r0, [pc, #0]	@ (800a494 <_localeconv_r+0x4>)
 800a492:	4770      	bx	lr
 800a494:	20000248 	.word	0x20000248

0800a498 <_close_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d06      	ldr	r5, [pc, #24]	@ (800a4b4 <_close_r+0x1c>)
 800a49c:	2300      	movs	r3, #0
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f7f7 f924 	bl	80016f0 <_close>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_close_r+0x1a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_close_r+0x1a>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	200022a4 	.word	0x200022a4

0800a4b8 <_lseek_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d07      	ldr	r5, [pc, #28]	@ (800a4d8 <_lseek_r+0x20>)
 800a4bc:	4604      	mov	r4, r0
 800a4be:	4608      	mov	r0, r1
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f7f7 f939 	bl	800173e <_lseek>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_lseek_r+0x1e>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_lseek_r+0x1e>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	200022a4 	.word	0x200022a4

0800a4dc <_read_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	@ (800a4fc <_read_r+0x20>)
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f7 f8e3 	bl	80016b6 <_read>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_read_r+0x1e>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_read_r+0x1e>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	200022a4 	.word	0x200022a4

0800a500 <_write_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d07      	ldr	r5, [pc, #28]	@ (800a520 <_write_r+0x20>)
 800a504:	4604      	mov	r4, r0
 800a506:	4608      	mov	r0, r1
 800a508:	4611      	mov	r1, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	602a      	str	r2, [r5, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	f7f7 f922 	bl	8001758 <_write>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_write_r+0x1e>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_write_r+0x1e>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	200022a4 	.word	0x200022a4

0800a524 <__errno>:
 800a524:	4b01      	ldr	r3, [pc, #4]	@ (800a52c <__errno+0x8>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	20000108 	.word	0x20000108

0800a530 <__libc_init_array>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4d0d      	ldr	r5, [pc, #52]	@ (800a568 <__libc_init_array+0x38>)
 800a534:	4c0d      	ldr	r4, [pc, #52]	@ (800a56c <__libc_init_array+0x3c>)
 800a536:	1b64      	subs	r4, r4, r5
 800a538:	10a4      	asrs	r4, r4, #2
 800a53a:	2600      	movs	r6, #0
 800a53c:	42a6      	cmp	r6, r4
 800a53e:	d109      	bne.n	800a554 <__libc_init_array+0x24>
 800a540:	4d0b      	ldr	r5, [pc, #44]	@ (800a570 <__libc_init_array+0x40>)
 800a542:	4c0c      	ldr	r4, [pc, #48]	@ (800a574 <__libc_init_array+0x44>)
 800a544:	f001 fec2 	bl	800c2cc <_init>
 800a548:	1b64      	subs	r4, r4, r5
 800a54a:	10a4      	asrs	r4, r4, #2
 800a54c:	2600      	movs	r6, #0
 800a54e:	42a6      	cmp	r6, r4
 800a550:	d105      	bne.n	800a55e <__libc_init_array+0x2e>
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	f855 3b04 	ldr.w	r3, [r5], #4
 800a558:	4798      	blx	r3
 800a55a:	3601      	adds	r6, #1
 800a55c:	e7ee      	b.n	800a53c <__libc_init_array+0xc>
 800a55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a562:	4798      	blx	r3
 800a564:	3601      	adds	r6, #1
 800a566:	e7f2      	b.n	800a54e <__libc_init_array+0x1e>
 800a568:	0800c6ec 	.word	0x0800c6ec
 800a56c:	0800c6ec 	.word	0x0800c6ec
 800a570:	0800c6ec 	.word	0x0800c6ec
 800a574:	0800c6f0 	.word	0x0800c6f0

0800a578 <__retarget_lock_init_recursive>:
 800a578:	4770      	bx	lr

0800a57a <__retarget_lock_acquire_recursive>:
 800a57a:	4770      	bx	lr

0800a57c <__retarget_lock_release_recursive>:
 800a57c:	4770      	bx	lr

0800a57e <quorem>:
 800a57e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a582:	6903      	ldr	r3, [r0, #16]
 800a584:	690c      	ldr	r4, [r1, #16]
 800a586:	42a3      	cmp	r3, r4
 800a588:	4607      	mov	r7, r0
 800a58a:	db7e      	blt.n	800a68a <quorem+0x10c>
 800a58c:	3c01      	subs	r4, #1
 800a58e:	f101 0814 	add.w	r8, r1, #20
 800a592:	00a3      	lsls	r3, r4, #2
 800a594:	f100 0514 	add.w	r5, r0, #20
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5b4:	d32e      	bcc.n	800a614 <quorem+0x96>
 800a5b6:	f04f 0a00 	mov.w	sl, #0
 800a5ba:	46c4      	mov	ip, r8
 800a5bc:	46ae      	mov	lr, r5
 800a5be:	46d3      	mov	fp, sl
 800a5c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5c4:	b298      	uxth	r0, r3
 800a5c6:	fb06 a000 	mla	r0, r6, r0, sl
 800a5ca:	0c02      	lsrs	r2, r0, #16
 800a5cc:	0c1b      	lsrs	r3, r3, #16
 800a5ce:	fb06 2303 	mla	r3, r6, r3, r2
 800a5d2:	f8de 2000 	ldr.w	r2, [lr]
 800a5d6:	b280      	uxth	r0, r0
 800a5d8:	b292      	uxth	r2, r2
 800a5da:	1a12      	subs	r2, r2, r0
 800a5dc:	445a      	add	r2, fp
 800a5de:	f8de 0000 	ldr.w	r0, [lr]
 800a5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5f0:	b292      	uxth	r2, r2
 800a5f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5f6:	45e1      	cmp	r9, ip
 800a5f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a5fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a600:	d2de      	bcs.n	800a5c0 <quorem+0x42>
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	58eb      	ldr	r3, [r5, r3]
 800a606:	b92b      	cbnz	r3, 800a614 <quorem+0x96>
 800a608:	9b01      	ldr	r3, [sp, #4]
 800a60a:	3b04      	subs	r3, #4
 800a60c:	429d      	cmp	r5, r3
 800a60e:	461a      	mov	r2, r3
 800a610:	d32f      	bcc.n	800a672 <quorem+0xf4>
 800a612:	613c      	str	r4, [r7, #16]
 800a614:	4638      	mov	r0, r7
 800a616:	f001 f97d 	bl	800b914 <__mcmp>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	db25      	blt.n	800a66a <quorem+0xec>
 800a61e:	4629      	mov	r1, r5
 800a620:	2000      	movs	r0, #0
 800a622:	f858 2b04 	ldr.w	r2, [r8], #4
 800a626:	f8d1 c000 	ldr.w	ip, [r1]
 800a62a:	fa1f fe82 	uxth.w	lr, r2
 800a62e:	fa1f f38c 	uxth.w	r3, ip
 800a632:	eba3 030e 	sub.w	r3, r3, lr
 800a636:	4403      	add	r3, r0
 800a638:	0c12      	lsrs	r2, r2, #16
 800a63a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a63e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a642:	b29b      	uxth	r3, r3
 800a644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a648:	45c1      	cmp	r9, r8
 800a64a:	f841 3b04 	str.w	r3, [r1], #4
 800a64e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a652:	d2e6      	bcs.n	800a622 <quorem+0xa4>
 800a654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a65c:	b922      	cbnz	r2, 800a668 <quorem+0xea>
 800a65e:	3b04      	subs	r3, #4
 800a660:	429d      	cmp	r5, r3
 800a662:	461a      	mov	r2, r3
 800a664:	d30b      	bcc.n	800a67e <quorem+0x100>
 800a666:	613c      	str	r4, [r7, #16]
 800a668:	3601      	adds	r6, #1
 800a66a:	4630      	mov	r0, r6
 800a66c:	b003      	add	sp, #12
 800a66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	3b04      	subs	r3, #4
 800a676:	2a00      	cmp	r2, #0
 800a678:	d1cb      	bne.n	800a612 <quorem+0x94>
 800a67a:	3c01      	subs	r4, #1
 800a67c:	e7c6      	b.n	800a60c <quorem+0x8e>
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	3b04      	subs	r3, #4
 800a682:	2a00      	cmp	r2, #0
 800a684:	d1ef      	bne.n	800a666 <quorem+0xe8>
 800a686:	3c01      	subs	r4, #1
 800a688:	e7ea      	b.n	800a660 <quorem+0xe2>
 800a68a:	2000      	movs	r0, #0
 800a68c:	e7ee      	b.n	800a66c <quorem+0xee>
	...

0800a690 <_dtoa_r>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	69c7      	ldr	r7, [r0, #28]
 800a696:	b097      	sub	sp, #92	@ 0x5c
 800a698:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a69c:	ec55 4b10 	vmov	r4, r5, d0
 800a6a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a6a2:	9107      	str	r1, [sp, #28]
 800a6a4:	4681      	mov	r9, r0
 800a6a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a6a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6aa:	b97f      	cbnz	r7, 800a6cc <_dtoa_r+0x3c>
 800a6ac:	2010      	movs	r0, #16
 800a6ae:	f000 fe09 	bl	800b2c4 <malloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_dtoa_r+0x34>
 800a6ba:	4ba9      	ldr	r3, [pc, #676]	@ (800a960 <_dtoa_r+0x2d0>)
 800a6bc:	21ef      	movs	r1, #239	@ 0xef
 800a6be:	48a9      	ldr	r0, [pc, #676]	@ (800a964 <_dtoa_r+0x2d4>)
 800a6c0:	f001 fcd0 	bl	800c064 <__assert_func>
 800a6c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6c8:	6007      	str	r7, [r0, #0]
 800a6ca:	60c7      	str	r7, [r0, #12]
 800a6cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6d0:	6819      	ldr	r1, [r3, #0]
 800a6d2:	b159      	cbz	r1, 800a6ec <_dtoa_r+0x5c>
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	604a      	str	r2, [r1, #4]
 800a6d8:	2301      	movs	r3, #1
 800a6da:	4093      	lsls	r3, r2
 800a6dc:	608b      	str	r3, [r1, #8]
 800a6de:	4648      	mov	r0, r9
 800a6e0:	f000 fee6 	bl	800b4b0 <_Bfree>
 800a6e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	1e2b      	subs	r3, r5, #0
 800a6ee:	bfb9      	ittee	lt
 800a6f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6f4:	9305      	strlt	r3, [sp, #20]
 800a6f6:	2300      	movge	r3, #0
 800a6f8:	6033      	strge	r3, [r6, #0]
 800a6fa:	9f05      	ldr	r7, [sp, #20]
 800a6fc:	4b9a      	ldr	r3, [pc, #616]	@ (800a968 <_dtoa_r+0x2d8>)
 800a6fe:	bfbc      	itt	lt
 800a700:	2201      	movlt	r2, #1
 800a702:	6032      	strlt	r2, [r6, #0]
 800a704:	43bb      	bics	r3, r7
 800a706:	d112      	bne.n	800a72e <_dtoa_r+0x9e>
 800a708:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a70a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a714:	4323      	orrs	r3, r4
 800a716:	f000 855a 	beq.w	800b1ce <_dtoa_r+0xb3e>
 800a71a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a71c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a97c <_dtoa_r+0x2ec>
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 855c 	beq.w	800b1de <_dtoa_r+0xb4e>
 800a726:	f10a 0303 	add.w	r3, sl, #3
 800a72a:	f000 bd56 	b.w	800b1da <_dtoa_r+0xb4a>
 800a72e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a732:	2200      	movs	r2, #0
 800a734:	ec51 0b17 	vmov	r0, r1, d7
 800a738:	2300      	movs	r3, #0
 800a73a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a73e:	f7f6 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a742:	4680      	mov	r8, r0
 800a744:	b158      	cbz	r0, 800a75e <_dtoa_r+0xce>
 800a746:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a748:	2301      	movs	r3, #1
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a74e:	b113      	cbz	r3, 800a756 <_dtoa_r+0xc6>
 800a750:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a752:	4b86      	ldr	r3, [pc, #536]	@ (800a96c <_dtoa_r+0x2dc>)
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a980 <_dtoa_r+0x2f0>
 800a75a:	f000 bd40 	b.w	800b1de <_dtoa_r+0xb4e>
 800a75e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a762:	aa14      	add	r2, sp, #80	@ 0x50
 800a764:	a915      	add	r1, sp, #84	@ 0x54
 800a766:	4648      	mov	r0, r9
 800a768:	f001 f984 	bl	800ba74 <__d2b>
 800a76c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a770:	9002      	str	r0, [sp, #8]
 800a772:	2e00      	cmp	r6, #0
 800a774:	d078      	beq.n	800a868 <_dtoa_r+0x1d8>
 800a776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a778:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a78c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a790:	4619      	mov	r1, r3
 800a792:	2200      	movs	r2, #0
 800a794:	4b76      	ldr	r3, [pc, #472]	@ (800a970 <_dtoa_r+0x2e0>)
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a948 <_dtoa_r+0x2b8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 ff2a 	bl	80005f8 <__aeabi_dmul>
 800a7a4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a950 <_dtoa_r+0x2c0>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd6f 	bl	800028c <__adddf3>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	f7f5 feb6 	bl	8000524 <__aeabi_i2d>
 800a7b8:	a367      	add	r3, pc, #412	@ (adr r3, 800a958 <_dtoa_r+0x2c8>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 fd5f 	bl	800028c <__adddf3>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	f7f6 f9c1 	bl	8000b58 <__aeabi_d2iz>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4607      	mov	r7, r0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f7f6 f97c 	bl	8000adc <__aeabi_dcmplt>
 800a7e4:	b140      	cbz	r0, 800a7f8 <_dtoa_r+0x168>
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7f5 fe9c 	bl	8000524 <__aeabi_i2d>
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	462b      	mov	r3, r5
 800a7f0:	f7f6 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f4:	b900      	cbnz	r0, 800a7f8 <_dtoa_r+0x168>
 800a7f6:	3f01      	subs	r7, #1
 800a7f8:	2f16      	cmp	r7, #22
 800a7fa:	d852      	bhi.n	800a8a2 <_dtoa_r+0x212>
 800a7fc:	4b5d      	ldr	r3, [pc, #372]	@ (800a974 <_dtoa_r+0x2e4>)
 800a7fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a80a:	f7f6 f967 	bl	8000adc <__aeabi_dcmplt>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d049      	beq.n	800a8a6 <_dtoa_r+0x216>
 800a812:	3f01      	subs	r7, #1
 800a814:	2300      	movs	r3, #0
 800a816:	9310      	str	r3, [sp, #64]	@ 0x40
 800a818:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a81a:	1b9b      	subs	r3, r3, r6
 800a81c:	1e5a      	subs	r2, r3, #1
 800a81e:	bf45      	ittet	mi
 800a820:	f1c3 0301 	rsbmi	r3, r3, #1
 800a824:	9300      	strmi	r3, [sp, #0]
 800a826:	2300      	movpl	r3, #0
 800a828:	2300      	movmi	r3, #0
 800a82a:	9206      	str	r2, [sp, #24]
 800a82c:	bf54      	ite	pl
 800a82e:	9300      	strpl	r3, [sp, #0]
 800a830:	9306      	strmi	r3, [sp, #24]
 800a832:	2f00      	cmp	r7, #0
 800a834:	db39      	blt.n	800a8aa <_dtoa_r+0x21a>
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	970d      	str	r7, [sp, #52]	@ 0x34
 800a83a:	443b      	add	r3, r7
 800a83c:	9306      	str	r3, [sp, #24]
 800a83e:	2300      	movs	r3, #0
 800a840:	9308      	str	r3, [sp, #32]
 800a842:	9b07      	ldr	r3, [sp, #28]
 800a844:	2b09      	cmp	r3, #9
 800a846:	d863      	bhi.n	800a910 <_dtoa_r+0x280>
 800a848:	2b05      	cmp	r3, #5
 800a84a:	bfc4      	itt	gt
 800a84c:	3b04      	subgt	r3, #4
 800a84e:	9307      	strgt	r3, [sp, #28]
 800a850:	9b07      	ldr	r3, [sp, #28]
 800a852:	f1a3 0302 	sub.w	r3, r3, #2
 800a856:	bfcc      	ite	gt
 800a858:	2400      	movgt	r4, #0
 800a85a:	2401      	movle	r4, #1
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d863      	bhi.n	800a928 <_dtoa_r+0x298>
 800a860:	e8df f003 	tbb	[pc, r3]
 800a864:	2b375452 	.word	0x2b375452
 800a868:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a86c:	441e      	add	r6, r3
 800a86e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a872:	2b20      	cmp	r3, #32
 800a874:	bfc1      	itttt	gt
 800a876:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a87a:	409f      	lslgt	r7, r3
 800a87c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a880:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a884:	bfd6      	itet	le
 800a886:	f1c3 0320 	rsble	r3, r3, #32
 800a88a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a88e:	fa04 f003 	lslle.w	r0, r4, r3
 800a892:	f7f5 fe37 	bl	8000504 <__aeabi_ui2d>
 800a896:	2201      	movs	r2, #1
 800a898:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a89c:	3e01      	subs	r6, #1
 800a89e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a8a0:	e776      	b.n	800a790 <_dtoa_r+0x100>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e7b7      	b.n	800a816 <_dtoa_r+0x186>
 800a8a6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a8a8:	e7b6      	b.n	800a818 <_dtoa_r+0x188>
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	1bdb      	subs	r3, r3, r7
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	427b      	negs	r3, r7
 800a8b2:	9308      	str	r3, [sp, #32]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8b8:	e7c3      	b.n	800a842 <_dtoa_r+0x1b2>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8c0:	eb07 0b03 	add.w	fp, r7, r3
 800a8c4:	f10b 0301 	add.w	r3, fp, #1
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	9303      	str	r3, [sp, #12]
 800a8cc:	bfb8      	it	lt
 800a8ce:	2301      	movlt	r3, #1
 800a8d0:	e006      	b.n	800a8e0 <_dtoa_r+0x250>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dd28      	ble.n	800a92e <_dtoa_r+0x29e>
 800a8dc:	469b      	mov	fp, r3
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	f102 0514 	add.w	r5, r2, #20
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	d926      	bls.n	800a93e <_dtoa_r+0x2ae>
 800a8f0:	6041      	str	r1, [r0, #4]
 800a8f2:	4648      	mov	r0, r9
 800a8f4:	f000 fd9c 	bl	800b430 <_Balloc>
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d142      	bne.n	800a984 <_dtoa_r+0x2f4>
 800a8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a978 <_dtoa_r+0x2e8>)
 800a900:	4602      	mov	r2, r0
 800a902:	f240 11af 	movw	r1, #431	@ 0x1af
 800a906:	e6da      	b.n	800a6be <_dtoa_r+0x2e>
 800a908:	2300      	movs	r3, #0
 800a90a:	e7e3      	b.n	800a8d4 <_dtoa_r+0x244>
 800a90c:	2300      	movs	r3, #0
 800a90e:	e7d5      	b.n	800a8bc <_dtoa_r+0x22c>
 800a910:	2401      	movs	r4, #1
 800a912:	2300      	movs	r3, #0
 800a914:	9307      	str	r3, [sp, #28]
 800a916:	9409      	str	r4, [sp, #36]	@ 0x24
 800a918:	f04f 3bff 	mov.w	fp, #4294967295
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a922:	2312      	movs	r3, #18
 800a924:	920c      	str	r2, [sp, #48]	@ 0x30
 800a926:	e7db      	b.n	800a8e0 <_dtoa_r+0x250>
 800a928:	2301      	movs	r3, #1
 800a92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92c:	e7f4      	b.n	800a918 <_dtoa_r+0x288>
 800a92e:	f04f 0b01 	mov.w	fp, #1
 800a932:	f8cd b00c 	str.w	fp, [sp, #12]
 800a936:	465b      	mov	r3, fp
 800a938:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a93c:	e7d0      	b.n	800a8e0 <_dtoa_r+0x250>
 800a93e:	3101      	adds	r1, #1
 800a940:	0052      	lsls	r2, r2, #1
 800a942:	e7d1      	b.n	800a8e8 <_dtoa_r+0x258>
 800a944:	f3af 8000 	nop.w
 800a948:	636f4361 	.word	0x636f4361
 800a94c:	3fd287a7 	.word	0x3fd287a7
 800a950:	8b60c8b3 	.word	0x8b60c8b3
 800a954:	3fc68a28 	.word	0x3fc68a28
 800a958:	509f79fb 	.word	0x509f79fb
 800a95c:	3fd34413 	.word	0x3fd34413
 800a960:	0800c3b1 	.word	0x0800c3b1
 800a964:	0800c3c8 	.word	0x0800c3c8
 800a968:	7ff00000 	.word	0x7ff00000
 800a96c:	0800c381 	.word	0x0800c381
 800a970:	3ff80000 	.word	0x3ff80000
 800a974:	0800c518 	.word	0x0800c518
 800a978:	0800c420 	.word	0x0800c420
 800a97c:	0800c3ad 	.word	0x0800c3ad
 800a980:	0800c380 	.word	0x0800c380
 800a984:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a988:	6018      	str	r0, [r3, #0]
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	2b0e      	cmp	r3, #14
 800a98e:	f200 80a1 	bhi.w	800aad4 <_dtoa_r+0x444>
 800a992:	2c00      	cmp	r4, #0
 800a994:	f000 809e 	beq.w	800aad4 <_dtoa_r+0x444>
 800a998:	2f00      	cmp	r7, #0
 800a99a:	dd33      	ble.n	800aa04 <_dtoa_r+0x374>
 800a99c:	4b9c      	ldr	r3, [pc, #624]	@ (800ac10 <_dtoa_r+0x580>)
 800a99e:	f007 020f 	and.w	r2, r7, #15
 800a9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9a6:	ed93 7b00 	vldr	d7, [r3]
 800a9aa:	05f8      	lsls	r0, r7, #23
 800a9ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a9b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9b4:	d516      	bpl.n	800a9e4 <_dtoa_r+0x354>
 800a9b6:	4b97      	ldr	r3, [pc, #604]	@ (800ac14 <_dtoa_r+0x584>)
 800a9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9c0:	f7f5 ff44 	bl	800084c <__aeabi_ddiv>
 800a9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9c8:	f004 040f 	and.w	r4, r4, #15
 800a9cc:	2603      	movs	r6, #3
 800a9ce:	4d91      	ldr	r5, [pc, #580]	@ (800ac14 <_dtoa_r+0x584>)
 800a9d0:	b954      	cbnz	r4, 800a9e8 <_dtoa_r+0x358>
 800a9d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a9d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9da:	f7f5 ff37 	bl	800084c <__aeabi_ddiv>
 800a9de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9e2:	e028      	b.n	800aa36 <_dtoa_r+0x3a6>
 800a9e4:	2602      	movs	r6, #2
 800a9e6:	e7f2      	b.n	800a9ce <_dtoa_r+0x33e>
 800a9e8:	07e1      	lsls	r1, r4, #31
 800a9ea:	d508      	bpl.n	800a9fe <_dtoa_r+0x36e>
 800a9ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a9f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9f4:	f7f5 fe00 	bl	80005f8 <__aeabi_dmul>
 800a9f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	1064      	asrs	r4, r4, #1
 800aa00:	3508      	adds	r5, #8
 800aa02:	e7e5      	b.n	800a9d0 <_dtoa_r+0x340>
 800aa04:	f000 80af 	beq.w	800ab66 <_dtoa_r+0x4d6>
 800aa08:	427c      	negs	r4, r7
 800aa0a:	4b81      	ldr	r3, [pc, #516]	@ (800ac10 <_dtoa_r+0x580>)
 800aa0c:	4d81      	ldr	r5, [pc, #516]	@ (800ac14 <_dtoa_r+0x584>)
 800aa0e:	f004 020f 	and.w	r2, r4, #15
 800aa12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa1e:	f7f5 fdeb 	bl	80005f8 <__aeabi_dmul>
 800aa22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa26:	1124      	asrs	r4, r4, #4
 800aa28:	2300      	movs	r3, #0
 800aa2a:	2602      	movs	r6, #2
 800aa2c:	2c00      	cmp	r4, #0
 800aa2e:	f040 808f 	bne.w	800ab50 <_dtoa_r+0x4c0>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1d3      	bne.n	800a9de <_dtoa_r+0x34e>
 800aa36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8094 	beq.w	800ab6a <_dtoa_r+0x4da>
 800aa42:	4b75      	ldr	r3, [pc, #468]	@ (800ac18 <_dtoa_r+0x588>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	4620      	mov	r0, r4
 800aa48:	4629      	mov	r1, r5
 800aa4a:	f7f6 f847 	bl	8000adc <__aeabi_dcmplt>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f000 808b 	beq.w	800ab6a <_dtoa_r+0x4da>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 8087 	beq.w	800ab6a <_dtoa_r+0x4da>
 800aa5c:	f1bb 0f00 	cmp.w	fp, #0
 800aa60:	dd34      	ble.n	800aacc <_dtoa_r+0x43c>
 800aa62:	4620      	mov	r0, r4
 800aa64:	4b6d      	ldr	r3, [pc, #436]	@ (800ac1c <_dtoa_r+0x58c>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7f5 fdc5 	bl	80005f8 <__aeabi_dmul>
 800aa6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa72:	f107 38ff 	add.w	r8, r7, #4294967295
 800aa76:	3601      	adds	r6, #1
 800aa78:	465c      	mov	r4, fp
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f7f5 fd52 	bl	8000524 <__aeabi_i2d>
 800aa80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	4b65      	ldr	r3, [pc, #404]	@ (800ac20 <_dtoa_r+0x590>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f7f5 fbfe 	bl	800028c <__adddf3>
 800aa90:	4605      	mov	r5, r0
 800aa92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	d16a      	bne.n	800ab70 <_dtoa_r+0x4e0>
 800aa9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa9e:	4b61      	ldr	r3, [pc, #388]	@ (800ac24 <_dtoa_r+0x594>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f7f5 fbf1 	bl	8000288 <__aeabi_dsub>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aaae:	462a      	mov	r2, r5
 800aab0:	4633      	mov	r3, r6
 800aab2:	f7f6 f831 	bl	8000b18 <__aeabi_dcmpgt>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f040 8298 	bne.w	800afec <_dtoa_r+0x95c>
 800aabc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac0:	462a      	mov	r2, r5
 800aac2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aac6:	f7f6 f809 	bl	8000adc <__aeabi_dcmplt>
 800aaca:	bb38      	cbnz	r0, 800ab1c <_dtoa_r+0x48c>
 800aacc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aad0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aad4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f2c0 8157 	blt.w	800ad8a <_dtoa_r+0x6fa>
 800aadc:	2f0e      	cmp	r7, #14
 800aade:	f300 8154 	bgt.w	800ad8a <_dtoa_r+0x6fa>
 800aae2:	4b4b      	ldr	r3, [pc, #300]	@ (800ac10 <_dtoa_r+0x580>)
 800aae4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aae8:	ed93 7b00 	vldr	d7, [r3]
 800aaec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	ed8d 7b00 	vstr	d7, [sp]
 800aaf4:	f280 80e5 	bge.w	800acc2 <_dtoa_r+0x632>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f300 80e1 	bgt.w	800acc2 <_dtoa_r+0x632>
 800ab00:	d10c      	bne.n	800ab1c <_dtoa_r+0x48c>
 800ab02:	4b48      	ldr	r3, [pc, #288]	@ (800ac24 <_dtoa_r+0x594>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	ec51 0b17 	vmov	r0, r1, d7
 800ab0a:	f7f5 fd75 	bl	80005f8 <__aeabi_dmul>
 800ab0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab12:	f7f5 fff7 	bl	8000b04 <__aeabi_dcmpge>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f000 8266 	beq.w	800afe8 <_dtoa_r+0x958>
 800ab1c:	2400      	movs	r4, #0
 800ab1e:	4625      	mov	r5, r4
 800ab20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab22:	4656      	mov	r6, sl
 800ab24:	ea6f 0803 	mvn.w	r8, r3
 800ab28:	2700      	movs	r7, #0
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4648      	mov	r0, r9
 800ab2e:	f000 fcbf 	bl	800b4b0 <_Bfree>
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	f000 80bd 	beq.w	800acb2 <_dtoa_r+0x622>
 800ab38:	b12f      	cbz	r7, 800ab46 <_dtoa_r+0x4b6>
 800ab3a:	42af      	cmp	r7, r5
 800ab3c:	d003      	beq.n	800ab46 <_dtoa_r+0x4b6>
 800ab3e:	4639      	mov	r1, r7
 800ab40:	4648      	mov	r0, r9
 800ab42:	f000 fcb5 	bl	800b4b0 <_Bfree>
 800ab46:	4629      	mov	r1, r5
 800ab48:	4648      	mov	r0, r9
 800ab4a:	f000 fcb1 	bl	800b4b0 <_Bfree>
 800ab4e:	e0b0      	b.n	800acb2 <_dtoa_r+0x622>
 800ab50:	07e2      	lsls	r2, r4, #31
 800ab52:	d505      	bpl.n	800ab60 <_dtoa_r+0x4d0>
 800ab54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab58:	f7f5 fd4e 	bl	80005f8 <__aeabi_dmul>
 800ab5c:	3601      	adds	r6, #1
 800ab5e:	2301      	movs	r3, #1
 800ab60:	1064      	asrs	r4, r4, #1
 800ab62:	3508      	adds	r5, #8
 800ab64:	e762      	b.n	800aa2c <_dtoa_r+0x39c>
 800ab66:	2602      	movs	r6, #2
 800ab68:	e765      	b.n	800aa36 <_dtoa_r+0x3a6>
 800ab6a:	9c03      	ldr	r4, [sp, #12]
 800ab6c:	46b8      	mov	r8, r7
 800ab6e:	e784      	b.n	800aa7a <_dtoa_r+0x3ea>
 800ab70:	4b27      	ldr	r3, [pc, #156]	@ (800ac10 <_dtoa_r+0x580>)
 800ab72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab7c:	4454      	add	r4, sl
 800ab7e:	2900      	cmp	r1, #0
 800ab80:	d054      	beq.n	800ac2c <_dtoa_r+0x59c>
 800ab82:	4929      	ldr	r1, [pc, #164]	@ (800ac28 <_dtoa_r+0x598>)
 800ab84:	2000      	movs	r0, #0
 800ab86:	f7f5 fe61 	bl	800084c <__aeabi_ddiv>
 800ab8a:	4633      	mov	r3, r6
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	f7f5 fb7b 	bl	8000288 <__aeabi_dsub>
 800ab92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab96:	4656      	mov	r6, sl
 800ab98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab9c:	f7f5 ffdc 	bl	8000b58 <__aeabi_d2iz>
 800aba0:	4605      	mov	r5, r0
 800aba2:	f7f5 fcbf 	bl	8000524 <__aeabi_i2d>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abae:	f7f5 fb6b 	bl	8000288 <__aeabi_dsub>
 800abb2:	3530      	adds	r5, #48	@ 0x30
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abbc:	f806 5b01 	strb.w	r5, [r6], #1
 800abc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abc4:	f7f5 ff8a 	bl	8000adc <__aeabi_dcmplt>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d172      	bne.n	800acb2 <_dtoa_r+0x622>
 800abcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd0:	4911      	ldr	r1, [pc, #68]	@ (800ac18 <_dtoa_r+0x588>)
 800abd2:	2000      	movs	r0, #0
 800abd4:	f7f5 fb58 	bl	8000288 <__aeabi_dsub>
 800abd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abdc:	f7f5 ff7e 	bl	8000adc <__aeabi_dcmplt>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	f040 80b4 	bne.w	800ad4e <_dtoa_r+0x6be>
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	f43f af70 	beq.w	800aacc <_dtoa_r+0x43c>
 800abec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800abf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ac1c <_dtoa_r+0x58c>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	f7f5 fd00 	bl	80005f8 <__aeabi_dmul>
 800abf8:	4b08      	ldr	r3, [pc, #32]	@ (800ac1c <_dtoa_r+0x58c>)
 800abfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800abfe:	2200      	movs	r2, #0
 800ac00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac04:	f7f5 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ac08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac0c:	e7c4      	b.n	800ab98 <_dtoa_r+0x508>
 800ac0e:	bf00      	nop
 800ac10:	0800c518 	.word	0x0800c518
 800ac14:	0800c4f0 	.word	0x0800c4f0
 800ac18:	3ff00000 	.word	0x3ff00000
 800ac1c:	40240000 	.word	0x40240000
 800ac20:	401c0000 	.word	0x401c0000
 800ac24:	40140000 	.word	0x40140000
 800ac28:	3fe00000 	.word	0x3fe00000
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f7f5 fce2 	bl	80005f8 <__aeabi_dmul>
 800ac34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac38:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac3a:	4656      	mov	r6, sl
 800ac3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac40:	f7f5 ff8a 	bl	8000b58 <__aeabi_d2iz>
 800ac44:	4605      	mov	r5, r0
 800ac46:	f7f5 fc6d 	bl	8000524 <__aeabi_i2d>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac52:	f7f5 fb19 	bl	8000288 <__aeabi_dsub>
 800ac56:	3530      	adds	r5, #48	@ 0x30
 800ac58:	f806 5b01 	strb.w	r5, [r6], #1
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	42a6      	cmp	r6, r4
 800ac62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	d124      	bne.n	800acb6 <_dtoa_r+0x626>
 800ac6c:	4baf      	ldr	r3, [pc, #700]	@ (800af2c <_dtoa_r+0x89c>)
 800ac6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac72:	f7f5 fb0b 	bl	800028c <__adddf3>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac7e:	f7f5 ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d163      	bne.n	800ad4e <_dtoa_r+0x6be>
 800ac86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac8a:	49a8      	ldr	r1, [pc, #672]	@ (800af2c <_dtoa_r+0x89c>)
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f7f5 fafb 	bl	8000288 <__aeabi_dsub>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac9a:	f7f5 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f af14 	beq.w	800aacc <_dtoa_r+0x43c>
 800aca4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aca6:	1e73      	subs	r3, r6, #1
 800aca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acae:	2b30      	cmp	r3, #48	@ 0x30
 800acb0:	d0f8      	beq.n	800aca4 <_dtoa_r+0x614>
 800acb2:	4647      	mov	r7, r8
 800acb4:	e03b      	b.n	800ad2e <_dtoa_r+0x69e>
 800acb6:	4b9e      	ldr	r3, [pc, #632]	@ (800af30 <_dtoa_r+0x8a0>)
 800acb8:	f7f5 fc9e 	bl	80005f8 <__aeabi_dmul>
 800acbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acc0:	e7bc      	b.n	800ac3c <_dtoa_r+0x5ac>
 800acc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800acc6:	4656      	mov	r6, sl
 800acc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fdbc 	bl	800084c <__aeabi_ddiv>
 800acd4:	f7f5 ff40 	bl	8000b58 <__aeabi_d2iz>
 800acd8:	4680      	mov	r8, r0
 800acda:	f7f5 fc23 	bl	8000524 <__aeabi_i2d>
 800acde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ace2:	f7f5 fc89 	bl	80005f8 <__aeabi_dmul>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acf2:	f7f5 fac9 	bl	8000288 <__aeabi_dsub>
 800acf6:	f806 4b01 	strb.w	r4, [r6], #1
 800acfa:	9d03      	ldr	r5, [sp, #12]
 800acfc:	eba6 040a 	sub.w	r4, r6, sl
 800ad00:	42a5      	cmp	r5, r4
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	d133      	bne.n	800ad70 <_dtoa_r+0x6e0>
 800ad08:	f7f5 fac0 	bl	800028c <__adddf3>
 800ad0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad10:	4604      	mov	r4, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	f7f5 ff00 	bl	8000b18 <__aeabi_dcmpgt>
 800ad18:	b9c0      	cbnz	r0, 800ad4c <_dtoa_r+0x6bc>
 800ad1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	4629      	mov	r1, r5
 800ad22:	f7f5 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad26:	b110      	cbz	r0, 800ad2e <_dtoa_r+0x69e>
 800ad28:	f018 0f01 	tst.w	r8, #1
 800ad2c:	d10e      	bne.n	800ad4c <_dtoa_r+0x6bc>
 800ad2e:	9902      	ldr	r1, [sp, #8]
 800ad30:	4648      	mov	r0, r9
 800ad32:	f000 fbbd 	bl	800b4b0 <_Bfree>
 800ad36:	2300      	movs	r3, #0
 800ad38:	7033      	strb	r3, [r6, #0]
 800ad3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad3c:	3701      	adds	r7, #1
 800ad3e:	601f      	str	r7, [r3, #0]
 800ad40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 824b 	beq.w	800b1de <_dtoa_r+0xb4e>
 800ad48:	601e      	str	r6, [r3, #0]
 800ad4a:	e248      	b.n	800b1de <_dtoa_r+0xb4e>
 800ad4c:	46b8      	mov	r8, r7
 800ad4e:	4633      	mov	r3, r6
 800ad50:	461e      	mov	r6, r3
 800ad52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad56:	2a39      	cmp	r2, #57	@ 0x39
 800ad58:	d106      	bne.n	800ad68 <_dtoa_r+0x6d8>
 800ad5a:	459a      	cmp	sl, r3
 800ad5c:	d1f8      	bne.n	800ad50 <_dtoa_r+0x6c0>
 800ad5e:	2230      	movs	r2, #48	@ 0x30
 800ad60:	f108 0801 	add.w	r8, r8, #1
 800ad64:	f88a 2000 	strb.w	r2, [sl]
 800ad68:	781a      	ldrb	r2, [r3, #0]
 800ad6a:	3201      	adds	r2, #1
 800ad6c:	701a      	strb	r2, [r3, #0]
 800ad6e:	e7a0      	b.n	800acb2 <_dtoa_r+0x622>
 800ad70:	4b6f      	ldr	r3, [pc, #444]	@ (800af30 <_dtoa_r+0x8a0>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	f7f5 fc40 	bl	80005f8 <__aeabi_dmul>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	f7f5 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d09f      	beq.n	800acc8 <_dtoa_r+0x638>
 800ad88:	e7d1      	b.n	800ad2e <_dtoa_r+0x69e>
 800ad8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	f000 80ea 	beq.w	800af66 <_dtoa_r+0x8d6>
 800ad92:	9a07      	ldr	r2, [sp, #28]
 800ad94:	2a01      	cmp	r2, #1
 800ad96:	f300 80cd 	bgt.w	800af34 <_dtoa_r+0x8a4>
 800ad9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	f000 80c1 	beq.w	800af24 <_dtoa_r+0x894>
 800ada2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ada6:	9c08      	ldr	r4, [sp, #32]
 800ada8:	9e00      	ldr	r6, [sp, #0]
 800adaa:	9a00      	ldr	r2, [sp, #0]
 800adac:	441a      	add	r2, r3
 800adae:	9200      	str	r2, [sp, #0]
 800adb0:	9a06      	ldr	r2, [sp, #24]
 800adb2:	2101      	movs	r1, #1
 800adb4:	441a      	add	r2, r3
 800adb6:	4648      	mov	r0, r9
 800adb8:	9206      	str	r2, [sp, #24]
 800adba:	f000 fc2d 	bl	800b618 <__i2b>
 800adbe:	4605      	mov	r5, r0
 800adc0:	b166      	cbz	r6, 800addc <_dtoa_r+0x74c>
 800adc2:	9b06      	ldr	r3, [sp, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	dd09      	ble.n	800addc <_dtoa_r+0x74c>
 800adc8:	42b3      	cmp	r3, r6
 800adca:	9a00      	ldr	r2, [sp, #0]
 800adcc:	bfa8      	it	ge
 800adce:	4633      	movge	r3, r6
 800add0:	1ad2      	subs	r2, r2, r3
 800add2:	9200      	str	r2, [sp, #0]
 800add4:	9a06      	ldr	r2, [sp, #24]
 800add6:	1af6      	subs	r6, r6, r3
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	9306      	str	r3, [sp, #24]
 800addc:	9b08      	ldr	r3, [sp, #32]
 800adde:	b30b      	cbz	r3, 800ae24 <_dtoa_r+0x794>
 800ade0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80c6 	beq.w	800af74 <_dtoa_r+0x8e4>
 800ade8:	2c00      	cmp	r4, #0
 800adea:	f000 80c0 	beq.w	800af6e <_dtoa_r+0x8de>
 800adee:	4629      	mov	r1, r5
 800adf0:	4622      	mov	r2, r4
 800adf2:	4648      	mov	r0, r9
 800adf4:	f000 fcc8 	bl	800b788 <__pow5mult>
 800adf8:	9a02      	ldr	r2, [sp, #8]
 800adfa:	4601      	mov	r1, r0
 800adfc:	4605      	mov	r5, r0
 800adfe:	4648      	mov	r0, r9
 800ae00:	f000 fc20 	bl	800b644 <__multiply>
 800ae04:	9902      	ldr	r1, [sp, #8]
 800ae06:	4680      	mov	r8, r0
 800ae08:	4648      	mov	r0, r9
 800ae0a:	f000 fb51 	bl	800b4b0 <_Bfree>
 800ae0e:	9b08      	ldr	r3, [sp, #32]
 800ae10:	1b1b      	subs	r3, r3, r4
 800ae12:	9308      	str	r3, [sp, #32]
 800ae14:	f000 80b1 	beq.w	800af7a <_dtoa_r+0x8ea>
 800ae18:	9a08      	ldr	r2, [sp, #32]
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	4648      	mov	r0, r9
 800ae1e:	f000 fcb3 	bl	800b788 <__pow5mult>
 800ae22:	9002      	str	r0, [sp, #8]
 800ae24:	2101      	movs	r1, #1
 800ae26:	4648      	mov	r0, r9
 800ae28:	f000 fbf6 	bl	800b618 <__i2b>
 800ae2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae2e:	4604      	mov	r4, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 81d8 	beq.w	800b1e6 <_dtoa_r+0xb56>
 800ae36:	461a      	mov	r2, r3
 800ae38:	4601      	mov	r1, r0
 800ae3a:	4648      	mov	r0, r9
 800ae3c:	f000 fca4 	bl	800b788 <__pow5mult>
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	4604      	mov	r4, r0
 800ae46:	f300 809f 	bgt.w	800af88 <_dtoa_r+0x8f8>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f040 8097 	bne.w	800af80 <_dtoa_r+0x8f0>
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f040 8093 	bne.w	800af84 <_dtoa_r+0x8f4>
 800ae5e:	9b05      	ldr	r3, [sp, #20]
 800ae60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae64:	0d1b      	lsrs	r3, r3, #20
 800ae66:	051b      	lsls	r3, r3, #20
 800ae68:	b133      	cbz	r3, 800ae78 <_dtoa_r+0x7e8>
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	9b06      	ldr	r3, [sp, #24]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9306      	str	r3, [sp, #24]
 800ae76:	2301      	movs	r3, #1
 800ae78:	9308      	str	r3, [sp, #32]
 800ae7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 81b8 	beq.w	800b1f2 <_dtoa_r+0xb62>
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae88:	6918      	ldr	r0, [r3, #16]
 800ae8a:	f000 fb79 	bl	800b580 <__hi0bits>
 800ae8e:	f1c0 0020 	rsb	r0, r0, #32
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	4418      	add	r0, r3
 800ae96:	f010 001f 	ands.w	r0, r0, #31
 800ae9a:	f000 8082 	beq.w	800afa2 <_dtoa_r+0x912>
 800ae9e:	f1c0 0320 	rsb	r3, r0, #32
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	dd73      	ble.n	800af8e <_dtoa_r+0x8fe>
 800aea6:	9b00      	ldr	r3, [sp, #0]
 800aea8:	f1c0 001c 	rsb	r0, r0, #28
 800aeac:	4403      	add	r3, r0
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	9b06      	ldr	r3, [sp, #24]
 800aeb2:	4403      	add	r3, r0
 800aeb4:	4406      	add	r6, r0
 800aeb6:	9306      	str	r3, [sp, #24]
 800aeb8:	9b00      	ldr	r3, [sp, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dd05      	ble.n	800aeca <_dtoa_r+0x83a>
 800aebe:	9902      	ldr	r1, [sp, #8]
 800aec0:	461a      	mov	r2, r3
 800aec2:	4648      	mov	r0, r9
 800aec4:	f000 fcba 	bl	800b83c <__lshift>
 800aec8:	9002      	str	r0, [sp, #8]
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd05      	ble.n	800aedc <_dtoa_r+0x84c>
 800aed0:	4621      	mov	r1, r4
 800aed2:	461a      	mov	r2, r3
 800aed4:	4648      	mov	r0, r9
 800aed6:	f000 fcb1 	bl	800b83c <__lshift>
 800aeda:	4604      	mov	r4, r0
 800aedc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d061      	beq.n	800afa6 <_dtoa_r+0x916>
 800aee2:	9802      	ldr	r0, [sp, #8]
 800aee4:	4621      	mov	r1, r4
 800aee6:	f000 fd15 	bl	800b914 <__mcmp>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	da5b      	bge.n	800afa6 <_dtoa_r+0x916>
 800aeee:	2300      	movs	r3, #0
 800aef0:	9902      	ldr	r1, [sp, #8]
 800aef2:	220a      	movs	r2, #10
 800aef4:	4648      	mov	r0, r9
 800aef6:	f000 fafd 	bl	800b4f4 <__multadd>
 800aefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aefc:	9002      	str	r0, [sp, #8]
 800aefe:	f107 38ff 	add.w	r8, r7, #4294967295
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 8177 	beq.w	800b1f6 <_dtoa_r+0xb66>
 800af08:	4629      	mov	r1, r5
 800af0a:	2300      	movs	r3, #0
 800af0c:	220a      	movs	r2, #10
 800af0e:	4648      	mov	r0, r9
 800af10:	f000 faf0 	bl	800b4f4 <__multadd>
 800af14:	f1bb 0f00 	cmp.w	fp, #0
 800af18:	4605      	mov	r5, r0
 800af1a:	dc6f      	bgt.n	800affc <_dtoa_r+0x96c>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	dc49      	bgt.n	800afb6 <_dtoa_r+0x926>
 800af22:	e06b      	b.n	800affc <_dtoa_r+0x96c>
 800af24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af2a:	e73c      	b.n	800ada6 <_dtoa_r+0x716>
 800af2c:	3fe00000 	.word	0x3fe00000
 800af30:	40240000 	.word	0x40240000
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	1e5c      	subs	r4, r3, #1
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	db09      	blt.n	800af52 <_dtoa_r+0x8c2>
 800af3e:	1b1c      	subs	r4, r3, r4
 800af40:	9b03      	ldr	r3, [sp, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f6bf af30 	bge.w	800ada8 <_dtoa_r+0x718>
 800af48:	9b00      	ldr	r3, [sp, #0]
 800af4a:	9a03      	ldr	r2, [sp, #12]
 800af4c:	1a9e      	subs	r6, r3, r2
 800af4e:	2300      	movs	r3, #0
 800af50:	e72b      	b.n	800adaa <_dtoa_r+0x71a>
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af56:	9408      	str	r4, [sp, #32]
 800af58:	1ae3      	subs	r3, r4, r3
 800af5a:	441a      	add	r2, r3
 800af5c:	9e00      	ldr	r6, [sp, #0]
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	920d      	str	r2, [sp, #52]	@ 0x34
 800af62:	2400      	movs	r4, #0
 800af64:	e721      	b.n	800adaa <_dtoa_r+0x71a>
 800af66:	9c08      	ldr	r4, [sp, #32]
 800af68:	9e00      	ldr	r6, [sp, #0]
 800af6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800af6c:	e728      	b.n	800adc0 <_dtoa_r+0x730>
 800af6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800af72:	e751      	b.n	800ae18 <_dtoa_r+0x788>
 800af74:	9a08      	ldr	r2, [sp, #32]
 800af76:	9902      	ldr	r1, [sp, #8]
 800af78:	e750      	b.n	800ae1c <_dtoa_r+0x78c>
 800af7a:	f8cd 8008 	str.w	r8, [sp, #8]
 800af7e:	e751      	b.n	800ae24 <_dtoa_r+0x794>
 800af80:	2300      	movs	r3, #0
 800af82:	e779      	b.n	800ae78 <_dtoa_r+0x7e8>
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	e777      	b.n	800ae78 <_dtoa_r+0x7e8>
 800af88:	2300      	movs	r3, #0
 800af8a:	9308      	str	r3, [sp, #32]
 800af8c:	e779      	b.n	800ae82 <_dtoa_r+0x7f2>
 800af8e:	d093      	beq.n	800aeb8 <_dtoa_r+0x828>
 800af90:	9a00      	ldr	r2, [sp, #0]
 800af92:	331c      	adds	r3, #28
 800af94:	441a      	add	r2, r3
 800af96:	9200      	str	r2, [sp, #0]
 800af98:	9a06      	ldr	r2, [sp, #24]
 800af9a:	441a      	add	r2, r3
 800af9c:	441e      	add	r6, r3
 800af9e:	9206      	str	r2, [sp, #24]
 800afa0:	e78a      	b.n	800aeb8 <_dtoa_r+0x828>
 800afa2:	4603      	mov	r3, r0
 800afa4:	e7f4      	b.n	800af90 <_dtoa_r+0x900>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	46b8      	mov	r8, r7
 800afac:	dc20      	bgt.n	800aff0 <_dtoa_r+0x960>
 800afae:	469b      	mov	fp, r3
 800afb0:	9b07      	ldr	r3, [sp, #28]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	dd1e      	ble.n	800aff4 <_dtoa_r+0x964>
 800afb6:	f1bb 0f00 	cmp.w	fp, #0
 800afba:	f47f adb1 	bne.w	800ab20 <_dtoa_r+0x490>
 800afbe:	4621      	mov	r1, r4
 800afc0:	465b      	mov	r3, fp
 800afc2:	2205      	movs	r2, #5
 800afc4:	4648      	mov	r0, r9
 800afc6:	f000 fa95 	bl	800b4f4 <__multadd>
 800afca:	4601      	mov	r1, r0
 800afcc:	4604      	mov	r4, r0
 800afce:	9802      	ldr	r0, [sp, #8]
 800afd0:	f000 fca0 	bl	800b914 <__mcmp>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f77f ada3 	ble.w	800ab20 <_dtoa_r+0x490>
 800afda:	4656      	mov	r6, sl
 800afdc:	2331      	movs	r3, #49	@ 0x31
 800afde:	f806 3b01 	strb.w	r3, [r6], #1
 800afe2:	f108 0801 	add.w	r8, r8, #1
 800afe6:	e59f      	b.n	800ab28 <_dtoa_r+0x498>
 800afe8:	9c03      	ldr	r4, [sp, #12]
 800afea:	46b8      	mov	r8, r7
 800afec:	4625      	mov	r5, r4
 800afee:	e7f4      	b.n	800afda <_dtoa_r+0x94a>
 800aff0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800aff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 8101 	beq.w	800b1fe <_dtoa_r+0xb6e>
 800affc:	2e00      	cmp	r6, #0
 800affe:	dd05      	ble.n	800b00c <_dtoa_r+0x97c>
 800b000:	4629      	mov	r1, r5
 800b002:	4632      	mov	r2, r6
 800b004:	4648      	mov	r0, r9
 800b006:	f000 fc19 	bl	800b83c <__lshift>
 800b00a:	4605      	mov	r5, r0
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d05c      	beq.n	800b0cc <_dtoa_r+0xa3c>
 800b012:	6869      	ldr	r1, [r5, #4]
 800b014:	4648      	mov	r0, r9
 800b016:	f000 fa0b 	bl	800b430 <_Balloc>
 800b01a:	4606      	mov	r6, r0
 800b01c:	b928      	cbnz	r0, 800b02a <_dtoa_r+0x99a>
 800b01e:	4b82      	ldr	r3, [pc, #520]	@ (800b228 <_dtoa_r+0xb98>)
 800b020:	4602      	mov	r2, r0
 800b022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b026:	f7ff bb4a 	b.w	800a6be <_dtoa_r+0x2e>
 800b02a:	692a      	ldr	r2, [r5, #16]
 800b02c:	3202      	adds	r2, #2
 800b02e:	0092      	lsls	r2, r2, #2
 800b030:	f105 010c 	add.w	r1, r5, #12
 800b034:	300c      	adds	r0, #12
 800b036:	f001 f807 	bl	800c048 <memcpy>
 800b03a:	2201      	movs	r2, #1
 800b03c:	4631      	mov	r1, r6
 800b03e:	4648      	mov	r0, r9
 800b040:	f000 fbfc 	bl	800b83c <__lshift>
 800b044:	f10a 0301 	add.w	r3, sl, #1
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	eb0a 030b 	add.w	r3, sl, fp
 800b04e:	9308      	str	r3, [sp, #32]
 800b050:	9b04      	ldr	r3, [sp, #16]
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	462f      	mov	r7, r5
 800b058:	9306      	str	r3, [sp, #24]
 800b05a:	4605      	mov	r5, r0
 800b05c:	9b00      	ldr	r3, [sp, #0]
 800b05e:	9802      	ldr	r0, [sp, #8]
 800b060:	4621      	mov	r1, r4
 800b062:	f103 3bff 	add.w	fp, r3, #4294967295
 800b066:	f7ff fa8a 	bl	800a57e <quorem>
 800b06a:	4603      	mov	r3, r0
 800b06c:	3330      	adds	r3, #48	@ 0x30
 800b06e:	9003      	str	r0, [sp, #12]
 800b070:	4639      	mov	r1, r7
 800b072:	9802      	ldr	r0, [sp, #8]
 800b074:	9309      	str	r3, [sp, #36]	@ 0x24
 800b076:	f000 fc4d 	bl	800b914 <__mcmp>
 800b07a:	462a      	mov	r2, r5
 800b07c:	9004      	str	r0, [sp, #16]
 800b07e:	4621      	mov	r1, r4
 800b080:	4648      	mov	r0, r9
 800b082:	f000 fc63 	bl	800b94c <__mdiff>
 800b086:	68c2      	ldr	r2, [r0, #12]
 800b088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b08a:	4606      	mov	r6, r0
 800b08c:	bb02      	cbnz	r2, 800b0d0 <_dtoa_r+0xa40>
 800b08e:	4601      	mov	r1, r0
 800b090:	9802      	ldr	r0, [sp, #8]
 800b092:	f000 fc3f 	bl	800b914 <__mcmp>
 800b096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b098:	4602      	mov	r2, r0
 800b09a:	4631      	mov	r1, r6
 800b09c:	4648      	mov	r0, r9
 800b09e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a2:	f000 fa05 	bl	800b4b0 <_Bfree>
 800b0a6:	9b07      	ldr	r3, [sp, #28]
 800b0a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b0aa:	9e00      	ldr	r6, [sp, #0]
 800b0ac:	ea42 0103 	orr.w	r1, r2, r3
 800b0b0:	9b06      	ldr	r3, [sp, #24]
 800b0b2:	4319      	orrs	r1, r3
 800b0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b6:	d10d      	bne.n	800b0d4 <_dtoa_r+0xa44>
 800b0b8:	2b39      	cmp	r3, #57	@ 0x39
 800b0ba:	d027      	beq.n	800b10c <_dtoa_r+0xa7c>
 800b0bc:	9a04      	ldr	r2, [sp, #16]
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	dd01      	ble.n	800b0c6 <_dtoa_r+0xa36>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	3331      	adds	r3, #49	@ 0x31
 800b0c6:	f88b 3000 	strb.w	r3, [fp]
 800b0ca:	e52e      	b.n	800ab2a <_dtoa_r+0x49a>
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	e7b9      	b.n	800b044 <_dtoa_r+0x9b4>
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	e7e2      	b.n	800b09a <_dtoa_r+0xa0a>
 800b0d4:	9904      	ldr	r1, [sp, #16]
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	db04      	blt.n	800b0e4 <_dtoa_r+0xa54>
 800b0da:	9807      	ldr	r0, [sp, #28]
 800b0dc:	4301      	orrs	r1, r0
 800b0de:	9806      	ldr	r0, [sp, #24]
 800b0e0:	4301      	orrs	r1, r0
 800b0e2:	d120      	bne.n	800b126 <_dtoa_r+0xa96>
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	ddee      	ble.n	800b0c6 <_dtoa_r+0xa36>
 800b0e8:	9902      	ldr	r1, [sp, #8]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	4648      	mov	r0, r9
 800b0f0:	f000 fba4 	bl	800b83c <__lshift>
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	9002      	str	r0, [sp, #8]
 800b0f8:	f000 fc0c 	bl	800b914 <__mcmp>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	9b00      	ldr	r3, [sp, #0]
 800b100:	dc02      	bgt.n	800b108 <_dtoa_r+0xa78>
 800b102:	d1e0      	bne.n	800b0c6 <_dtoa_r+0xa36>
 800b104:	07da      	lsls	r2, r3, #31
 800b106:	d5de      	bpl.n	800b0c6 <_dtoa_r+0xa36>
 800b108:	2b39      	cmp	r3, #57	@ 0x39
 800b10a:	d1da      	bne.n	800b0c2 <_dtoa_r+0xa32>
 800b10c:	2339      	movs	r3, #57	@ 0x39
 800b10e:	f88b 3000 	strb.w	r3, [fp]
 800b112:	4633      	mov	r3, r6
 800b114:	461e      	mov	r6, r3
 800b116:	3b01      	subs	r3, #1
 800b118:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b11c:	2a39      	cmp	r2, #57	@ 0x39
 800b11e:	d04e      	beq.n	800b1be <_dtoa_r+0xb2e>
 800b120:	3201      	adds	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]
 800b124:	e501      	b.n	800ab2a <_dtoa_r+0x49a>
 800b126:	2a00      	cmp	r2, #0
 800b128:	dd03      	ble.n	800b132 <_dtoa_r+0xaa2>
 800b12a:	2b39      	cmp	r3, #57	@ 0x39
 800b12c:	d0ee      	beq.n	800b10c <_dtoa_r+0xa7c>
 800b12e:	3301      	adds	r3, #1
 800b130:	e7c9      	b.n	800b0c6 <_dtoa_r+0xa36>
 800b132:	9a00      	ldr	r2, [sp, #0]
 800b134:	9908      	ldr	r1, [sp, #32]
 800b136:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b13a:	428a      	cmp	r2, r1
 800b13c:	d028      	beq.n	800b190 <_dtoa_r+0xb00>
 800b13e:	9902      	ldr	r1, [sp, #8]
 800b140:	2300      	movs	r3, #0
 800b142:	220a      	movs	r2, #10
 800b144:	4648      	mov	r0, r9
 800b146:	f000 f9d5 	bl	800b4f4 <__multadd>
 800b14a:	42af      	cmp	r7, r5
 800b14c:	9002      	str	r0, [sp, #8]
 800b14e:	f04f 0300 	mov.w	r3, #0
 800b152:	f04f 020a 	mov.w	r2, #10
 800b156:	4639      	mov	r1, r7
 800b158:	4648      	mov	r0, r9
 800b15a:	d107      	bne.n	800b16c <_dtoa_r+0xadc>
 800b15c:	f000 f9ca 	bl	800b4f4 <__multadd>
 800b160:	4607      	mov	r7, r0
 800b162:	4605      	mov	r5, r0
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	3301      	adds	r3, #1
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	e777      	b.n	800b05c <_dtoa_r+0x9cc>
 800b16c:	f000 f9c2 	bl	800b4f4 <__multadd>
 800b170:	4629      	mov	r1, r5
 800b172:	4607      	mov	r7, r0
 800b174:	2300      	movs	r3, #0
 800b176:	220a      	movs	r2, #10
 800b178:	4648      	mov	r0, r9
 800b17a:	f000 f9bb 	bl	800b4f4 <__multadd>
 800b17e:	4605      	mov	r5, r0
 800b180:	e7f0      	b.n	800b164 <_dtoa_r+0xad4>
 800b182:	f1bb 0f00 	cmp.w	fp, #0
 800b186:	bfcc      	ite	gt
 800b188:	465e      	movgt	r6, fp
 800b18a:	2601      	movle	r6, #1
 800b18c:	4456      	add	r6, sl
 800b18e:	2700      	movs	r7, #0
 800b190:	9902      	ldr	r1, [sp, #8]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2201      	movs	r2, #1
 800b196:	4648      	mov	r0, r9
 800b198:	f000 fb50 	bl	800b83c <__lshift>
 800b19c:	4621      	mov	r1, r4
 800b19e:	9002      	str	r0, [sp, #8]
 800b1a0:	f000 fbb8 	bl	800b914 <__mcmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	dcb4      	bgt.n	800b112 <_dtoa_r+0xa82>
 800b1a8:	d102      	bne.n	800b1b0 <_dtoa_r+0xb20>
 800b1aa:	9b00      	ldr	r3, [sp, #0]
 800b1ac:	07db      	lsls	r3, r3, #31
 800b1ae:	d4b0      	bmi.n	800b112 <_dtoa_r+0xa82>
 800b1b0:	4633      	mov	r3, r6
 800b1b2:	461e      	mov	r6, r3
 800b1b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1b8:	2a30      	cmp	r2, #48	@ 0x30
 800b1ba:	d0fa      	beq.n	800b1b2 <_dtoa_r+0xb22>
 800b1bc:	e4b5      	b.n	800ab2a <_dtoa_r+0x49a>
 800b1be:	459a      	cmp	sl, r3
 800b1c0:	d1a8      	bne.n	800b114 <_dtoa_r+0xa84>
 800b1c2:	2331      	movs	r3, #49	@ 0x31
 800b1c4:	f108 0801 	add.w	r8, r8, #1
 800b1c8:	f88a 3000 	strb.w	r3, [sl]
 800b1cc:	e4ad      	b.n	800ab2a <_dtoa_r+0x49a>
 800b1ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b22c <_dtoa_r+0xb9c>
 800b1d4:	b11b      	cbz	r3, 800b1de <_dtoa_r+0xb4e>
 800b1d6:	f10a 0308 	add.w	r3, sl, #8
 800b1da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	4650      	mov	r0, sl
 800b1e0:	b017      	add	sp, #92	@ 0x5c
 800b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e6:	9b07      	ldr	r3, [sp, #28]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	f77f ae2e 	ble.w	800ae4a <_dtoa_r+0x7ba>
 800b1ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1f0:	9308      	str	r3, [sp, #32]
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	e64d      	b.n	800ae92 <_dtoa_r+0x802>
 800b1f6:	f1bb 0f00 	cmp.w	fp, #0
 800b1fa:	f77f aed9 	ble.w	800afb0 <_dtoa_r+0x920>
 800b1fe:	4656      	mov	r6, sl
 800b200:	9802      	ldr	r0, [sp, #8]
 800b202:	4621      	mov	r1, r4
 800b204:	f7ff f9bb 	bl	800a57e <quorem>
 800b208:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b20c:	f806 3b01 	strb.w	r3, [r6], #1
 800b210:	eba6 020a 	sub.w	r2, r6, sl
 800b214:	4593      	cmp	fp, r2
 800b216:	ddb4      	ble.n	800b182 <_dtoa_r+0xaf2>
 800b218:	9902      	ldr	r1, [sp, #8]
 800b21a:	2300      	movs	r3, #0
 800b21c:	220a      	movs	r2, #10
 800b21e:	4648      	mov	r0, r9
 800b220:	f000 f968 	bl	800b4f4 <__multadd>
 800b224:	9002      	str	r0, [sp, #8]
 800b226:	e7eb      	b.n	800b200 <_dtoa_r+0xb70>
 800b228:	0800c420 	.word	0x0800c420
 800b22c:	0800c3a4 	.word	0x0800c3a4

0800b230 <_free_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4605      	mov	r5, r0
 800b234:	2900      	cmp	r1, #0
 800b236:	d041      	beq.n	800b2bc <_free_r+0x8c>
 800b238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b23c:	1f0c      	subs	r4, r1, #4
 800b23e:	2b00      	cmp	r3, #0
 800b240:	bfb8      	it	lt
 800b242:	18e4      	addlt	r4, r4, r3
 800b244:	f000 f8e8 	bl	800b418 <__malloc_lock>
 800b248:	4a1d      	ldr	r2, [pc, #116]	@ (800b2c0 <_free_r+0x90>)
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	b933      	cbnz	r3, 800b25c <_free_r+0x2c>
 800b24e:	6063      	str	r3, [r4, #4]
 800b250:	6014      	str	r4, [r2, #0]
 800b252:	4628      	mov	r0, r5
 800b254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b258:	f000 b8e4 	b.w	800b424 <__malloc_unlock>
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d908      	bls.n	800b272 <_free_r+0x42>
 800b260:	6820      	ldr	r0, [r4, #0]
 800b262:	1821      	adds	r1, r4, r0
 800b264:	428b      	cmp	r3, r1
 800b266:	bf01      	itttt	eq
 800b268:	6819      	ldreq	r1, [r3, #0]
 800b26a:	685b      	ldreq	r3, [r3, #4]
 800b26c:	1809      	addeq	r1, r1, r0
 800b26e:	6021      	streq	r1, [r4, #0]
 800b270:	e7ed      	b.n	800b24e <_free_r+0x1e>
 800b272:	461a      	mov	r2, r3
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	b10b      	cbz	r3, 800b27c <_free_r+0x4c>
 800b278:	42a3      	cmp	r3, r4
 800b27a:	d9fa      	bls.n	800b272 <_free_r+0x42>
 800b27c:	6811      	ldr	r1, [r2, #0]
 800b27e:	1850      	adds	r0, r2, r1
 800b280:	42a0      	cmp	r0, r4
 800b282:	d10b      	bne.n	800b29c <_free_r+0x6c>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	4401      	add	r1, r0
 800b288:	1850      	adds	r0, r2, r1
 800b28a:	4283      	cmp	r3, r0
 800b28c:	6011      	str	r1, [r2, #0]
 800b28e:	d1e0      	bne.n	800b252 <_free_r+0x22>
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	6053      	str	r3, [r2, #4]
 800b296:	4408      	add	r0, r1
 800b298:	6010      	str	r0, [r2, #0]
 800b29a:	e7da      	b.n	800b252 <_free_r+0x22>
 800b29c:	d902      	bls.n	800b2a4 <_free_r+0x74>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	e7d6      	b.n	800b252 <_free_r+0x22>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	1821      	adds	r1, r4, r0
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf04      	itt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	bf04      	itt	eq
 800b2b4:	1809      	addeq	r1, r1, r0
 800b2b6:	6021      	streq	r1, [r4, #0]
 800b2b8:	6054      	str	r4, [r2, #4]
 800b2ba:	e7ca      	b.n	800b252 <_free_r+0x22>
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	bf00      	nop
 800b2c0:	200022b0 	.word	0x200022b0

0800b2c4 <malloc>:
 800b2c4:	4b02      	ldr	r3, [pc, #8]	@ (800b2d0 <malloc+0xc>)
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	f000 b825 	b.w	800b318 <_malloc_r>
 800b2ce:	bf00      	nop
 800b2d0:	20000108 	.word	0x20000108

0800b2d4 <sbrk_aligned>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	4e0f      	ldr	r6, [pc, #60]	@ (800b314 <sbrk_aligned+0x40>)
 800b2d8:	460c      	mov	r4, r1
 800b2da:	6831      	ldr	r1, [r6, #0]
 800b2dc:	4605      	mov	r5, r0
 800b2de:	b911      	cbnz	r1, 800b2e6 <sbrk_aligned+0x12>
 800b2e0:	f000 fea2 	bl	800c028 <_sbrk_r>
 800b2e4:	6030      	str	r0, [r6, #0]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	f000 fe9d 	bl	800c028 <_sbrk_r>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	d103      	bne.n	800b2fa <sbrk_aligned+0x26>
 800b2f2:	f04f 34ff 	mov.w	r4, #4294967295
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	bd70      	pop	{r4, r5, r6, pc}
 800b2fa:	1cc4      	adds	r4, r0, #3
 800b2fc:	f024 0403 	bic.w	r4, r4, #3
 800b300:	42a0      	cmp	r0, r4
 800b302:	d0f8      	beq.n	800b2f6 <sbrk_aligned+0x22>
 800b304:	1a21      	subs	r1, r4, r0
 800b306:	4628      	mov	r0, r5
 800b308:	f000 fe8e 	bl	800c028 <_sbrk_r>
 800b30c:	3001      	adds	r0, #1
 800b30e:	d1f2      	bne.n	800b2f6 <sbrk_aligned+0x22>
 800b310:	e7ef      	b.n	800b2f2 <sbrk_aligned+0x1e>
 800b312:	bf00      	nop
 800b314:	200022ac 	.word	0x200022ac

0800b318 <_malloc_r>:
 800b318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b31c:	1ccd      	adds	r5, r1, #3
 800b31e:	f025 0503 	bic.w	r5, r5, #3
 800b322:	3508      	adds	r5, #8
 800b324:	2d0c      	cmp	r5, #12
 800b326:	bf38      	it	cc
 800b328:	250c      	movcc	r5, #12
 800b32a:	2d00      	cmp	r5, #0
 800b32c:	4606      	mov	r6, r0
 800b32e:	db01      	blt.n	800b334 <_malloc_r+0x1c>
 800b330:	42a9      	cmp	r1, r5
 800b332:	d904      	bls.n	800b33e <_malloc_r+0x26>
 800b334:	230c      	movs	r3, #12
 800b336:	6033      	str	r3, [r6, #0]
 800b338:	2000      	movs	r0, #0
 800b33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b414 <_malloc_r+0xfc>
 800b342:	f000 f869 	bl	800b418 <__malloc_lock>
 800b346:	f8d8 3000 	ldr.w	r3, [r8]
 800b34a:	461c      	mov	r4, r3
 800b34c:	bb44      	cbnz	r4, 800b3a0 <_malloc_r+0x88>
 800b34e:	4629      	mov	r1, r5
 800b350:	4630      	mov	r0, r6
 800b352:	f7ff ffbf 	bl	800b2d4 <sbrk_aligned>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	4604      	mov	r4, r0
 800b35a:	d158      	bne.n	800b40e <_malloc_r+0xf6>
 800b35c:	f8d8 4000 	ldr.w	r4, [r8]
 800b360:	4627      	mov	r7, r4
 800b362:	2f00      	cmp	r7, #0
 800b364:	d143      	bne.n	800b3ee <_malloc_r+0xd6>
 800b366:	2c00      	cmp	r4, #0
 800b368:	d04b      	beq.n	800b402 <_malloc_r+0xea>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	4639      	mov	r1, r7
 800b36e:	4630      	mov	r0, r6
 800b370:	eb04 0903 	add.w	r9, r4, r3
 800b374:	f000 fe58 	bl	800c028 <_sbrk_r>
 800b378:	4581      	cmp	r9, r0
 800b37a:	d142      	bne.n	800b402 <_malloc_r+0xea>
 800b37c:	6821      	ldr	r1, [r4, #0]
 800b37e:	1a6d      	subs	r5, r5, r1
 800b380:	4629      	mov	r1, r5
 800b382:	4630      	mov	r0, r6
 800b384:	f7ff ffa6 	bl	800b2d4 <sbrk_aligned>
 800b388:	3001      	adds	r0, #1
 800b38a:	d03a      	beq.n	800b402 <_malloc_r+0xea>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	442b      	add	r3, r5
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	f8d8 3000 	ldr.w	r3, [r8]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	bb62      	cbnz	r2, 800b3f4 <_malloc_r+0xdc>
 800b39a:	f8c8 7000 	str.w	r7, [r8]
 800b39e:	e00f      	b.n	800b3c0 <_malloc_r+0xa8>
 800b3a0:	6822      	ldr	r2, [r4, #0]
 800b3a2:	1b52      	subs	r2, r2, r5
 800b3a4:	d420      	bmi.n	800b3e8 <_malloc_r+0xd0>
 800b3a6:	2a0b      	cmp	r2, #11
 800b3a8:	d917      	bls.n	800b3da <_malloc_r+0xc2>
 800b3aa:	1961      	adds	r1, r4, r5
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	6025      	str	r5, [r4, #0]
 800b3b0:	bf18      	it	ne
 800b3b2:	6059      	strne	r1, [r3, #4]
 800b3b4:	6863      	ldr	r3, [r4, #4]
 800b3b6:	bf08      	it	eq
 800b3b8:	f8c8 1000 	streq.w	r1, [r8]
 800b3bc:	5162      	str	r2, [r4, r5]
 800b3be:	604b      	str	r3, [r1, #4]
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f000 f82f 	bl	800b424 <__malloc_unlock>
 800b3c6:	f104 000b 	add.w	r0, r4, #11
 800b3ca:	1d23      	adds	r3, r4, #4
 800b3cc:	f020 0007 	bic.w	r0, r0, #7
 800b3d0:	1ac2      	subs	r2, r0, r3
 800b3d2:	bf1c      	itt	ne
 800b3d4:	1a1b      	subne	r3, r3, r0
 800b3d6:	50a3      	strne	r3, [r4, r2]
 800b3d8:	e7af      	b.n	800b33a <_malloc_r+0x22>
 800b3da:	6862      	ldr	r2, [r4, #4]
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	bf0c      	ite	eq
 800b3e0:	f8c8 2000 	streq.w	r2, [r8]
 800b3e4:	605a      	strne	r2, [r3, #4]
 800b3e6:	e7eb      	b.n	800b3c0 <_malloc_r+0xa8>
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	6864      	ldr	r4, [r4, #4]
 800b3ec:	e7ae      	b.n	800b34c <_malloc_r+0x34>
 800b3ee:	463c      	mov	r4, r7
 800b3f0:	687f      	ldr	r7, [r7, #4]
 800b3f2:	e7b6      	b.n	800b362 <_malloc_r+0x4a>
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	42a3      	cmp	r3, r4
 800b3fa:	d1fb      	bne.n	800b3f4 <_malloc_r+0xdc>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6053      	str	r3, [r2, #4]
 800b400:	e7de      	b.n	800b3c0 <_malloc_r+0xa8>
 800b402:	230c      	movs	r3, #12
 800b404:	6033      	str	r3, [r6, #0]
 800b406:	4630      	mov	r0, r6
 800b408:	f000 f80c 	bl	800b424 <__malloc_unlock>
 800b40c:	e794      	b.n	800b338 <_malloc_r+0x20>
 800b40e:	6005      	str	r5, [r0, #0]
 800b410:	e7d6      	b.n	800b3c0 <_malloc_r+0xa8>
 800b412:	bf00      	nop
 800b414:	200022b0 	.word	0x200022b0

0800b418 <__malloc_lock>:
 800b418:	4801      	ldr	r0, [pc, #4]	@ (800b420 <__malloc_lock+0x8>)
 800b41a:	f7ff b8ae 	b.w	800a57a <__retarget_lock_acquire_recursive>
 800b41e:	bf00      	nop
 800b420:	200022a8 	.word	0x200022a8

0800b424 <__malloc_unlock>:
 800b424:	4801      	ldr	r0, [pc, #4]	@ (800b42c <__malloc_unlock+0x8>)
 800b426:	f7ff b8a9 	b.w	800a57c <__retarget_lock_release_recursive>
 800b42a:	bf00      	nop
 800b42c:	200022a8 	.word	0x200022a8

0800b430 <_Balloc>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	69c6      	ldr	r6, [r0, #28]
 800b434:	4604      	mov	r4, r0
 800b436:	460d      	mov	r5, r1
 800b438:	b976      	cbnz	r6, 800b458 <_Balloc+0x28>
 800b43a:	2010      	movs	r0, #16
 800b43c:	f7ff ff42 	bl	800b2c4 <malloc>
 800b440:	4602      	mov	r2, r0
 800b442:	61e0      	str	r0, [r4, #28]
 800b444:	b920      	cbnz	r0, 800b450 <_Balloc+0x20>
 800b446:	4b18      	ldr	r3, [pc, #96]	@ (800b4a8 <_Balloc+0x78>)
 800b448:	4818      	ldr	r0, [pc, #96]	@ (800b4ac <_Balloc+0x7c>)
 800b44a:	216b      	movs	r1, #107	@ 0x6b
 800b44c:	f000 fe0a 	bl	800c064 <__assert_func>
 800b450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b454:	6006      	str	r6, [r0, #0]
 800b456:	60c6      	str	r6, [r0, #12]
 800b458:	69e6      	ldr	r6, [r4, #28]
 800b45a:	68f3      	ldr	r3, [r6, #12]
 800b45c:	b183      	cbz	r3, 800b480 <_Balloc+0x50>
 800b45e:	69e3      	ldr	r3, [r4, #28]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b466:	b9b8      	cbnz	r0, 800b498 <_Balloc+0x68>
 800b468:	2101      	movs	r1, #1
 800b46a:	fa01 f605 	lsl.w	r6, r1, r5
 800b46e:	1d72      	adds	r2, r6, #5
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	4620      	mov	r0, r4
 800b474:	f000 fe14 	bl	800c0a0 <_calloc_r>
 800b478:	b160      	cbz	r0, 800b494 <_Balloc+0x64>
 800b47a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b47e:	e00e      	b.n	800b49e <_Balloc+0x6e>
 800b480:	2221      	movs	r2, #33	@ 0x21
 800b482:	2104      	movs	r1, #4
 800b484:	4620      	mov	r0, r4
 800b486:	f000 fe0b 	bl	800c0a0 <_calloc_r>
 800b48a:	69e3      	ldr	r3, [r4, #28]
 800b48c:	60f0      	str	r0, [r6, #12]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e4      	bne.n	800b45e <_Balloc+0x2e>
 800b494:	2000      	movs	r0, #0
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	6802      	ldr	r2, [r0, #0]
 800b49a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4a4:	e7f7      	b.n	800b496 <_Balloc+0x66>
 800b4a6:	bf00      	nop
 800b4a8:	0800c3b1 	.word	0x0800c3b1
 800b4ac:	0800c431 	.word	0x0800c431

0800b4b0 <_Bfree>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	69c6      	ldr	r6, [r0, #28]
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	b976      	cbnz	r6, 800b4d8 <_Bfree+0x28>
 800b4ba:	2010      	movs	r0, #16
 800b4bc:	f7ff ff02 	bl	800b2c4 <malloc>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	61e8      	str	r0, [r5, #28]
 800b4c4:	b920      	cbnz	r0, 800b4d0 <_Bfree+0x20>
 800b4c6:	4b09      	ldr	r3, [pc, #36]	@ (800b4ec <_Bfree+0x3c>)
 800b4c8:	4809      	ldr	r0, [pc, #36]	@ (800b4f0 <_Bfree+0x40>)
 800b4ca:	218f      	movs	r1, #143	@ 0x8f
 800b4cc:	f000 fdca 	bl	800c064 <__assert_func>
 800b4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4d4:	6006      	str	r6, [r0, #0]
 800b4d6:	60c6      	str	r6, [r0, #12]
 800b4d8:	b13c      	cbz	r4, 800b4ea <_Bfree+0x3a>
 800b4da:	69eb      	ldr	r3, [r5, #28]
 800b4dc:	6862      	ldr	r2, [r4, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4e4:	6021      	str	r1, [r4, #0]
 800b4e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
 800b4ec:	0800c3b1 	.word	0x0800c3b1
 800b4f0:	0800c431 	.word	0x0800c431

0800b4f4 <__multadd>:
 800b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f8:	690d      	ldr	r5, [r1, #16]
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	461e      	mov	r6, r3
 800b500:	f101 0c14 	add.w	ip, r1, #20
 800b504:	2000      	movs	r0, #0
 800b506:	f8dc 3000 	ldr.w	r3, [ip]
 800b50a:	b299      	uxth	r1, r3
 800b50c:	fb02 6101 	mla	r1, r2, r1, r6
 800b510:	0c1e      	lsrs	r6, r3, #16
 800b512:	0c0b      	lsrs	r3, r1, #16
 800b514:	fb02 3306 	mla	r3, r2, r6, r3
 800b518:	b289      	uxth	r1, r1
 800b51a:	3001      	adds	r0, #1
 800b51c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b520:	4285      	cmp	r5, r0
 800b522:	f84c 1b04 	str.w	r1, [ip], #4
 800b526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b52a:	dcec      	bgt.n	800b506 <__multadd+0x12>
 800b52c:	b30e      	cbz	r6, 800b572 <__multadd+0x7e>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc19      	bgt.n	800b568 <__multadd+0x74>
 800b534:	6861      	ldr	r1, [r4, #4]
 800b536:	4638      	mov	r0, r7
 800b538:	3101      	adds	r1, #1
 800b53a:	f7ff ff79 	bl	800b430 <_Balloc>
 800b53e:	4680      	mov	r8, r0
 800b540:	b928      	cbnz	r0, 800b54e <__multadd+0x5a>
 800b542:	4602      	mov	r2, r0
 800b544:	4b0c      	ldr	r3, [pc, #48]	@ (800b578 <__multadd+0x84>)
 800b546:	480d      	ldr	r0, [pc, #52]	@ (800b57c <__multadd+0x88>)
 800b548:	21ba      	movs	r1, #186	@ 0xba
 800b54a:	f000 fd8b 	bl	800c064 <__assert_func>
 800b54e:	6922      	ldr	r2, [r4, #16]
 800b550:	3202      	adds	r2, #2
 800b552:	f104 010c 	add.w	r1, r4, #12
 800b556:	0092      	lsls	r2, r2, #2
 800b558:	300c      	adds	r0, #12
 800b55a:	f000 fd75 	bl	800c048 <memcpy>
 800b55e:	4621      	mov	r1, r4
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ffa5 	bl	800b4b0 <_Bfree>
 800b566:	4644      	mov	r4, r8
 800b568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b56c:	3501      	adds	r5, #1
 800b56e:	615e      	str	r6, [r3, #20]
 800b570:	6125      	str	r5, [r4, #16]
 800b572:	4620      	mov	r0, r4
 800b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b578:	0800c420 	.word	0x0800c420
 800b57c:	0800c431 	.word	0x0800c431

0800b580 <__hi0bits>:
 800b580:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b584:	4603      	mov	r3, r0
 800b586:	bf36      	itet	cc
 800b588:	0403      	lslcc	r3, r0, #16
 800b58a:	2000      	movcs	r0, #0
 800b58c:	2010      	movcc	r0, #16
 800b58e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b592:	bf3c      	itt	cc
 800b594:	021b      	lslcc	r3, r3, #8
 800b596:	3008      	addcc	r0, #8
 800b598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b59c:	bf3c      	itt	cc
 800b59e:	011b      	lslcc	r3, r3, #4
 800b5a0:	3004      	addcc	r0, #4
 800b5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5a6:	bf3c      	itt	cc
 800b5a8:	009b      	lslcc	r3, r3, #2
 800b5aa:	3002      	addcc	r0, #2
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	db05      	blt.n	800b5bc <__hi0bits+0x3c>
 800b5b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5b4:	f100 0001 	add.w	r0, r0, #1
 800b5b8:	bf08      	it	eq
 800b5ba:	2020      	moveq	r0, #32
 800b5bc:	4770      	bx	lr

0800b5be <__lo0bits>:
 800b5be:	6803      	ldr	r3, [r0, #0]
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	f013 0007 	ands.w	r0, r3, #7
 800b5c6:	d00b      	beq.n	800b5e0 <__lo0bits+0x22>
 800b5c8:	07d9      	lsls	r1, r3, #31
 800b5ca:	d421      	bmi.n	800b610 <__lo0bits+0x52>
 800b5cc:	0798      	lsls	r0, r3, #30
 800b5ce:	bf49      	itett	mi
 800b5d0:	085b      	lsrmi	r3, r3, #1
 800b5d2:	089b      	lsrpl	r3, r3, #2
 800b5d4:	2001      	movmi	r0, #1
 800b5d6:	6013      	strmi	r3, [r2, #0]
 800b5d8:	bf5c      	itt	pl
 800b5da:	6013      	strpl	r3, [r2, #0]
 800b5dc:	2002      	movpl	r0, #2
 800b5de:	4770      	bx	lr
 800b5e0:	b299      	uxth	r1, r3
 800b5e2:	b909      	cbnz	r1, 800b5e8 <__lo0bits+0x2a>
 800b5e4:	0c1b      	lsrs	r3, r3, #16
 800b5e6:	2010      	movs	r0, #16
 800b5e8:	b2d9      	uxtb	r1, r3
 800b5ea:	b909      	cbnz	r1, 800b5f0 <__lo0bits+0x32>
 800b5ec:	3008      	adds	r0, #8
 800b5ee:	0a1b      	lsrs	r3, r3, #8
 800b5f0:	0719      	lsls	r1, r3, #28
 800b5f2:	bf04      	itt	eq
 800b5f4:	091b      	lsreq	r3, r3, #4
 800b5f6:	3004      	addeq	r0, #4
 800b5f8:	0799      	lsls	r1, r3, #30
 800b5fa:	bf04      	itt	eq
 800b5fc:	089b      	lsreq	r3, r3, #2
 800b5fe:	3002      	addeq	r0, #2
 800b600:	07d9      	lsls	r1, r3, #31
 800b602:	d403      	bmi.n	800b60c <__lo0bits+0x4e>
 800b604:	085b      	lsrs	r3, r3, #1
 800b606:	f100 0001 	add.w	r0, r0, #1
 800b60a:	d003      	beq.n	800b614 <__lo0bits+0x56>
 800b60c:	6013      	str	r3, [r2, #0]
 800b60e:	4770      	bx	lr
 800b610:	2000      	movs	r0, #0
 800b612:	4770      	bx	lr
 800b614:	2020      	movs	r0, #32
 800b616:	4770      	bx	lr

0800b618 <__i2b>:
 800b618:	b510      	push	{r4, lr}
 800b61a:	460c      	mov	r4, r1
 800b61c:	2101      	movs	r1, #1
 800b61e:	f7ff ff07 	bl	800b430 <_Balloc>
 800b622:	4602      	mov	r2, r0
 800b624:	b928      	cbnz	r0, 800b632 <__i2b+0x1a>
 800b626:	4b05      	ldr	r3, [pc, #20]	@ (800b63c <__i2b+0x24>)
 800b628:	4805      	ldr	r0, [pc, #20]	@ (800b640 <__i2b+0x28>)
 800b62a:	f240 1145 	movw	r1, #325	@ 0x145
 800b62e:	f000 fd19 	bl	800c064 <__assert_func>
 800b632:	2301      	movs	r3, #1
 800b634:	6144      	str	r4, [r0, #20]
 800b636:	6103      	str	r3, [r0, #16]
 800b638:	bd10      	pop	{r4, pc}
 800b63a:	bf00      	nop
 800b63c:	0800c420 	.word	0x0800c420
 800b640:	0800c431 	.word	0x0800c431

0800b644 <__multiply>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	4617      	mov	r7, r2
 800b64a:	690a      	ldr	r2, [r1, #16]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	bfa8      	it	ge
 800b652:	463b      	movge	r3, r7
 800b654:	4689      	mov	r9, r1
 800b656:	bfa4      	itt	ge
 800b658:	460f      	movge	r7, r1
 800b65a:	4699      	movge	r9, r3
 800b65c:	693d      	ldr	r5, [r7, #16]
 800b65e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	6879      	ldr	r1, [r7, #4]
 800b666:	eb05 060a 	add.w	r6, r5, sl
 800b66a:	42b3      	cmp	r3, r6
 800b66c:	b085      	sub	sp, #20
 800b66e:	bfb8      	it	lt
 800b670:	3101      	addlt	r1, #1
 800b672:	f7ff fedd 	bl	800b430 <_Balloc>
 800b676:	b930      	cbnz	r0, 800b686 <__multiply+0x42>
 800b678:	4602      	mov	r2, r0
 800b67a:	4b41      	ldr	r3, [pc, #260]	@ (800b780 <__multiply+0x13c>)
 800b67c:	4841      	ldr	r0, [pc, #260]	@ (800b784 <__multiply+0x140>)
 800b67e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b682:	f000 fcef 	bl	800c064 <__assert_func>
 800b686:	f100 0414 	add.w	r4, r0, #20
 800b68a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b68e:	4623      	mov	r3, r4
 800b690:	2200      	movs	r2, #0
 800b692:	4573      	cmp	r3, lr
 800b694:	d320      	bcc.n	800b6d8 <__multiply+0x94>
 800b696:	f107 0814 	add.w	r8, r7, #20
 800b69a:	f109 0114 	add.w	r1, r9, #20
 800b69e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6a6:	9302      	str	r3, [sp, #8]
 800b6a8:	1beb      	subs	r3, r5, r7
 800b6aa:	3b15      	subs	r3, #21
 800b6ac:	f023 0303 	bic.w	r3, r3, #3
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	3715      	adds	r7, #21
 800b6b4:	42bd      	cmp	r5, r7
 800b6b6:	bf38      	it	cc
 800b6b8:	2304      	movcc	r3, #4
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	9b02      	ldr	r3, [sp, #8]
 800b6be:	9103      	str	r1, [sp, #12]
 800b6c0:	428b      	cmp	r3, r1
 800b6c2:	d80c      	bhi.n	800b6de <__multiply+0x9a>
 800b6c4:	2e00      	cmp	r6, #0
 800b6c6:	dd03      	ble.n	800b6d0 <__multiply+0x8c>
 800b6c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d055      	beq.n	800b77c <__multiply+0x138>
 800b6d0:	6106      	str	r6, [r0, #16]
 800b6d2:	b005      	add	sp, #20
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d8:	f843 2b04 	str.w	r2, [r3], #4
 800b6dc:	e7d9      	b.n	800b692 <__multiply+0x4e>
 800b6de:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6e2:	f1ba 0f00 	cmp.w	sl, #0
 800b6e6:	d01f      	beq.n	800b728 <__multiply+0xe4>
 800b6e8:	46c4      	mov	ip, r8
 800b6ea:	46a1      	mov	r9, r4
 800b6ec:	2700      	movs	r7, #0
 800b6ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6f2:	f8d9 3000 	ldr.w	r3, [r9]
 800b6f6:	fa1f fb82 	uxth.w	fp, r2
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b700:	443b      	add	r3, r7
 800b702:	f8d9 7000 	ldr.w	r7, [r9]
 800b706:	0c12      	lsrs	r2, r2, #16
 800b708:	0c3f      	lsrs	r7, r7, #16
 800b70a:	fb0a 7202 	mla	r2, sl, r2, r7
 800b70e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b712:	b29b      	uxth	r3, r3
 800b714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b718:	4565      	cmp	r5, ip
 800b71a:	f849 3b04 	str.w	r3, [r9], #4
 800b71e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b722:	d8e4      	bhi.n	800b6ee <__multiply+0xaa>
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	50e7      	str	r7, [r4, r3]
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b72e:	3104      	adds	r1, #4
 800b730:	f1b9 0f00 	cmp.w	r9, #0
 800b734:	d020      	beq.n	800b778 <__multiply+0x134>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	4647      	mov	r7, r8
 800b73a:	46a4      	mov	ip, r4
 800b73c:	f04f 0a00 	mov.w	sl, #0
 800b740:	f8b7 b000 	ldrh.w	fp, [r7]
 800b744:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b748:	fb09 220b 	mla	r2, r9, fp, r2
 800b74c:	4452      	add	r2, sl
 800b74e:	b29b      	uxth	r3, r3
 800b750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b754:	f84c 3b04 	str.w	r3, [ip], #4
 800b758:	f857 3b04 	ldr.w	r3, [r7], #4
 800b75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b760:	f8bc 3000 	ldrh.w	r3, [ip]
 800b764:	fb09 330a 	mla	r3, r9, sl, r3
 800b768:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b76c:	42bd      	cmp	r5, r7
 800b76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b772:	d8e5      	bhi.n	800b740 <__multiply+0xfc>
 800b774:	9a01      	ldr	r2, [sp, #4]
 800b776:	50a3      	str	r3, [r4, r2]
 800b778:	3404      	adds	r4, #4
 800b77a:	e79f      	b.n	800b6bc <__multiply+0x78>
 800b77c:	3e01      	subs	r6, #1
 800b77e:	e7a1      	b.n	800b6c4 <__multiply+0x80>
 800b780:	0800c420 	.word	0x0800c420
 800b784:	0800c431 	.word	0x0800c431

0800b788 <__pow5mult>:
 800b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	4615      	mov	r5, r2
 800b78e:	f012 0203 	ands.w	r2, r2, #3
 800b792:	4607      	mov	r7, r0
 800b794:	460e      	mov	r6, r1
 800b796:	d007      	beq.n	800b7a8 <__pow5mult+0x20>
 800b798:	4c25      	ldr	r4, [pc, #148]	@ (800b830 <__pow5mult+0xa8>)
 800b79a:	3a01      	subs	r2, #1
 800b79c:	2300      	movs	r3, #0
 800b79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7a2:	f7ff fea7 	bl	800b4f4 <__multadd>
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	10ad      	asrs	r5, r5, #2
 800b7aa:	d03d      	beq.n	800b828 <__pow5mult+0xa0>
 800b7ac:	69fc      	ldr	r4, [r7, #28]
 800b7ae:	b97c      	cbnz	r4, 800b7d0 <__pow5mult+0x48>
 800b7b0:	2010      	movs	r0, #16
 800b7b2:	f7ff fd87 	bl	800b2c4 <malloc>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	61f8      	str	r0, [r7, #28]
 800b7ba:	b928      	cbnz	r0, 800b7c8 <__pow5mult+0x40>
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b834 <__pow5mult+0xac>)
 800b7be:	481e      	ldr	r0, [pc, #120]	@ (800b838 <__pow5mult+0xb0>)
 800b7c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7c4:	f000 fc4e 	bl	800c064 <__assert_func>
 800b7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7cc:	6004      	str	r4, [r0, #0]
 800b7ce:	60c4      	str	r4, [r0, #12]
 800b7d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7d8:	b94c      	cbnz	r4, 800b7ee <__pow5mult+0x66>
 800b7da:	f240 2171 	movw	r1, #625	@ 0x271
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff ff1a 	bl	800b618 <__i2b>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	f04f 0900 	mov.w	r9, #0
 800b7f2:	07eb      	lsls	r3, r5, #31
 800b7f4:	d50a      	bpl.n	800b80c <__pow5mult+0x84>
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	f7ff ff22 	bl	800b644 <__multiply>
 800b800:	4631      	mov	r1, r6
 800b802:	4680      	mov	r8, r0
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff fe53 	bl	800b4b0 <_Bfree>
 800b80a:	4646      	mov	r6, r8
 800b80c:	106d      	asrs	r5, r5, #1
 800b80e:	d00b      	beq.n	800b828 <__pow5mult+0xa0>
 800b810:	6820      	ldr	r0, [r4, #0]
 800b812:	b938      	cbnz	r0, 800b824 <__pow5mult+0x9c>
 800b814:	4622      	mov	r2, r4
 800b816:	4621      	mov	r1, r4
 800b818:	4638      	mov	r0, r7
 800b81a:	f7ff ff13 	bl	800b644 <__multiply>
 800b81e:	6020      	str	r0, [r4, #0]
 800b820:	f8c0 9000 	str.w	r9, [r0]
 800b824:	4604      	mov	r4, r0
 800b826:	e7e4      	b.n	800b7f2 <__pow5mult+0x6a>
 800b828:	4630      	mov	r0, r6
 800b82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b82e:	bf00      	nop
 800b830:	0800c4e4 	.word	0x0800c4e4
 800b834:	0800c3b1 	.word	0x0800c3b1
 800b838:	0800c431 	.word	0x0800c431

0800b83c <__lshift>:
 800b83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	460c      	mov	r4, r1
 800b842:	6849      	ldr	r1, [r1, #4]
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	4607      	mov	r7, r0
 800b84e:	4691      	mov	r9, r2
 800b850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b854:	f108 0601 	add.w	r6, r8, #1
 800b858:	42b3      	cmp	r3, r6
 800b85a:	db0b      	blt.n	800b874 <__lshift+0x38>
 800b85c:	4638      	mov	r0, r7
 800b85e:	f7ff fde7 	bl	800b430 <_Balloc>
 800b862:	4605      	mov	r5, r0
 800b864:	b948      	cbnz	r0, 800b87a <__lshift+0x3e>
 800b866:	4602      	mov	r2, r0
 800b868:	4b28      	ldr	r3, [pc, #160]	@ (800b90c <__lshift+0xd0>)
 800b86a:	4829      	ldr	r0, [pc, #164]	@ (800b910 <__lshift+0xd4>)
 800b86c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b870:	f000 fbf8 	bl	800c064 <__assert_func>
 800b874:	3101      	adds	r1, #1
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	e7ee      	b.n	800b858 <__lshift+0x1c>
 800b87a:	2300      	movs	r3, #0
 800b87c:	f100 0114 	add.w	r1, r0, #20
 800b880:	f100 0210 	add.w	r2, r0, #16
 800b884:	4618      	mov	r0, r3
 800b886:	4553      	cmp	r3, sl
 800b888:	db33      	blt.n	800b8f2 <__lshift+0xb6>
 800b88a:	6920      	ldr	r0, [r4, #16]
 800b88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b890:	f104 0314 	add.w	r3, r4, #20
 800b894:	f019 091f 	ands.w	r9, r9, #31
 800b898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8a0:	d02b      	beq.n	800b8fa <__lshift+0xbe>
 800b8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8a6:	468a      	mov	sl, r1
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b8b0:	4310      	orrs	r0, r2
 800b8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ba:	459c      	cmp	ip, r3
 800b8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8c0:	d8f3      	bhi.n	800b8aa <__lshift+0x6e>
 800b8c2:	ebac 0304 	sub.w	r3, ip, r4
 800b8c6:	3b15      	subs	r3, #21
 800b8c8:	f023 0303 	bic.w	r3, r3, #3
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	f104 0015 	add.w	r0, r4, #21
 800b8d2:	4560      	cmp	r0, ip
 800b8d4:	bf88      	it	hi
 800b8d6:	2304      	movhi	r3, #4
 800b8d8:	50ca      	str	r2, [r1, r3]
 800b8da:	b10a      	cbz	r2, 800b8e0 <__lshift+0xa4>
 800b8dc:	f108 0602 	add.w	r6, r8, #2
 800b8e0:	3e01      	subs	r6, #1
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	612e      	str	r6, [r5, #16]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	f7ff fde2 	bl	800b4b0 <_Bfree>
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	e7c5      	b.n	800b886 <__lshift+0x4a>
 800b8fa:	3904      	subs	r1, #4
 800b8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b900:	f841 2f04 	str.w	r2, [r1, #4]!
 800b904:	459c      	cmp	ip, r3
 800b906:	d8f9      	bhi.n	800b8fc <__lshift+0xc0>
 800b908:	e7ea      	b.n	800b8e0 <__lshift+0xa4>
 800b90a:	bf00      	nop
 800b90c:	0800c420 	.word	0x0800c420
 800b910:	0800c431 	.word	0x0800c431

0800b914 <__mcmp>:
 800b914:	690a      	ldr	r2, [r1, #16]
 800b916:	4603      	mov	r3, r0
 800b918:	6900      	ldr	r0, [r0, #16]
 800b91a:	1a80      	subs	r0, r0, r2
 800b91c:	b530      	push	{r4, r5, lr}
 800b91e:	d10e      	bne.n	800b93e <__mcmp+0x2a>
 800b920:	3314      	adds	r3, #20
 800b922:	3114      	adds	r1, #20
 800b924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b934:	4295      	cmp	r5, r2
 800b936:	d003      	beq.n	800b940 <__mcmp+0x2c>
 800b938:	d205      	bcs.n	800b946 <__mcmp+0x32>
 800b93a:	f04f 30ff 	mov.w	r0, #4294967295
 800b93e:	bd30      	pop	{r4, r5, pc}
 800b940:	42a3      	cmp	r3, r4
 800b942:	d3f3      	bcc.n	800b92c <__mcmp+0x18>
 800b944:	e7fb      	b.n	800b93e <__mcmp+0x2a>
 800b946:	2001      	movs	r0, #1
 800b948:	e7f9      	b.n	800b93e <__mcmp+0x2a>
	...

0800b94c <__mdiff>:
 800b94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	4689      	mov	r9, r1
 800b952:	4606      	mov	r6, r0
 800b954:	4611      	mov	r1, r2
 800b956:	4648      	mov	r0, r9
 800b958:	4614      	mov	r4, r2
 800b95a:	f7ff ffdb 	bl	800b914 <__mcmp>
 800b95e:	1e05      	subs	r5, r0, #0
 800b960:	d112      	bne.n	800b988 <__mdiff+0x3c>
 800b962:	4629      	mov	r1, r5
 800b964:	4630      	mov	r0, r6
 800b966:	f7ff fd63 	bl	800b430 <_Balloc>
 800b96a:	4602      	mov	r2, r0
 800b96c:	b928      	cbnz	r0, 800b97a <__mdiff+0x2e>
 800b96e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba6c <__mdiff+0x120>)
 800b970:	f240 2137 	movw	r1, #567	@ 0x237
 800b974:	483e      	ldr	r0, [pc, #248]	@ (800ba70 <__mdiff+0x124>)
 800b976:	f000 fb75 	bl	800c064 <__assert_func>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b980:	4610      	mov	r0, r2
 800b982:	b003      	add	sp, #12
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	bfbc      	itt	lt
 800b98a:	464b      	movlt	r3, r9
 800b98c:	46a1      	movlt	r9, r4
 800b98e:	4630      	mov	r0, r6
 800b990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b994:	bfba      	itte	lt
 800b996:	461c      	movlt	r4, r3
 800b998:	2501      	movlt	r5, #1
 800b99a:	2500      	movge	r5, #0
 800b99c:	f7ff fd48 	bl	800b430 <_Balloc>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	b918      	cbnz	r0, 800b9ac <__mdiff+0x60>
 800b9a4:	4b31      	ldr	r3, [pc, #196]	@ (800ba6c <__mdiff+0x120>)
 800b9a6:	f240 2145 	movw	r1, #581	@ 0x245
 800b9aa:	e7e3      	b.n	800b974 <__mdiff+0x28>
 800b9ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9b0:	6926      	ldr	r6, [r4, #16]
 800b9b2:	60c5      	str	r5, [r0, #12]
 800b9b4:	f109 0310 	add.w	r3, r9, #16
 800b9b8:	f109 0514 	add.w	r5, r9, #20
 800b9bc:	f104 0e14 	add.w	lr, r4, #20
 800b9c0:	f100 0b14 	add.w	fp, r0, #20
 800b9c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	46d9      	mov	r9, fp
 800b9d0:	f04f 0c00 	mov.w	ip, #0
 800b9d4:	9b01      	ldr	r3, [sp, #4]
 800b9d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	fa1f f38a 	uxth.w	r3, sl
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	b283      	uxth	r3, r0
 800b9e8:	1acb      	subs	r3, r1, r3
 800b9ea:	0c00      	lsrs	r0, r0, #16
 800b9ec:	4463      	add	r3, ip
 800b9ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b9f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b9fc:	4576      	cmp	r6, lr
 800b9fe:	f849 3b04 	str.w	r3, [r9], #4
 800ba02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba06:	d8e5      	bhi.n	800b9d4 <__mdiff+0x88>
 800ba08:	1b33      	subs	r3, r6, r4
 800ba0a:	3b15      	subs	r3, #21
 800ba0c:	f023 0303 	bic.w	r3, r3, #3
 800ba10:	3415      	adds	r4, #21
 800ba12:	3304      	adds	r3, #4
 800ba14:	42a6      	cmp	r6, r4
 800ba16:	bf38      	it	cc
 800ba18:	2304      	movcc	r3, #4
 800ba1a:	441d      	add	r5, r3
 800ba1c:	445b      	add	r3, fp
 800ba1e:	461e      	mov	r6, r3
 800ba20:	462c      	mov	r4, r5
 800ba22:	4544      	cmp	r4, r8
 800ba24:	d30e      	bcc.n	800ba44 <__mdiff+0xf8>
 800ba26:	f108 0103 	add.w	r1, r8, #3
 800ba2a:	1b49      	subs	r1, r1, r5
 800ba2c:	f021 0103 	bic.w	r1, r1, #3
 800ba30:	3d03      	subs	r5, #3
 800ba32:	45a8      	cmp	r8, r5
 800ba34:	bf38      	it	cc
 800ba36:	2100      	movcc	r1, #0
 800ba38:	440b      	add	r3, r1
 800ba3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba3e:	b191      	cbz	r1, 800ba66 <__mdiff+0x11a>
 800ba40:	6117      	str	r7, [r2, #16]
 800ba42:	e79d      	b.n	800b980 <__mdiff+0x34>
 800ba44:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba48:	46e6      	mov	lr, ip
 800ba4a:	0c08      	lsrs	r0, r1, #16
 800ba4c:	fa1c fc81 	uxtah	ip, ip, r1
 800ba50:	4471      	add	r1, lr
 800ba52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba56:	b289      	uxth	r1, r1
 800ba58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba5c:	f846 1b04 	str.w	r1, [r6], #4
 800ba60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba64:	e7dd      	b.n	800ba22 <__mdiff+0xd6>
 800ba66:	3f01      	subs	r7, #1
 800ba68:	e7e7      	b.n	800ba3a <__mdiff+0xee>
 800ba6a:	bf00      	nop
 800ba6c:	0800c420 	.word	0x0800c420
 800ba70:	0800c431 	.word	0x0800c431

0800ba74 <__d2b>:
 800ba74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba78:	460f      	mov	r7, r1
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	ec59 8b10 	vmov	r8, r9, d0
 800ba80:	4616      	mov	r6, r2
 800ba82:	f7ff fcd5 	bl	800b430 <_Balloc>
 800ba86:	4604      	mov	r4, r0
 800ba88:	b930      	cbnz	r0, 800ba98 <__d2b+0x24>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	4b23      	ldr	r3, [pc, #140]	@ (800bb1c <__d2b+0xa8>)
 800ba8e:	4824      	ldr	r0, [pc, #144]	@ (800bb20 <__d2b+0xac>)
 800ba90:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba94:	f000 fae6 	bl	800c064 <__assert_func>
 800ba98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baa0:	b10d      	cbz	r5, 800baa6 <__d2b+0x32>
 800baa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	f1b8 0300 	subs.w	r3, r8, #0
 800baac:	d023      	beq.n	800baf6 <__d2b+0x82>
 800baae:	4668      	mov	r0, sp
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	f7ff fd84 	bl	800b5be <__lo0bits>
 800bab6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800baba:	b1d0      	cbz	r0, 800baf2 <__d2b+0x7e>
 800babc:	f1c0 0320 	rsb	r3, r0, #32
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
 800bac4:	430b      	orrs	r3, r1
 800bac6:	40c2      	lsrs	r2, r0
 800bac8:	6163      	str	r3, [r4, #20]
 800baca:	9201      	str	r2, [sp, #4]
 800bacc:	9b01      	ldr	r3, [sp, #4]
 800bace:	61a3      	str	r3, [r4, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bf0c      	ite	eq
 800bad4:	2201      	moveq	r2, #1
 800bad6:	2202      	movne	r2, #2
 800bad8:	6122      	str	r2, [r4, #16]
 800bada:	b1a5      	cbz	r5, 800bb06 <__d2b+0x92>
 800badc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bae0:	4405      	add	r5, r0
 800bae2:	603d      	str	r5, [r7, #0]
 800bae4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bae8:	6030      	str	r0, [r6, #0]
 800baea:	4620      	mov	r0, r4
 800baec:	b003      	add	sp, #12
 800baee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baf2:	6161      	str	r1, [r4, #20]
 800baf4:	e7ea      	b.n	800bacc <__d2b+0x58>
 800baf6:	a801      	add	r0, sp, #4
 800baf8:	f7ff fd61 	bl	800b5be <__lo0bits>
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	6163      	str	r3, [r4, #20]
 800bb00:	3020      	adds	r0, #32
 800bb02:	2201      	movs	r2, #1
 800bb04:	e7e8      	b.n	800bad8 <__d2b+0x64>
 800bb06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb0e:	6038      	str	r0, [r7, #0]
 800bb10:	6918      	ldr	r0, [r3, #16]
 800bb12:	f7ff fd35 	bl	800b580 <__hi0bits>
 800bb16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb1a:	e7e5      	b.n	800bae8 <__d2b+0x74>
 800bb1c:	0800c420 	.word	0x0800c420
 800bb20:	0800c431 	.word	0x0800c431

0800bb24 <__sfputc_r>:
 800bb24:	6893      	ldr	r3, [r2, #8]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	b410      	push	{r4}
 800bb2c:	6093      	str	r3, [r2, #8]
 800bb2e:	da08      	bge.n	800bb42 <__sfputc_r+0x1e>
 800bb30:	6994      	ldr	r4, [r2, #24]
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	db01      	blt.n	800bb3a <__sfputc_r+0x16>
 800bb36:	290a      	cmp	r1, #10
 800bb38:	d103      	bne.n	800bb42 <__sfputc_r+0x1e>
 800bb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3e:	f000 b9df 	b.w	800bf00 <__swbuf_r>
 800bb42:	6813      	ldr	r3, [r2, #0]
 800bb44:	1c58      	adds	r0, r3, #1
 800bb46:	6010      	str	r0, [r2, #0]
 800bb48:	7019      	strb	r1, [r3, #0]
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <__sfputs_r>:
 800bb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb54:	4606      	mov	r6, r0
 800bb56:	460f      	mov	r7, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	18d5      	adds	r5, r2, r3
 800bb5c:	42ac      	cmp	r4, r5
 800bb5e:	d101      	bne.n	800bb64 <__sfputs_r+0x12>
 800bb60:	2000      	movs	r0, #0
 800bb62:	e007      	b.n	800bb74 <__sfputs_r+0x22>
 800bb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb68:	463a      	mov	r2, r7
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7ff ffda 	bl	800bb24 <__sfputc_r>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d1f3      	bne.n	800bb5c <__sfputs_r+0xa>
 800bb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb78 <_vfiprintf_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	b09d      	sub	sp, #116	@ 0x74
 800bb80:	4614      	mov	r4, r2
 800bb82:	4698      	mov	r8, r3
 800bb84:	4606      	mov	r6, r0
 800bb86:	b118      	cbz	r0, 800bb90 <_vfiprintf_r+0x18>
 800bb88:	6a03      	ldr	r3, [r0, #32]
 800bb8a:	b90b      	cbnz	r3, 800bb90 <_vfiprintf_r+0x18>
 800bb8c:	f7fe fbec 	bl	800a368 <__sinit>
 800bb90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb92:	07d9      	lsls	r1, r3, #31
 800bb94:	d405      	bmi.n	800bba2 <_vfiprintf_r+0x2a>
 800bb96:	89ab      	ldrh	r3, [r5, #12]
 800bb98:	059a      	lsls	r2, r3, #22
 800bb9a:	d402      	bmi.n	800bba2 <_vfiprintf_r+0x2a>
 800bb9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb9e:	f7fe fcec 	bl	800a57a <__retarget_lock_acquire_recursive>
 800bba2:	89ab      	ldrh	r3, [r5, #12]
 800bba4:	071b      	lsls	r3, r3, #28
 800bba6:	d501      	bpl.n	800bbac <_vfiprintf_r+0x34>
 800bba8:	692b      	ldr	r3, [r5, #16]
 800bbaa:	b99b      	cbnz	r3, 800bbd4 <_vfiprintf_r+0x5c>
 800bbac:	4629      	mov	r1, r5
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f000 f9e4 	bl	800bf7c <__swsetup_r>
 800bbb4:	b170      	cbz	r0, 800bbd4 <_vfiprintf_r+0x5c>
 800bbb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb8:	07dc      	lsls	r4, r3, #31
 800bbba:	d504      	bpl.n	800bbc6 <_vfiprintf_r+0x4e>
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	b01d      	add	sp, #116	@ 0x74
 800bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	0598      	lsls	r0, r3, #22
 800bbca:	d4f7      	bmi.n	800bbbc <_vfiprintf_r+0x44>
 800bbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbce:	f7fe fcd5 	bl	800a57c <__retarget_lock_release_recursive>
 800bbd2:	e7f3      	b.n	800bbbc <_vfiprintf_r+0x44>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd8:	2320      	movs	r3, #32
 800bbda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbde:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe2:	2330      	movs	r3, #48	@ 0x30
 800bbe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd94 <_vfiprintf_r+0x21c>
 800bbe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbec:	f04f 0901 	mov.w	r9, #1
 800bbf0:	4623      	mov	r3, r4
 800bbf2:	469a      	mov	sl, r3
 800bbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf8:	b10a      	cbz	r2, 800bbfe <_vfiprintf_r+0x86>
 800bbfa:	2a25      	cmp	r2, #37	@ 0x25
 800bbfc:	d1f9      	bne.n	800bbf2 <_vfiprintf_r+0x7a>
 800bbfe:	ebba 0b04 	subs.w	fp, sl, r4
 800bc02:	d00b      	beq.n	800bc1c <_vfiprintf_r+0xa4>
 800bc04:	465b      	mov	r3, fp
 800bc06:	4622      	mov	r2, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7ff ffa1 	bl	800bb52 <__sfputs_r>
 800bc10:	3001      	adds	r0, #1
 800bc12:	f000 80a7 	beq.w	800bd64 <_vfiprintf_r+0x1ec>
 800bc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc18:	445a      	add	r2, fp
 800bc1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f000 809f 	beq.w	800bd64 <_vfiprintf_r+0x1ec>
 800bc26:	2300      	movs	r3, #0
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc30:	f10a 0a01 	add.w	sl, sl, #1
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	9307      	str	r3, [sp, #28]
 800bc38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc3e:	4654      	mov	r4, sl
 800bc40:	2205      	movs	r2, #5
 800bc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc46:	4853      	ldr	r0, [pc, #332]	@ (800bd94 <_vfiprintf_r+0x21c>)
 800bc48:	f7f4 fac2 	bl	80001d0 <memchr>
 800bc4c:	9a04      	ldr	r2, [sp, #16]
 800bc4e:	b9d8      	cbnz	r0, 800bc88 <_vfiprintf_r+0x110>
 800bc50:	06d1      	lsls	r1, r2, #27
 800bc52:	bf44      	itt	mi
 800bc54:	2320      	movmi	r3, #32
 800bc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5a:	0713      	lsls	r3, r2, #28
 800bc5c:	bf44      	itt	mi
 800bc5e:	232b      	movmi	r3, #43	@ 0x2b
 800bc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc64:	f89a 3000 	ldrb.w	r3, [sl]
 800bc68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc6a:	d015      	beq.n	800bc98 <_vfiprintf_r+0x120>
 800bc6c:	9a07      	ldr	r2, [sp, #28]
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2000      	movs	r0, #0
 800bc72:	f04f 0c0a 	mov.w	ip, #10
 800bc76:	4621      	mov	r1, r4
 800bc78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc7c:	3b30      	subs	r3, #48	@ 0x30
 800bc7e:	2b09      	cmp	r3, #9
 800bc80:	d94b      	bls.n	800bd1a <_vfiprintf_r+0x1a2>
 800bc82:	b1b0      	cbz	r0, 800bcb2 <_vfiprintf_r+0x13a>
 800bc84:	9207      	str	r2, [sp, #28]
 800bc86:	e014      	b.n	800bcb2 <_vfiprintf_r+0x13a>
 800bc88:	eba0 0308 	sub.w	r3, r0, r8
 800bc8c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc90:	4313      	orrs	r3, r2
 800bc92:	9304      	str	r3, [sp, #16]
 800bc94:	46a2      	mov	sl, r4
 800bc96:	e7d2      	b.n	800bc3e <_vfiprintf_r+0xc6>
 800bc98:	9b03      	ldr	r3, [sp, #12]
 800bc9a:	1d19      	adds	r1, r3, #4
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	9103      	str	r1, [sp, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfbb      	ittet	lt
 800bca4:	425b      	neglt	r3, r3
 800bca6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcaa:	9307      	strge	r3, [sp, #28]
 800bcac:	9307      	strlt	r3, [sp, #28]
 800bcae:	bfb8      	it	lt
 800bcb0:	9204      	strlt	r2, [sp, #16]
 800bcb2:	7823      	ldrb	r3, [r4, #0]
 800bcb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcb6:	d10a      	bne.n	800bcce <_vfiprintf_r+0x156>
 800bcb8:	7863      	ldrb	r3, [r4, #1]
 800bcba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcbc:	d132      	bne.n	800bd24 <_vfiprintf_r+0x1ac>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	1d1a      	adds	r2, r3, #4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	9203      	str	r2, [sp, #12]
 800bcc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcca:	3402      	adds	r4, #2
 800bccc:	9305      	str	r3, [sp, #20]
 800bcce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bda4 <_vfiprintf_r+0x22c>
 800bcd2:	7821      	ldrb	r1, [r4, #0]
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	f7f4 fa7a 	bl	80001d0 <memchr>
 800bcdc:	b138      	cbz	r0, 800bcee <_vfiprintf_r+0x176>
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	eba0 000a 	sub.w	r0, r0, sl
 800bce4:	2240      	movs	r2, #64	@ 0x40
 800bce6:	4082      	lsls	r2, r0
 800bce8:	4313      	orrs	r3, r2
 800bcea:	3401      	adds	r4, #1
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf2:	4829      	ldr	r0, [pc, #164]	@ (800bd98 <_vfiprintf_r+0x220>)
 800bcf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcf8:	2206      	movs	r2, #6
 800bcfa:	f7f4 fa69 	bl	80001d0 <memchr>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d03f      	beq.n	800bd82 <_vfiprintf_r+0x20a>
 800bd02:	4b26      	ldr	r3, [pc, #152]	@ (800bd9c <_vfiprintf_r+0x224>)
 800bd04:	bb1b      	cbnz	r3, 800bd4e <_vfiprintf_r+0x1d6>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	3307      	adds	r3, #7
 800bd0a:	f023 0307 	bic.w	r3, r3, #7
 800bd0e:	3308      	adds	r3, #8
 800bd10:	9303      	str	r3, [sp, #12]
 800bd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd14:	443b      	add	r3, r7
 800bd16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd18:	e76a      	b.n	800bbf0 <_vfiprintf_r+0x78>
 800bd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd1e:	460c      	mov	r4, r1
 800bd20:	2001      	movs	r0, #1
 800bd22:	e7a8      	b.n	800bc76 <_vfiprintf_r+0xfe>
 800bd24:	2300      	movs	r3, #0
 800bd26:	3401      	adds	r4, #1
 800bd28:	9305      	str	r3, [sp, #20]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f04f 0c0a 	mov.w	ip, #10
 800bd30:	4620      	mov	r0, r4
 800bd32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd36:	3a30      	subs	r2, #48	@ 0x30
 800bd38:	2a09      	cmp	r2, #9
 800bd3a:	d903      	bls.n	800bd44 <_vfiprintf_r+0x1cc>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d0c6      	beq.n	800bcce <_vfiprintf_r+0x156>
 800bd40:	9105      	str	r1, [sp, #20]
 800bd42:	e7c4      	b.n	800bcce <_vfiprintf_r+0x156>
 800bd44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd48:	4604      	mov	r4, r0
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e7f0      	b.n	800bd30 <_vfiprintf_r+0x1b8>
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	462a      	mov	r2, r5
 800bd54:	4b12      	ldr	r3, [pc, #72]	@ (800bda0 <_vfiprintf_r+0x228>)
 800bd56:	a904      	add	r1, sp, #16
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7fd fec3 	bl	8009ae4 <_printf_float>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	1c78      	adds	r0, r7, #1
 800bd62:	d1d6      	bne.n	800bd12 <_vfiprintf_r+0x19a>
 800bd64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd66:	07d9      	lsls	r1, r3, #31
 800bd68:	d405      	bmi.n	800bd76 <_vfiprintf_r+0x1fe>
 800bd6a:	89ab      	ldrh	r3, [r5, #12]
 800bd6c:	059a      	lsls	r2, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_vfiprintf_r+0x1fe>
 800bd70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd72:	f7fe fc03 	bl	800a57c <__retarget_lock_release_recursive>
 800bd76:	89ab      	ldrh	r3, [r5, #12]
 800bd78:	065b      	lsls	r3, r3, #25
 800bd7a:	f53f af1f 	bmi.w	800bbbc <_vfiprintf_r+0x44>
 800bd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd80:	e71e      	b.n	800bbc0 <_vfiprintf_r+0x48>
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	462a      	mov	r2, r5
 800bd88:	4b05      	ldr	r3, [pc, #20]	@ (800bda0 <_vfiprintf_r+0x228>)
 800bd8a:	a904      	add	r1, sp, #16
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7fe f941 	bl	800a014 <_printf_i>
 800bd92:	e7e4      	b.n	800bd5e <_vfiprintf_r+0x1e6>
 800bd94:	0800c48a 	.word	0x0800c48a
 800bd98:	0800c494 	.word	0x0800c494
 800bd9c:	08009ae5 	.word	0x08009ae5
 800bda0:	0800bb53 	.word	0x0800bb53
 800bda4:	0800c490 	.word	0x0800c490

0800bda8 <__sflush_r>:
 800bda8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb0:	0716      	lsls	r6, r2, #28
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	d454      	bmi.n	800be62 <__sflush_r+0xba>
 800bdb8:	684b      	ldr	r3, [r1, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	dc02      	bgt.n	800bdc4 <__sflush_r+0x1c>
 800bdbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	dd48      	ble.n	800be56 <__sflush_r+0xae>
 800bdc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d045      	beq.n	800be56 <__sflush_r+0xae>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdd0:	682f      	ldr	r7, [r5, #0]
 800bdd2:	6a21      	ldr	r1, [r4, #32]
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	d030      	beq.n	800be3a <__sflush_r+0x92>
 800bdd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	0759      	lsls	r1, r3, #29
 800bdde:	d505      	bpl.n	800bdec <__sflush_r+0x44>
 800bde0:	6863      	ldr	r3, [r4, #4]
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bde6:	b10b      	cbz	r3, 800bdec <__sflush_r+0x44>
 800bde8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	2300      	movs	r3, #0
 800bdee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdf0:	6a21      	ldr	r1, [r4, #32]
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b0      	blx	r6
 800bdf6:	1c43      	adds	r3, r0, #1
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	d106      	bne.n	800be0a <__sflush_r+0x62>
 800bdfc:	6829      	ldr	r1, [r5, #0]
 800bdfe:	291d      	cmp	r1, #29
 800be00:	d82b      	bhi.n	800be5a <__sflush_r+0xb2>
 800be02:	4a2a      	ldr	r2, [pc, #168]	@ (800beac <__sflush_r+0x104>)
 800be04:	40ca      	lsrs	r2, r1
 800be06:	07d6      	lsls	r6, r2, #31
 800be08:	d527      	bpl.n	800be5a <__sflush_r+0xb2>
 800be0a:	2200      	movs	r2, #0
 800be0c:	6062      	str	r2, [r4, #4]
 800be0e:	04d9      	lsls	r1, r3, #19
 800be10:	6922      	ldr	r2, [r4, #16]
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	d504      	bpl.n	800be20 <__sflush_r+0x78>
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	d101      	bne.n	800be1e <__sflush_r+0x76>
 800be1a:	682b      	ldr	r3, [r5, #0]
 800be1c:	b903      	cbnz	r3, 800be20 <__sflush_r+0x78>
 800be1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800be20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be22:	602f      	str	r7, [r5, #0]
 800be24:	b1b9      	cbz	r1, 800be56 <__sflush_r+0xae>
 800be26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be2a:	4299      	cmp	r1, r3
 800be2c:	d002      	beq.n	800be34 <__sflush_r+0x8c>
 800be2e:	4628      	mov	r0, r5
 800be30:	f7ff f9fe 	bl	800b230 <_free_r>
 800be34:	2300      	movs	r3, #0
 800be36:	6363      	str	r3, [r4, #52]	@ 0x34
 800be38:	e00d      	b.n	800be56 <__sflush_r+0xae>
 800be3a:	2301      	movs	r3, #1
 800be3c:	4628      	mov	r0, r5
 800be3e:	47b0      	blx	r6
 800be40:	4602      	mov	r2, r0
 800be42:	1c50      	adds	r0, r2, #1
 800be44:	d1c9      	bne.n	800bdda <__sflush_r+0x32>
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d0c6      	beq.n	800bdda <__sflush_r+0x32>
 800be4c:	2b1d      	cmp	r3, #29
 800be4e:	d001      	beq.n	800be54 <__sflush_r+0xac>
 800be50:	2b16      	cmp	r3, #22
 800be52:	d11e      	bne.n	800be92 <__sflush_r+0xea>
 800be54:	602f      	str	r7, [r5, #0]
 800be56:	2000      	movs	r0, #0
 800be58:	e022      	b.n	800bea0 <__sflush_r+0xf8>
 800be5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be5e:	b21b      	sxth	r3, r3
 800be60:	e01b      	b.n	800be9a <__sflush_r+0xf2>
 800be62:	690f      	ldr	r7, [r1, #16]
 800be64:	2f00      	cmp	r7, #0
 800be66:	d0f6      	beq.n	800be56 <__sflush_r+0xae>
 800be68:	0793      	lsls	r3, r2, #30
 800be6a:	680e      	ldr	r6, [r1, #0]
 800be6c:	bf08      	it	eq
 800be6e:	694b      	ldreq	r3, [r1, #20]
 800be70:	600f      	str	r7, [r1, #0]
 800be72:	bf18      	it	ne
 800be74:	2300      	movne	r3, #0
 800be76:	eba6 0807 	sub.w	r8, r6, r7
 800be7a:	608b      	str	r3, [r1, #8]
 800be7c:	f1b8 0f00 	cmp.w	r8, #0
 800be80:	dde9      	ble.n	800be56 <__sflush_r+0xae>
 800be82:	6a21      	ldr	r1, [r4, #32]
 800be84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be86:	4643      	mov	r3, r8
 800be88:	463a      	mov	r2, r7
 800be8a:	4628      	mov	r0, r5
 800be8c:	47b0      	blx	r6
 800be8e:	2800      	cmp	r0, #0
 800be90:	dc08      	bgt.n	800bea4 <__sflush_r+0xfc>
 800be92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be9a:	81a3      	strh	r3, [r4, #12]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea4:	4407      	add	r7, r0
 800bea6:	eba8 0800 	sub.w	r8, r8, r0
 800beaa:	e7e7      	b.n	800be7c <__sflush_r+0xd4>
 800beac:	20400001 	.word	0x20400001

0800beb0 <_fflush_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	690b      	ldr	r3, [r1, #16]
 800beb4:	4605      	mov	r5, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b913      	cbnz	r3, 800bec0 <_fflush_r+0x10>
 800beba:	2500      	movs	r5, #0
 800bebc:	4628      	mov	r0, r5
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	b118      	cbz	r0, 800beca <_fflush_r+0x1a>
 800bec2:	6a03      	ldr	r3, [r0, #32]
 800bec4:	b90b      	cbnz	r3, 800beca <_fflush_r+0x1a>
 800bec6:	f7fe fa4f 	bl	800a368 <__sinit>
 800beca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0f3      	beq.n	800beba <_fflush_r+0xa>
 800bed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bed4:	07d0      	lsls	r0, r2, #31
 800bed6:	d404      	bmi.n	800bee2 <_fflush_r+0x32>
 800bed8:	0599      	lsls	r1, r3, #22
 800beda:	d402      	bmi.n	800bee2 <_fflush_r+0x32>
 800bedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bede:	f7fe fb4c 	bl	800a57a <__retarget_lock_acquire_recursive>
 800bee2:	4628      	mov	r0, r5
 800bee4:	4621      	mov	r1, r4
 800bee6:	f7ff ff5f 	bl	800bda8 <__sflush_r>
 800beea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800beec:	07da      	lsls	r2, r3, #31
 800beee:	4605      	mov	r5, r0
 800bef0:	d4e4      	bmi.n	800bebc <_fflush_r+0xc>
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	059b      	lsls	r3, r3, #22
 800bef6:	d4e1      	bmi.n	800bebc <_fflush_r+0xc>
 800bef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800befa:	f7fe fb3f 	bl	800a57c <__retarget_lock_release_recursive>
 800befe:	e7dd      	b.n	800bebc <_fflush_r+0xc>

0800bf00 <__swbuf_r>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	460e      	mov	r6, r1
 800bf04:	4614      	mov	r4, r2
 800bf06:	4605      	mov	r5, r0
 800bf08:	b118      	cbz	r0, 800bf12 <__swbuf_r+0x12>
 800bf0a:	6a03      	ldr	r3, [r0, #32]
 800bf0c:	b90b      	cbnz	r3, 800bf12 <__swbuf_r+0x12>
 800bf0e:	f7fe fa2b 	bl	800a368 <__sinit>
 800bf12:	69a3      	ldr	r3, [r4, #24]
 800bf14:	60a3      	str	r3, [r4, #8]
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	071a      	lsls	r2, r3, #28
 800bf1a:	d501      	bpl.n	800bf20 <__swbuf_r+0x20>
 800bf1c:	6923      	ldr	r3, [r4, #16]
 800bf1e:	b943      	cbnz	r3, 800bf32 <__swbuf_r+0x32>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f82a 	bl	800bf7c <__swsetup_r>
 800bf28:	b118      	cbz	r0, 800bf32 <__swbuf_r+0x32>
 800bf2a:	f04f 37ff 	mov.w	r7, #4294967295
 800bf2e:	4638      	mov	r0, r7
 800bf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	6922      	ldr	r2, [r4, #16]
 800bf36:	1a98      	subs	r0, r3, r2
 800bf38:	6963      	ldr	r3, [r4, #20]
 800bf3a:	b2f6      	uxtb	r6, r6
 800bf3c:	4283      	cmp	r3, r0
 800bf3e:	4637      	mov	r7, r6
 800bf40:	dc05      	bgt.n	800bf4e <__swbuf_r+0x4e>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4628      	mov	r0, r5
 800bf46:	f7ff ffb3 	bl	800beb0 <_fflush_r>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d1ed      	bne.n	800bf2a <__swbuf_r+0x2a>
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	6022      	str	r2, [r4, #0]
 800bf5a:	701e      	strb	r6, [r3, #0]
 800bf5c:	6962      	ldr	r2, [r4, #20]
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d004      	beq.n	800bf6e <__swbuf_r+0x6e>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	07db      	lsls	r3, r3, #31
 800bf68:	d5e1      	bpl.n	800bf2e <__swbuf_r+0x2e>
 800bf6a:	2e0a      	cmp	r6, #10
 800bf6c:	d1df      	bne.n	800bf2e <__swbuf_r+0x2e>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f7ff ff9d 	bl	800beb0 <_fflush_r>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d0d9      	beq.n	800bf2e <__swbuf_r+0x2e>
 800bf7a:	e7d6      	b.n	800bf2a <__swbuf_r+0x2a>

0800bf7c <__swsetup_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4b29      	ldr	r3, [pc, #164]	@ (800c024 <__swsetup_r+0xa8>)
 800bf80:	4605      	mov	r5, r0
 800bf82:	6818      	ldr	r0, [r3, #0]
 800bf84:	460c      	mov	r4, r1
 800bf86:	b118      	cbz	r0, 800bf90 <__swsetup_r+0x14>
 800bf88:	6a03      	ldr	r3, [r0, #32]
 800bf8a:	b90b      	cbnz	r3, 800bf90 <__swsetup_r+0x14>
 800bf8c:	f7fe f9ec 	bl	800a368 <__sinit>
 800bf90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf94:	0719      	lsls	r1, r3, #28
 800bf96:	d422      	bmi.n	800bfde <__swsetup_r+0x62>
 800bf98:	06da      	lsls	r2, r3, #27
 800bf9a:	d407      	bmi.n	800bfac <__swsetup_r+0x30>
 800bf9c:	2209      	movs	r2, #9
 800bf9e:	602a      	str	r2, [r5, #0]
 800bfa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfaa:	e033      	b.n	800c014 <__swsetup_r+0x98>
 800bfac:	0758      	lsls	r0, r3, #29
 800bfae:	d512      	bpl.n	800bfd6 <__swsetup_r+0x5a>
 800bfb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfb2:	b141      	cbz	r1, 800bfc6 <__swsetup_r+0x4a>
 800bfb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	d002      	beq.n	800bfc2 <__swsetup_r+0x46>
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f7ff f937 	bl	800b230 <_free_r>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	6063      	str	r3, [r4, #4]
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	f043 0308 	orr.w	r3, r3, #8
 800bfdc:	81a3      	strh	r3, [r4, #12]
 800bfde:	6923      	ldr	r3, [r4, #16]
 800bfe0:	b94b      	cbnz	r3, 800bff6 <__swsetup_r+0x7a>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bfe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfec:	d003      	beq.n	800bff6 <__swsetup_r+0x7a>
 800bfee:	4621      	mov	r1, r4
 800bff0:	4628      	mov	r0, r5
 800bff2:	f000 f8c1 	bl	800c178 <__smakebuf_r>
 800bff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bffa:	f013 0201 	ands.w	r2, r3, #1
 800bffe:	d00a      	beq.n	800c016 <__swsetup_r+0x9a>
 800c000:	2200      	movs	r2, #0
 800c002:	60a2      	str	r2, [r4, #8]
 800c004:	6962      	ldr	r2, [r4, #20]
 800c006:	4252      	negs	r2, r2
 800c008:	61a2      	str	r2, [r4, #24]
 800c00a:	6922      	ldr	r2, [r4, #16]
 800c00c:	b942      	cbnz	r2, 800c020 <__swsetup_r+0xa4>
 800c00e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c012:	d1c5      	bne.n	800bfa0 <__swsetup_r+0x24>
 800c014:	bd38      	pop	{r3, r4, r5, pc}
 800c016:	0799      	lsls	r1, r3, #30
 800c018:	bf58      	it	pl
 800c01a:	6962      	ldrpl	r2, [r4, #20]
 800c01c:	60a2      	str	r2, [r4, #8]
 800c01e:	e7f4      	b.n	800c00a <__swsetup_r+0x8e>
 800c020:	2000      	movs	r0, #0
 800c022:	e7f7      	b.n	800c014 <__swsetup_r+0x98>
 800c024:	20000108 	.word	0x20000108

0800c028 <_sbrk_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	@ (800c044 <_sbrk_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f5 fba8 	bl	8001788 <_sbrk>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_sbrk_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_sbrk_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	200022a4 	.word	0x200022a4

0800c048 <memcpy>:
 800c048:	440a      	add	r2, r1
 800c04a:	4291      	cmp	r1, r2
 800c04c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c050:	d100      	bne.n	800c054 <memcpy+0xc>
 800c052:	4770      	bx	lr
 800c054:	b510      	push	{r4, lr}
 800c056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c05a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c05e:	4291      	cmp	r1, r2
 800c060:	d1f9      	bne.n	800c056 <memcpy+0xe>
 800c062:	bd10      	pop	{r4, pc}

0800c064 <__assert_func>:
 800c064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c066:	4614      	mov	r4, r2
 800c068:	461a      	mov	r2, r3
 800c06a:	4b09      	ldr	r3, [pc, #36]	@ (800c090 <__assert_func+0x2c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4605      	mov	r5, r0
 800c070:	68d8      	ldr	r0, [r3, #12]
 800c072:	b14c      	cbz	r4, 800c088 <__assert_func+0x24>
 800c074:	4b07      	ldr	r3, [pc, #28]	@ (800c094 <__assert_func+0x30>)
 800c076:	9100      	str	r1, [sp, #0]
 800c078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c07c:	4906      	ldr	r1, [pc, #24]	@ (800c098 <__assert_func+0x34>)
 800c07e:	462b      	mov	r3, r5
 800c080:	f000 f842 	bl	800c108 <fiprintf>
 800c084:	f000 f8d6 	bl	800c234 <abort>
 800c088:	4b04      	ldr	r3, [pc, #16]	@ (800c09c <__assert_func+0x38>)
 800c08a:	461c      	mov	r4, r3
 800c08c:	e7f3      	b.n	800c076 <__assert_func+0x12>
 800c08e:	bf00      	nop
 800c090:	20000108 	.word	0x20000108
 800c094:	0800c4a5 	.word	0x0800c4a5
 800c098:	0800c4b2 	.word	0x0800c4b2
 800c09c:	0800c4e0 	.word	0x0800c4e0

0800c0a0 <_calloc_r>:
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	fba1 5402 	umull	r5, r4, r1, r2
 800c0a6:	b934      	cbnz	r4, 800c0b6 <_calloc_r+0x16>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	f7ff f935 	bl	800b318 <_malloc_r>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	b928      	cbnz	r0, 800c0be <_calloc_r+0x1e>
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	220c      	movs	r2, #12
 800c0b8:	6002      	str	r2, [r0, #0]
 800c0ba:	2600      	movs	r6, #0
 800c0bc:	e7f9      	b.n	800c0b2 <_calloc_r+0x12>
 800c0be:	462a      	mov	r2, r5
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	f7fe f9dc 	bl	800a47e <memset>
 800c0c6:	e7f4      	b.n	800c0b2 <_calloc_r+0x12>

0800c0c8 <__ascii_mbtowc>:
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	b901      	cbnz	r1, 800c0ce <__ascii_mbtowc+0x6>
 800c0cc:	a901      	add	r1, sp, #4
 800c0ce:	b142      	cbz	r2, 800c0e2 <__ascii_mbtowc+0x1a>
 800c0d0:	b14b      	cbz	r3, 800c0e6 <__ascii_mbtowc+0x1e>
 800c0d2:	7813      	ldrb	r3, [r2, #0]
 800c0d4:	600b      	str	r3, [r1, #0]
 800c0d6:	7812      	ldrb	r2, [r2, #0]
 800c0d8:	1e10      	subs	r0, r2, #0
 800c0da:	bf18      	it	ne
 800c0dc:	2001      	movne	r0, #1
 800c0de:	b002      	add	sp, #8
 800c0e0:	4770      	bx	lr
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	e7fb      	b.n	800c0de <__ascii_mbtowc+0x16>
 800c0e6:	f06f 0001 	mvn.w	r0, #1
 800c0ea:	e7f8      	b.n	800c0de <__ascii_mbtowc+0x16>

0800c0ec <__ascii_wctomb>:
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	b141      	cbz	r1, 800c104 <__ascii_wctomb+0x18>
 800c0f2:	2aff      	cmp	r2, #255	@ 0xff
 800c0f4:	d904      	bls.n	800c100 <__ascii_wctomb+0x14>
 800c0f6:	228a      	movs	r2, #138	@ 0x8a
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fe:	4770      	bx	lr
 800c100:	700a      	strb	r2, [r1, #0]
 800c102:	2001      	movs	r0, #1
 800c104:	4770      	bx	lr
	...

0800c108 <fiprintf>:
 800c108:	b40e      	push	{r1, r2, r3}
 800c10a:	b503      	push	{r0, r1, lr}
 800c10c:	4601      	mov	r1, r0
 800c10e:	ab03      	add	r3, sp, #12
 800c110:	4805      	ldr	r0, [pc, #20]	@ (800c128 <fiprintf+0x20>)
 800c112:	f853 2b04 	ldr.w	r2, [r3], #4
 800c116:	6800      	ldr	r0, [r0, #0]
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	f7ff fd2d 	bl	800bb78 <_vfiprintf_r>
 800c11e:	b002      	add	sp, #8
 800c120:	f85d eb04 	ldr.w	lr, [sp], #4
 800c124:	b003      	add	sp, #12
 800c126:	4770      	bx	lr
 800c128:	20000108 	.word	0x20000108

0800c12c <__swhatbuf_r>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	460c      	mov	r4, r1
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	2900      	cmp	r1, #0
 800c136:	b096      	sub	sp, #88	@ 0x58
 800c138:	4615      	mov	r5, r2
 800c13a:	461e      	mov	r6, r3
 800c13c:	da0d      	bge.n	800c15a <__swhatbuf_r+0x2e>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c144:	f04f 0100 	mov.w	r1, #0
 800c148:	bf14      	ite	ne
 800c14a:	2340      	movne	r3, #64	@ 0x40
 800c14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c150:	2000      	movs	r0, #0
 800c152:	6031      	str	r1, [r6, #0]
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	b016      	add	sp, #88	@ 0x58
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	466a      	mov	r2, sp
 800c15c:	f000 f848 	bl	800c1f0 <_fstat_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	dbec      	blt.n	800c13e <__swhatbuf_r+0x12>
 800c164:	9901      	ldr	r1, [sp, #4]
 800c166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c16e:	4259      	negs	r1, r3
 800c170:	4159      	adcs	r1, r3
 800c172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c176:	e7eb      	b.n	800c150 <__swhatbuf_r+0x24>

0800c178 <__smakebuf_r>:
 800c178:	898b      	ldrh	r3, [r1, #12]
 800c17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c17c:	079d      	lsls	r5, r3, #30
 800c17e:	4606      	mov	r6, r0
 800c180:	460c      	mov	r4, r1
 800c182:	d507      	bpl.n	800c194 <__smakebuf_r+0x1c>
 800c184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	2301      	movs	r3, #1
 800c18e:	6163      	str	r3, [r4, #20]
 800c190:	b003      	add	sp, #12
 800c192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c194:	ab01      	add	r3, sp, #4
 800c196:	466a      	mov	r2, sp
 800c198:	f7ff ffc8 	bl	800c12c <__swhatbuf_r>
 800c19c:	9f00      	ldr	r7, [sp, #0]
 800c19e:	4605      	mov	r5, r0
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7ff f8b8 	bl	800b318 <_malloc_r>
 800c1a8:	b948      	cbnz	r0, 800c1be <__smakebuf_r+0x46>
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	059a      	lsls	r2, r3, #22
 800c1b0:	d4ee      	bmi.n	800c190 <__smakebuf_r+0x18>
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	f043 0302 	orr.w	r3, r3, #2
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	e7e2      	b.n	800c184 <__smakebuf_r+0xc>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	6020      	str	r0, [r4, #0]
 800c1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ce:	b15b      	cbz	r3, 800c1e8 <__smakebuf_r+0x70>
 800c1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 f81d 	bl	800c214 <_isatty_r>
 800c1da:	b128      	cbz	r0, 800c1e8 <__smakebuf_r+0x70>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f023 0303 	bic.w	r3, r3, #3
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	431d      	orrs	r5, r3
 800c1ec:	81a5      	strh	r5, [r4, #12]
 800c1ee:	e7cf      	b.n	800c190 <__smakebuf_r+0x18>

0800c1f0 <_fstat_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	@ (800c210 <_fstat_r+0x20>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f5 fa83 	bl	8001708 <_fstat>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_fstat_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_fstat_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	200022a4 	.word	0x200022a4

0800c214 <_isatty_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d06      	ldr	r5, [pc, #24]	@ (800c230 <_isatty_r+0x1c>)
 800c218:	2300      	movs	r3, #0
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	f7f5 fa82 	bl	8001728 <_isatty>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_isatty_r+0x1a>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_isatty_r+0x1a>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	200022a4 	.word	0x200022a4

0800c234 <abort>:
 800c234:	b508      	push	{r3, lr}
 800c236:	2006      	movs	r0, #6
 800c238:	f000 f82c 	bl	800c294 <raise>
 800c23c:	2001      	movs	r0, #1
 800c23e:	f7f5 fa2f 	bl	80016a0 <_exit>

0800c242 <_raise_r>:
 800c242:	291f      	cmp	r1, #31
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4605      	mov	r5, r0
 800c248:	460c      	mov	r4, r1
 800c24a:	d904      	bls.n	800c256 <_raise_r+0x14>
 800c24c:	2316      	movs	r3, #22
 800c24e:	6003      	str	r3, [r0, #0]
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	bd38      	pop	{r3, r4, r5, pc}
 800c256:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c258:	b112      	cbz	r2, 800c260 <_raise_r+0x1e>
 800c25a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c25e:	b94b      	cbnz	r3, 800c274 <_raise_r+0x32>
 800c260:	4628      	mov	r0, r5
 800c262:	f000 f831 	bl	800c2c8 <_getpid_r>
 800c266:	4622      	mov	r2, r4
 800c268:	4601      	mov	r1, r0
 800c26a:	4628      	mov	r0, r5
 800c26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c270:	f000 b818 	b.w	800c2a4 <_kill_r>
 800c274:	2b01      	cmp	r3, #1
 800c276:	d00a      	beq.n	800c28e <_raise_r+0x4c>
 800c278:	1c59      	adds	r1, r3, #1
 800c27a:	d103      	bne.n	800c284 <_raise_r+0x42>
 800c27c:	2316      	movs	r3, #22
 800c27e:	6003      	str	r3, [r0, #0]
 800c280:	2001      	movs	r0, #1
 800c282:	e7e7      	b.n	800c254 <_raise_r+0x12>
 800c284:	2100      	movs	r1, #0
 800c286:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c28a:	4620      	mov	r0, r4
 800c28c:	4798      	blx	r3
 800c28e:	2000      	movs	r0, #0
 800c290:	e7e0      	b.n	800c254 <_raise_r+0x12>
	...

0800c294 <raise>:
 800c294:	4b02      	ldr	r3, [pc, #8]	@ (800c2a0 <raise+0xc>)
 800c296:	4601      	mov	r1, r0
 800c298:	6818      	ldr	r0, [r3, #0]
 800c29a:	f7ff bfd2 	b.w	800c242 <_raise_r>
 800c29e:	bf00      	nop
 800c2a0:	20000108 	.word	0x20000108

0800c2a4 <_kill_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	@ (800c2c4 <_kill_r+0x20>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	602b      	str	r3, [r5, #0]
 800c2b2:	f7f5 f9e5 	bl	8001680 <_kill>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	d102      	bne.n	800c2c0 <_kill_r+0x1c>
 800c2ba:	682b      	ldr	r3, [r5, #0]
 800c2bc:	b103      	cbz	r3, 800c2c0 <_kill_r+0x1c>
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	bd38      	pop	{r3, r4, r5, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200022a4 	.word	0x200022a4

0800c2c8 <_getpid_r>:
 800c2c8:	f7f5 b9d2 	b.w	8001670 <_getpid>

0800c2cc <_init>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	bf00      	nop
 800c2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d2:	bc08      	pop	{r3}
 800c2d4:	469e      	mov	lr, r3
 800c2d6:	4770      	bx	lr

0800c2d8 <_fini>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	bf00      	nop
 800c2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2de:	bc08      	pop	{r3}
 800c2e0:	469e      	mov	lr, r3
 800c2e2:	4770      	bx	lr
