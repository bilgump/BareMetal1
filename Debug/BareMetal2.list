
BareMetal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800cf00  0800cf00  0000df00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2e4  0800d2e4  0000f2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d2e4  0800d2e4  0000e2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2ec  0800d2ec  0000f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2ec  0800d2ec  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2f0  0800d2f0  0000e2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800d2f4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2d0  2**0
                  CONTENTS
 10 .bss          00002060  200002d0  200002d0  0000f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002330  20002330  0000f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019af0  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004865  00000000  00000000  00028df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0002d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d3  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027393  00000000  00000000  0002ffb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eaee  00000000  00000000  00057346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc50  00000000  00000000  00075e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153a84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000700c  00000000  00000000  00153ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0015aad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cee4 	.word	0x0800cee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800cee4 	.word	0x0800cee4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <enterStop>:
}state_te;

static state_te st = ST_RUN;

static void enterStop(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2); 	//Pause LED timer
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <enterStop+0x28>)
 8000eda:	f004 fee5 	bl	8005ca8 <HAL_TIM_Base_Stop_IT>
	HAL_SuspendTick();				//stop SysTick so it won't wake us
 8000ede:	f000 ffcb 	bl	8001e78 <HAL_SuspendTick>

	//Enter STOP with main regulator ON, wake on any EXTI
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f003 fbad 	bl	8004644 <HAL_PWR_EnterSTOPMode>

	//MCU Wakes here
	SystemClock_Config();	//Re-enable PLLS
 8000eea:	f000 f947 	bl	800117c <SystemClock_Config>
	HAL_ResumeTick();
 8000eee:	f000 ffd3 	bl	8001e98 <HAL_ResumeTick>
	HAL_TIM_Base_Start_IT(&htim2);
 8000ef2:	4802      	ldr	r0, [pc, #8]	@ (8000efc <enterStop+0x28>)
 8000ef4:	f004 fe68 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
	//st = ST_RUN;
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000428 	.word	0x20000428

08000f00 <fsmEventButton>:

void fsmEventButton(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	st = (st == ST_RUN) ? ST_STOP : ST_RUN;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <fsmEventButton+0x24>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <fsmEventButton+0x24>)
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200002ec 	.word	0x200002ec

08000f28 <fsmRun>:

void fsmRun(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	if(st == ST_STOP){
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <fsmRun+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d104      	bne.n	8000f3e <fsmRun+0x16>
		st = ST_RUN; //Sleep once per press
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <fsmRun+0x1c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
		enterStop();
 8000f3a:	f7ff ffcb 	bl	8000ed4 <enterStop>
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002ec 	.word	0x200002ec

08000f48 <schedulerAdd>:

static sched_task_t *tasks[MAX_TASKS];
static uint8_t count = 0;

void schedulerAdd(sched_task_t *task)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(count < MAX_TASKS)
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <schedulerAdd+0x34>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d80a      	bhi.n	8000f6e <schedulerAdd+0x26>
		tasks[count++] = task;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <schedulerAdd+0x34>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	b2d1      	uxtb	r1, r2
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <schedulerAdd+0x34>)
 8000f62:	7011      	strb	r1, [r2, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <schedulerAdd+0x38>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000310 	.word	0x20000310
 8000f80:	200002f0 	.word	0x200002f0

08000f84 <schedulerRun>:

void schedulerRun(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8000f8a:	f000 ff45 	bl	8001e18 <HAL_GetTick>
 8000f8e:	6038      	str	r0, [r7, #0]

	for(uint8_t i = 0; i < count; ++i){
 8000f90:	2300      	movs	r3, #0
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	e01c      	b.n	8000fd0 <schedulerRun+0x4c>
		if((now - tasks[i]->lastMS) >= tasks[i]->periodMS){
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <schedulerRun+0x60>)
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	1ad2      	subs	r2, r2, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	490f      	ldr	r1, [pc, #60]	@ (8000fe4 <schedulerRun+0x60>)
 8000fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d30b      	bcc.n	8000fca <schedulerRun+0x46>
			tasks[i]->lastMS = now;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <schedulerRun+0x60>)
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
			tasks[i]->cb();
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <schedulerRun+0x60>)
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4798      	blx	r3
	for(uint8_t i = 0; i < count; ++i){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <schedulerRun+0x64>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3dd      	bcc.n	8000f96 <schedulerRun+0x12>
		}
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002f0 	.word	0x200002f0
 8000fe8:	20000310 	.word	0x20000310

08000fec <flashCB>:
#include "scheduler.h"

static uint8_t buf[16] = {0};

static void flashCB(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
	static bool once = false;
	uint8_t counter = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
	if(!once){
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <flashCB+0x6c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d01f      	beq.n	8001044 <flashCB+0x58>
		uint8_t msg[] = "HelloFlash!";
 8001004:	4a15      	ldr	r2, [pc, #84]	@ (800105c <flashCB+0x70>)
 8001006:	463b      	mov	r3, r7
 8001008:	ca07      	ldmia	r2, {r0, r1, r2}
 800100a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(W25Q16_Erase4K(0))
 800100e:	2000      	movs	r0, #0
 8001010:	f000 fe60 	bl	8001cd4 <W25Q16_Erase4K>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <flashCB+0x34>
			counter++;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
		if(W25Q16_PageProgram(0, msg, sizeof msg))
 8001020:	463b      	mov	r3, r7
 8001022:	220c      	movs	r2, #12
 8001024:	4619      	mov	r1, r3
 8001026:	2000      	movs	r0, #0
 8001028:	f000 fe02 	bl	8001c30 <W25Q16_PageProgram>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <flashCB+0x4c>
			counter++;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3301      	adds	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
		if(counter == 2)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d102      	bne.n	8001044 <flashCB+0x58>
			once = true;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <flashCB+0x6c>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
	}
	W25Q16_Read(0, buf, sizeof buf);
 8001044:	2210      	movs	r2, #16
 8001046:	4906      	ldr	r1, [pc, #24]	@ (8001060 <flashCB+0x74>)
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fdaf 	bl	8001bac <W25Q16_Read>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000324 	.word	0x20000324
 800105c:	0800cf00 	.word	0x0800cf00
 8001060:	20000314 	.word	0x20000314

08001064 <task_flash_init>:

void task_flash_init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	static sched_task_t t = {.periodMS = 2000, .cb = flashCB};
	schedulerAdd(&t);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <task_flash_init+0x10>)
 800106a:	f7ff ff6d 	bl	8000f48 <schedulerAdd>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000

08001078 <blinkCB>:
#include "main.h"
#include "task_blink.h"
#include "scheduler.h"

void blinkCB(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_1_Pin);
 800107c:	2140      	movs	r1, #64	@ 0x40
 800107e:	4802      	ldr	r0, [pc, #8]	@ (8001088 <blinkCB+0x10>)
 8001080:	f002 f85b 	bl	800313a <HAL_GPIO_TogglePin>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020000 	.word	0x40020000

0800108c <tempCB>:
{
    printf("T = %.1f °C\r\n", temperature);
}

void tempCB(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < sizeof(adcBuf) / 2; ++i)
 8001096:	2300      	movs	r3, #0
 8001098:	74fb      	strb	r3, [r7, #19]
 800109a:	e00a      	b.n	80010b2 <tempCB+0x26>
		sum += adcBuf[i];
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <tempCB+0x84>)
 80010a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a4:	461a      	mov	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < sizeof(adcBuf) / 2; ++i)
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	3301      	adds	r3, #1
 80010b0:	74fb      	strb	r3, [r7, #19]
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b6:	d9f1      	bls.n	800109c <tempCB+0x10>
	uint16_t avg = sum / sizeof(adcBuf) / 2;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	823b      	strh	r3, [r7, #16]

	/* Convert to °C  (datasheet formula) */
	float V25 = 0.76f;          // V at 25 °C
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <tempCB+0x88>)
 80010c0:	60fb      	str	r3, [r7, #12]
	float AvgSlope = 0.0025f;   // V/°C
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <tempCB+0x8c>)
 80010c4:	60bb      	str	r3, [r7, #8]
	float Vsense = (avg * 3.3f) / 4095.0f;
 80010c6:	8a3b      	ldrh	r3, [r7, #16]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800111c <tempCB+0x90>
 80010d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010d8:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001120 <tempCB+0x94>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	edc7 7a01 	vstr	s15, [r7, #4]
	float vTemp  = ((V25 - Vsense) / AvgSlope) + 25.0f;
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80010f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80010fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001100:	edc7 7a00 	vstr	s15, [r7]
	//printf("Temperature = %1.f C\r\n", vTemp);
	/* Set a watch-expression on tempC in debugger */
}
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000470 	.word	0x20000470
 8001114:	3f428f5c 	.word	0x3f428f5c
 8001118:	3b23d70a 	.word	0x3b23d70a
 800111c:	40533333 	.word	0x40533333
 8001120:	457ff000 	.word	0x457ff000

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f000 fe10 	bl	8001d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f826 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 f984 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 8001134:	f000 f962 	bl	80013fc <MX_DMA_Init>
  MX_TIM2_Init();
 8001138:	f000 f912 	bl	8001360 <MX_TIM2_Init>
  MX_ADC1_Init();
 800113c:	f000 f888 	bl	8001250 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001140:	f008 fcce 	bl	8009ae0 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // keep /CS high
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <main+0x4c>)
 800114a:	f001 ffdd 	bl	8003108 <HAL_GPIO_WritePin>
  MX_SPI1_Init();
 800114e:	f000 f8d1 	bl	80012f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001152:	4808      	ldr	r0, [pc, #32]	@ (8001174 <main+0x50>)
 8001154:	f004 fd38 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, sizeof(adcBuf) / 2);
	W25Q16_Init(&hspi1);                                  // flash present? → true
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <main+0x54>)
 800115a:	f000 fccd 	bl	8001af8 <W25Q16_Init>
	task_flash_init();
 800115e:	f7ff ff81 	bl	8001064 <task_flash_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		schedulerRun();
 8001162:	f7ff ff0f 	bl	8000f84 <schedulerRun>
		fsmRun();
 8001166:	f7ff fedf 	bl	8000f28 <fsmRun>
		__WFI();                    // Wait-For-Interrupt (optional)
 800116a:	bf30      	wfi
		schedulerRun();
 800116c:	bf00      	nop
 800116e:	e7f8      	b.n	8001162 <main+0x3e>
 8001170:	40020400 	.word	0x40020400
 8001174:	20000428 	.word	0x20000428
 8001178:	200003d0 	.word	0x200003d0

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	@ 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f009 ff81 	bl	800b092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <SystemClock_Config+0xcc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a27      	ldr	r2, [pc, #156]	@ (8001248 <SystemClock_Config+0xcc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <SystemClock_Config+0xd0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a21      	ldr	r2, [pc, #132]	@ (800124c <SystemClock_Config+0xd0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ec:	2308      	movs	r3, #8
 80011ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011fa:	2307      	movs	r3, #7
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fa4e 	bl	80046a4 <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800120e:	f000 f9db 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2302      	movs	r3, #2
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001228:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2105      	movs	r1, #5
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fcaf 	bl	8004b94 <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800123c:	f000 f9c4 	bl	80015c8 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	@ 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001264:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <MX_ADC1_Init+0x9c>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800126a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800126e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800127e:	2201      	movs	r2, #1
 8001280:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001292:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <MX_ADC1_Init+0xa0>)
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800129e:	2201      	movs	r2, #1
 80012a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012b2:	f000 fe01 	bl	8001eb8 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 f984 	bl	80015c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012c0:	2310      	movs	r3, #16
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012c8:	2307      	movs	r3, #7
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012d2:	f000 ff59 	bl	8002188 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012dc:	f000 f974 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000328 	.word	0x20000328
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <MX_SPI1_Init+0x64>)
 80012fa:	4a18      	ldr	r2, [pc, #96]	@ (800135c <MX_SPI1_Init+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001300:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001328:	2210      	movs	r2, #16
 800132a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <MX_SPI1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001340:	220a      	movs	r2, #10
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_SPI1_Init+0x64>)
 8001346:	f003 fe1d 	bl	8004f84 <HAL_SPI_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001350:	f000 f93a 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003d0 	.word	0x200003d0
 800135c:	40013000 	.word	0x40013000

08001360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM2_Init+0x98>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM2_Init+0x98>)
 8001386:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800138a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM2_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM2_Init+0x98>)
 8001394:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_TIM2_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_TIM2_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a6:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <MX_TIM2_Init+0x98>)
 80013a8:	f004 fbbe 	bl	8005b28 <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013b2:	f000 f909 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM2_Init+0x98>)
 80013c4:	f004 fd8f 	bl	8005ee6 <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ce:	f000 f8fb 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM2_Init+0x98>)
 80013e0:	f004 ffb0 	bl	8006344 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ea:	f000 f8ed 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000428 	.word	0x20000428

080013fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_DMA_Init+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <MX_DMA_Init+0x3c>)
 800140c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_DMA_Init+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2038      	movs	r0, #56	@ 0x38
 8001424:	f001 f9b3 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001428:	2038      	movs	r0, #56	@ 0x38
 800142a:	f001 f9cc 	bl	80027c6 <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a3f      	ldr	r2, [pc, #252]	@ (8001558 <MX_GPIO_Init+0x11c>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a38      	ldr	r2, [pc, #224]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b36      	ldr	r3, [pc, #216]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a31      	ldr	r2, [pc, #196]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <MX_GPIO_Init+0x11c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <MX_GPIO_Init+0x11c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001558 <MX_GPIO_Init+0x11c>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <MX_GPIO_Init+0x11c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	21c0      	movs	r1, #192	@ 0xc0
 80014c6:	4825      	ldr	r0, [pc, #148]	@ (800155c <MX_GPIO_Init+0x120>)
 80014c8:	f001 fe1e 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2101      	movs	r1, #1
 80014d0:	4823      	ldr	r0, [pc, #140]	@ (8001560 <MX_GPIO_Init+0x124>)
 80014d2:	f001 fe19 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_K1_EXT_Pin */
  GPIO_InitStruct.Pin = Button_K1_EXT_Pin;
 80014d6:	2308      	movs	r3, #8
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_K1_EXT_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	481e      	ldr	r0, [pc, #120]	@ (8001564 <MX_GPIO_Init+0x128>)
 80014ec:	f001 fc70 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_K0_Pin */
  GPIO_InitStruct.Pin = Button_K0_Pin;
 80014f0:	2310      	movs	r3, #16
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_K0_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4818      	ldr	r0, [pc, #96]	@ (8001564 <MX_GPIO_Init+0x128>)
 8001504:	f001 fc64 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8001508:	23c0      	movs	r3, #192	@ 0xc0
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480f      	ldr	r0, [pc, #60]	@ (800155c <MX_GPIO_Init+0x120>)
 8001520:	f001 fc56 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4809      	ldr	r0, [pc, #36]	@ (8001560 <MX_GPIO_Init+0x124>)
 800153c:	f001 fc48 	bl	8002dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2009      	movs	r0, #9
 8001546:	f001 f922 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800154a:	2009      	movs	r0, #9
 800154c:	f001 f93b 	bl	80027c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	@ 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)      // make sure it’s our timer
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001578:	d101      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		//HAL_GPIO_TogglePin(GPIOA, LED_1_Pin);
		blinkCB(); // flip LED
 800157a:	f7ff fd7d 	bl	8001078 <blinkCB>
	}
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0x20>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_ADC_ConvCpltCallback+0x16>
		tempCB();
 800159a:	f7ff fd77 	bl	800108c <tempCB>
	}
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012000 	.word	0x40012000

080015ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_3) //PE3
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d101      	bne.n	80015c0 <HAL_GPIO_EXTI_Callback+0x14>
		fsmEventButton();	//flip flag
 80015bc:	f7ff fca0 	bl	8000f00 <fsmEventButton>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <Error_Handler+0x8>

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a26      	ldr	r2, [pc, #152]	@ (80016cc <HAL_ADC_MspInit+0xa8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d145      	bne.n	80016c2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <HAL_ADC_MspInit+0xac>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a24      	ldr	r2, [pc, #144]	@ (80016d0 <HAL_ADC_MspInit+0xac>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <HAL_ADC_MspInit+0xac>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001654:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001656:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 800166c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001670:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001674:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001678:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 800167c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001680:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001688:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001690:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001696:	480f      	ldr	r0, [pc, #60]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001698:	f001 f8b0 	bl	80027fc <HAL_DMA_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80016a2:	f7ff ff91 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 80016aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80016ac:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2012      	movs	r0, #18
 80016b8:	f001 f869 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016bc:	2012      	movs	r0, #18
 80016be:	f001 f882 	bl	80027c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012000 	.word	0x40012000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	20000370 	.word	0x20000370
 80016d8:	40026410 	.word	0x40026410

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <HAL_SPI_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001736:	2338      	movs	r3, #56	@ 0x38
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <HAL_SPI_MspInit+0x8c>)
 8001752:	f001 fb3d 	bl	8002dd0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40013000 	.word	0x40013000
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800177c:	d115      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <HAL_TIM_Base_MspInit+0x48>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <HAL_TIM_Base_MspInit+0x48>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_TIM_Base_MspInit+0x48>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	201c      	movs	r0, #28
 80017a0:	f000 fff5 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a4:	201c      	movs	r0, #28
 80017a6:	f001 f80e 	bl	80027c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <NMI_Handler+0x4>

080017c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <MemManage_Handler+0x4>

080017d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <UsageFault_Handler+0x4>

080017e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180e:	f000 faef 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_K1_EXT_Pin);
 800181a:	2008      	movs	r0, #8
 800181c:	f001 fca8 	bl	8003170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <ADC_IRQHandler+0x10>)
 800182a:	f000 fb88 	bl	8001f3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000328 	.word	0x20000328

08001838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <TIM2_IRQHandler+0x10>)
 800183e:	f004 fa62 	bl	8005d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000428 	.word	0x20000428

0800184c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <DMA2_Stream0_IRQHandler+0x10>)
 8001852:	f001 f881 	bl	8002958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000370 	.word	0x20000370

08001860 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <OTG_FS_IRQHandler+0x10>)
 8001866:	f001 fddf 	bl	8003428 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20001ae0 	.word	0x20001ae0

08001874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_kill>:

int _kill(int pid, int sig)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188e:	f009 fc53 	bl	800b138 <__errno>
 8001892:	4603      	mov	r3, r0
 8001894:	2216      	movs	r2, #22
 8001896:	601a      	str	r2, [r3, #0]
  return -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_exit>:

void _exit (int status)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe7 	bl	8001884 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <_exit+0x12>

080018ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018cc:	f3af 8000 	nop.w
 80018d0:	4601      	mov	r1, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf0      	blt.n	80018cc <_read+0x12>
  }

  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_close>:
//  }
//  return len;
//}

int _close(int file)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800191c:	605a      	str	r2, [r3, #4]
  return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_isatty>:

int _isatty(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_write>:
  return -1;
}

// syscalls.c
int _write(int fd, char *buf, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	if(fd == 1 || fd == 2){ //stdout or stderr
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d002      	beq.n	8001974 <_write+0x18>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d105      	bne.n	8001980 <_write+0x24>
		CDC_Transmit_NonBlocking((uint8_t *)buf, len);
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f008 f982 	bl	8009c80 <CDC_Transmit_NonBlocking>
		return len;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	e000      	b.n	8001982 <_write+0x26>
	}
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f009 fbbc 	bl	800b138 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20020000 	.word	0x20020000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	200004f0 	.word	0x200004f0
 80019f4:	20002330 	.word	0x20002330

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <SystemInit+0x20>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <SystemInit+0x20>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a20:	f7ff ffea 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a24:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a26:	490d      	ldr	r1, [pc, #52]	@ (8001a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f009 fb7b 	bl	800b144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4e:	f7ff fb69 	bl	8001124 <main>
  bx  lr    
 8001a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001a60:	0800d2f4 	.word	0x0800d2f4
  ldr r2, =_sbss
 8001a64:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001a68:	20002330 	.word	0x20002330

08001a6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <CAN1_RX0_IRQHandler>
	...

08001a70 <txrx>:
static bool txrx(const uint8_t *tx, uint8_t *rx, size_t n);


/*------------------------------- STATIC FUNCTIONS ------------------------------------ */
static bool txrx(const uint8_t *tx, uint8_t *rx, size_t n)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	if(HAL_SPI_TransmitReceive(hspi, (uint8_t *)tx, rx, n, HAL_MAX_DELAY) != HAL_OK)
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <txrx+0x38>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	9200      	str	r2, [sp, #0]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	f003 fd5f 	bl	8005550 <HAL_SPI_TransmitReceive>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <txrx+0x2c>
		return false;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <txrx+0x2e>

	return true;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200004f4 	.word	0x200004f4

08001aac <writeEnable>:

static bool writeEnable(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	uint8_t cmd = 0x06;
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	71fb      	strb	r3, [r7, #7]

	CS_LOW();
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <writeEnable+0x44>)
 8001abc:	f001 fb24 	bl	8003108 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(hspi, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <writeEnable+0x48>)
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	1df9      	adds	r1, r7, #7
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	2201      	movs	r2, #1
 8001acc:	f003 fae3 	bl	8005096 <HAL_SPI_Transmit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <writeEnable+0x2e>
		return false;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e005      	b.n	8001ae6 <writeEnable+0x3a>

	CS_HIGH();
 8001ada:	2201      	movs	r2, #1
 8001adc:	2101      	movs	r1, #1
 8001ade:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <writeEnable+0x44>)
 8001ae0:	f001 fb12 	bl	8003108 <HAL_GPIO_WritePin>

	return true;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40020400 	.word	0x40020400
 8001af4:	200004f4 	.word	0x200004f4

08001af8 <W25Q16_Init>:

/*------------------------------- PUBLIC FUNCTIONS ------------------------------------ */
bool W25Q16_Init(SPI_HandleTypeDef *hspii)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	hspi = hspii;
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <W25Q16_Init+0x28>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
	uint16_t id = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	81fb      	strh	r3, [r7, #14]
	return W25Q16_readID(&id) == 0xEF14;	//// EFh = Winbond, 14h = 16 Mbit
 8001b0a:	f107 030e 	add.w	r3, r7, #14
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f808 	bl	8001b24 <W25Q16_readID>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200004f4 	.word	0x200004f4

08001b24 <W25Q16_readID>:

bool W25Q16_readID(uint16_t *id)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = {0x90, 0};	//Manufacturer/Device ID
 8001b2c:	2390      	movs	r3, #144	@ 0x90
 8001b2e:	81bb      	strh	r3, [r7, #12]
	uint8_t rx[2] = {0};
 8001b30:	2300      	movs	r3, #0
 8001b32:	813b      	strh	r3, [r7, #8]

	CS_LOW();
 8001b34:	2200      	movs	r2, #0
 8001b36:	2101      	movs	r1, #1
 8001b38:	481b      	ldr	r0, [pc, #108]	@ (8001ba8 <W25Q16_readID+0x84>)
 8001b3a:	f001 fae5 	bl	8003108 <HAL_GPIO_WritePin>

	if(!txrx(cmd, rx, 2))
 8001b3e:	f107 0108 	add.w	r1, r7, #8
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2202      	movs	r2, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff91 	bl	8001a70 <txrx>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <W25Q16_readID+0x3a>
		return false;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e020      	b.n	8001ba0 <W25Q16_readID+0x7c>
	if(!txrx(cmd, rx, 2))
 8001b5e:	f107 0108 	add.w	r1, r7, #8
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2202      	movs	r2, #2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff81 	bl	8001a70 <txrx>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <W25Q16_readID+0x5a>
		return false;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e010      	b.n	8001ba0 <W25Q16_readID+0x7c>

	CS_HIGH();
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2101      	movs	r1, #1
 8001b82:	4809      	ldr	r0, [pc, #36]	@ (8001ba8 <W25Q16_readID+0x84>)
 8001b84:	f001 fac0 	bl	8003108 <HAL_GPIO_WritePin>

	*id = (rx[0] << 8) | rx[1];
 8001b88:	7a3b      	ldrb	r3, [r7, #8]
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	7a7b      	ldrb	r3, [r7, #9]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	801a      	strh	r2, [r3, #0]

	return true;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40020400 	.word	0x40020400

08001bac <W25Q16_Read>:

bool W25Q16_Read(uint32_t addr, uint8_t *dst, size_t len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	uint8_t hAddr[4] = {0x03, addr >> 16, addr >> 8, addr};
 8001bb8:	2303      	movs	r3, #3
 8001bba:	753b      	strb	r3, [r7, #20]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	757b      	strb	r3, [r7, #21]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	75bb      	strb	r3, [r7, #22]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	75fb      	strb	r3, [r7, #23]

	CS_LOW();
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <W25Q16_Read+0x7c>)
 8001bd8:	f001 fa96 	bl	8003108 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(hspi, hAddr, 4, HAL_MAX_DELAY) != HAL_OK)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <W25Q16_Read+0x80>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f107 0114 	add.w	r1, r7, #20
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	2204      	movs	r2, #4
 8001bea:	f003 fa54 	bl	8005096 <HAL_SPI_Transmit>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <W25Q16_Read+0x4c>
		return false;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e013      	b.n	8001c20 <W25Q16_Read+0x74>
	if(HAL_SPI_Receive(hspi, dst, len, HAL_MAX_DELAY) != HAL_OK)
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <W25Q16_Read+0x80>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	f003 fb8a 	bl	800531e <HAL_SPI_Receive>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <W25Q16_Read+0x68>
		return false;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e005      	b.n	8001c20 <W25Q16_Read+0x74>
	CS_HIGH();
 8001c14:	2201      	movs	r2, #1
 8001c16:	2101      	movs	r1, #1
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <W25Q16_Read+0x7c>)
 8001c1a:	f001 fa75 	bl	8003108 <HAL_GPIO_WritePin>

	return true;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	200004f4 	.word	0x200004f4

08001c30 <W25Q16_PageProgram>:

bool W25Q16_PageProgram(uint32_t addr, const uint8_t *src, size_t len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	if(len > 256)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c42:	d901      	bls.n	8001c48 <W25Q16_PageProgram+0x18>
		return false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e03d      	b.n	8001cc4 <W25Q16_PageProgram+0x94>

	if(!writeEnable())
 8001c48:	f7ff ff30 	bl	8001aac <writeEnable>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <W25Q16_PageProgram+0x2c>
		return false;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e033      	b.n	8001cc4 <W25Q16_PageProgram+0x94>

	uint8_t hdr[4] = {0x02, addr >> 16, addr >> 8, addr};
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	753b      	strb	r3, [r7, #20]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	757b      	strb	r3, [r7, #21]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	75bb      	strb	r3, [r7, #22]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	75fb      	strb	r3, [r7, #23]
	CS_LOW();
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4814      	ldr	r0, [pc, #80]	@ (8001ccc <W25Q16_PageProgram+0x9c>)
 8001c7c:	f001 fa44 	bl	8003108 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, hdr, 4, HAL_MAX_DELAY) != HAL_OK)
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <W25Q16_PageProgram+0xa0>)
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	f107 0114 	add.w	r1, r7, #20
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	f003 fa02 	bl	8005096 <HAL_SPI_Transmit>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <W25Q16_PageProgram+0x6c>
		return false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e013      	b.n	8001cc4 <W25Q16_PageProgram+0x94>

	if(HAL_SPI_Transmit(hspi, src, len, HAL_MAX_DELAY) != HAL_OK)
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <W25Q16_PageProgram+0xa0>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	f003 f9f4 	bl	8005096 <HAL_SPI_Transmit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <W25Q16_PageProgram+0x88>
		return false;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e005      	b.n	8001cc4 <W25Q16_PageProgram+0x94>

	CS_HIGH();
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <W25Q16_PageProgram+0x9c>)
 8001cbe:	f001 fa23 	bl	8003108 <HAL_GPIO_WritePin>

	return true;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	200004f4 	.word	0x200004f4

08001cd4 <W25Q16_Erase4K>:

bool W25Q16_Erase4K(uint32_t addr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	if(!writeEnable())
 8001cdc:	f7ff fee6 	bl	8001aac <writeEnable>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f083 0301 	eor.w	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <W25Q16_Erase4K+0x1c>
		return false;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e025      	b.n	8001d3c <W25Q16_Erase4K+0x68>

	uint8_t hadr[4] = {0x20, addr >> 16, addr >> 8, addr};
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	733b      	strb	r3, [r7, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	737b      	strb	r3, [r7, #13]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	73bb      	strb	r3, [r7, #14]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73fb      	strb	r3, [r7, #15]
	CS_LOW();
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <W25Q16_Erase4K+0x70>)
 8001d10:	f001 f9fa 	bl	8003108 <HAL_GPIO_WritePin>

	if(HAL_SPI_Transmit(hspi, hadr, 4, HAL_MAX_DELAY) != HAL_OK)
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <W25Q16_Erase4K+0x74>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	f107 010c 	add.w	r1, r7, #12
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	2204      	movs	r2, #4
 8001d22:	f003 f9b8 	bl	8005096 <HAL_SPI_Transmit>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <W25Q16_Erase4K+0x5c>
		return false;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e005      	b.n	8001d3c <W25Q16_Erase4K+0x68>

	CS_HIGH();
 8001d30:	2201      	movs	r2, #1
 8001d32:	2101      	movs	r1, #1
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <W25Q16_Erase4K+0x70>)
 8001d36:	f001 f9e7 	bl	8003108 <HAL_GPIO_WritePin>

	return true;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40020400 	.word	0x40020400
 8001d48:	200004f4 	.word	0x200004f4

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d50:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <HAL_Init+0x40>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_Init+0x40>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_Init+0x40>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 fcff 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fc28 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fd17 	bl	80027e2 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 fcdf 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000000c 	.word	0x2000000c
 8001de8:	20000014 	.word	0x20000014
 8001dec:	20000010 	.word	0x20000010

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000014 	.word	0x20000014
 8001e14:	200004f8 	.word	0x200004f8

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	200004f8 	.word	0x200004f8

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000014 	.word	0x20000014

08001e78 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_SuspendTick+0x1c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_SuspendTick+0x1c>)
 8001e82:	f023 0302 	bic.w	r3, r3, #2
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_ResumeTick+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_ResumeTick+0x1c>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e033      	b.n	8001f36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fba4 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001efe:	f023 0302 	bic.w	r3, r3, #2
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa5e 	bl	80023cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f26:	e001      	b.n	8001f2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d049      	beq.n	8002008 <HAL_ADC_IRQHandler+0xca>
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d046      	beq.n	8002008 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d12b      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d127      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d119      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0220 	bic.w	r2, r2, #32
 8001fd2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fac5 	bl	8001588 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f06f 0212 	mvn.w	r2, #18
 8002006:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002016:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d057      	beq.n	80020ce <HAL_ADC_IRQHandler+0x190>
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d054      	beq.n	80020ce <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d139      	bne.n	80020be <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002062:	2b00      	cmp	r3, #0
 8002064:	d12b      	bne.n	80020be <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d124      	bne.n	80020be <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11d      	bne.n	80020be <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002098:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fa80 	bl	80025c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 020c 	mvn.w	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d017      	beq.n	8002114 <HAL_ADC_IRQHandler+0x1d6>
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d014      	beq.n	8002114 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10d      	bne.n	8002114 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f82a 	bl	800215e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0201 	mvn.w	r2, #1
 8002112:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002122:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <HAL_ADC_IRQHandler+0x218>
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0220 	mvn.w	r2, #32
 8002144:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f813 	bl	8002172 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0220 	mvn.w	r2, #32
 8002154:	601a      	str	r2, [r3, #0]
  }
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e105      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x228>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d925      	bls.n	8002200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	3b1e      	subs	r3, #30
 80021ca:	2207      	movs	r2, #7
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68d9      	ldr	r1, [r3, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4403      	add	r3, r0
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	409a      	lsls	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	e022      	b.n	8002246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6919      	ldr	r1, [r3, #16]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	2207      	movs	r2, #7
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	400a      	ands	r2, r1
 8002222:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	4603      	mov	r3, r0
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4403      	add	r3, r0
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d824      	bhi.n	8002298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b05      	subs	r3, #5
 8002260:	221f      	movs	r2, #31
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b05      	subs	r3, #5
 800228a:	fa00 f203 	lsl.w	r2, r0, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	635a      	str	r2, [r3, #52]	@ 0x34
 8002296:	e04c      	b.n	8002332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d824      	bhi.n	80022ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b23      	subs	r3, #35	@ 0x23
 80022b2:	221f      	movs	r2, #31
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43da      	mvns	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	400a      	ands	r2, r1
 80022c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	3b23      	subs	r3, #35	@ 0x23
 80022dc:	fa00 f203 	lsl.w	r2, r0, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e8:	e023      	b.n	8002332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b41      	subs	r3, #65	@ 0x41
 80022fc:	221f      	movs	r2, #31
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b41      	subs	r3, #65	@ 0x41
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <HAL_ADC_ConfigChannel+0x234>)
 8002334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a21      	ldr	r2, [pc, #132]	@ (80023c0 <HAL_ADC_ConfigChannel+0x238>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d109      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1cc>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b12      	cmp	r3, #18
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <HAL_ADC_ConfigChannel+0x238>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d123      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x21e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d003      	beq.n	800236e <HAL_ADC_ConfigChannel+0x1e6>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b11      	cmp	r3, #17
 800236c:	d11b      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d111      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_ADC_ConfigChannel+0x23c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a10      	ldr	r2, [pc, #64]	@ (80023c8 <HAL_ADC_ConfigChannel+0x240>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9a      	lsrs	r2, r3, #18
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3b01      	subs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40012300 	.word	0x40012300
 80023c0:	40012000 	.word	0x40012000
 80023c4:	2000000c 	.word	0x2000000c
 80023c8:	431bde83 	.word	0x431bde83

080023cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d4:	4b79      	ldr	r3, [pc, #484]	@ (80025bc <ADC_Init+0x1f0>)
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	021a      	lsls	r2, r3, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	4a58      	ldr	r2, [pc, #352]	@ (80025c0 <ADC_Init+0x1f4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002472:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6899      	ldr	r1, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6899      	ldr	r1, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	e00f      	b.n	80024ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0202 	bic.w	r2, r2, #2
 80024d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e1b      	ldrb	r3, [r3, #24]
 80024e4:	005a      	lsls	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002506:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002516:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	035a      	lsls	r2, r3, #13
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e007      	b.n	8002540 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800253e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800254e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	3b01      	subs	r3, #1
 800255c:	051a      	lsls	r2, r3, #20
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002582:	025a      	lsls	r2, r3, #9
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	029a      	lsls	r2, r3, #10
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40012300 	.word	0x40012300
 80025c0:	0f000001 	.word	0x0f000001

080025c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	@ (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	@ (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff29 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff3e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff31 	bl	800263c <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff fb06 	bl	8001e18 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e099      	b.n	800294c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	e00f      	b.n	800285a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283a:	f7ff faed 	bl	8001e18 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b05      	cmp	r3, #5
 8002846:	d908      	bls.n	800285a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e078      	b.n	800294c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e8      	bne.n	800283a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <HAL_DMA_Init+0x158>)
 8002874:	4013      	ands	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d107      	bne.n	80028c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	4313      	orrs	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0307 	bic.w	r3, r3, #7
 80028da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d117      	bne.n	800291e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f9e9 	bl	8002cd8 <DMA_CheckFifoParam>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2240      	movs	r2, #64	@ 0x40
 8002910:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800291a:	2301      	movs	r3, #1
 800291c:	e016      	b.n	800294c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9a0 	bl	8002c6c <DMA_CalcBaseAndBitshift>
 800292c:	4603      	mov	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	223f      	movs	r2, #63	@ 0x3f
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	f010803f 	.word	0xf010803f

08002958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002964:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba0 <HAL_DMA_IRQHandler+0x248>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba4 <HAL_DMA_IRQHandler+0x24c>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a9b      	lsrs	r3, r3, #10
 8002970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002982:	2208      	movs	r2, #8
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0204 	bic.w	r2, r2, #4
 80029aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	2208      	movs	r2, #8
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	2201      	movs	r2, #1
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d012      	beq.n	80029fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e6:	2201      	movs	r2, #1
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	2204      	movs	r2, #4
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	2210      	movs	r2, #16
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d043      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d03c      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	2210      	movs	r2, #16
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d018      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d024      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
 8002a86:	e01f      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e016      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0208 	bic.w	r2, r2, #8
 8002ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	2220      	movs	r2, #32
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 808f 	beq.w	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8087 	beq.w	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aee:	2220      	movs	r2, #32
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d136      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0216 	bic.w	r2, r2, #22
 8002b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x1da>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0208 	bic.w	r2, r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	223f      	movs	r2, #63	@ 0x3f
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d07e      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
        }
        return;
 8002b6e:	e079      	b.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01d      	beq.n	8002bba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d031      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e02c      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
 8002b9e:	bf00      	nop
 8002ba0:	2000000c 	.word	0x2000000c
 8002ba4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	e01e      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10f      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0210 	bic.w	r2, r2, #16
 8002bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d032      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2205      	movs	r2, #5
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d307      	bcc.n	8002c40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f2      	bne.n	8002c24 <HAL_DMA_IRQHandler+0x2cc>
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
 8002c62:	e000      	b.n	8002c66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c64:	bf00      	nop
    }
  }
}
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3b10      	subs	r3, #16
 8002c7c:	4a14      	ldr	r2, [pc, #80]	@ (8002cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d909      	bls.n	8002cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cac:	e007      	b.n	8002cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	aaaaaaab 	.word	0xaaaaaaab
 8002cd4:	0800cf64 	.word	0x0800cf64

08002cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d11f      	bne.n	8002d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d856      	bhi.n	8002da6 <DMA_CheckFifoParam+0xce>
 8002cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <DMA_CheckFifoParam+0x28>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d23 	.word	0x08002d23
 8002d08:	08002d11 	.word	0x08002d11
 8002d0c:	08002da7 	.word	0x08002da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d046      	beq.n	8002daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e043      	b.n	8002daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d2a:	d140      	bne.n	8002dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d30:	e03d      	b.n	8002dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3a:	d121      	bne.n	8002d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d837      	bhi.n	8002db2 <DMA_CheckFifoParam+0xda>
 8002d42:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <DMA_CheckFifoParam+0x70>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d5f 	.word	0x08002d5f
 8002d50:	08002d59 	.word	0x08002d59
 8002d54:	08002d71 	.word	0x08002d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e030      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d025      	beq.n	8002db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6e:	e022      	b.n	8002db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d78:	d11f      	bne.n	8002dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d7e:	e01c      	b.n	8002dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d903      	bls.n	8002d8e <DMA_CheckFifoParam+0xb6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d003      	beq.n	8002d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d8c:	e018      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      break;
 8002d92:	e015      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e00b      	b.n	8002dbe <DMA_CheckFifoParam+0xe6>
      break;
 8002da6:	bf00      	nop
 8002da8:	e00a      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e008      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e006      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e004      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e16b      	b.n	80030c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 815a 	bne.w	80030be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d017      	beq.n	8002ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d123      	bne.n	8002f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80b4 	beq.w	80030be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b60      	ldr	r3, [pc, #384]	@ (80030dc <HAL_GPIO_Init+0x30c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	4a5f      	ldr	r2, [pc, #380]	@ (80030dc <HAL_GPIO_Init+0x30c>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f66:	4b5d      	ldr	r3, [pc, #372]	@ (80030dc <HAL_GPIO_Init+0x30c>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f72:	4a5b      	ldr	r2, [pc, #364]	@ (80030e0 <HAL_GPIO_Init+0x310>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	220f      	movs	r2, #15
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_GPIO_Init+0x314>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_GPIO_Init+0x226>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a51      	ldr	r2, [pc, #324]	@ (80030e8 <HAL_GPIO_Init+0x318>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d025      	beq.n	8002ff2 <HAL_GPIO_Init+0x222>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a50      	ldr	r2, [pc, #320]	@ (80030ec <HAL_GPIO_Init+0x31c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <HAL_GPIO_Init+0x21e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80030f0 <HAL_GPIO_Init+0x320>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <HAL_GPIO_Init+0x21a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80030f4 <HAL_GPIO_Init+0x324>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0x216>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4d      	ldr	r2, [pc, #308]	@ (80030f8 <HAL_GPIO_Init+0x328>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_GPIO_Init+0x212>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4c      	ldr	r2, [pc, #304]	@ (80030fc <HAL_GPIO_Init+0x32c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <HAL_GPIO_Init+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8003100 <HAL_GPIO_Init+0x330>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_GPIO_Init+0x20a>
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	e00e      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	e00c      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002fde:	2306      	movs	r3, #6
 8002fe0:	e00a      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	e008      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x228>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003008:	4935      	ldr	r1, [pc, #212]	@ (80030e0 <HAL_GPIO_Init+0x310>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b3b      	ldr	r3, [pc, #236]	@ (8003104 <HAL_GPIO_Init+0x334>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303a:	4a32      	ldr	r2, [pc, #200]	@ (8003104 <HAL_GPIO_Init+0x334>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003040:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <HAL_GPIO_Init+0x334>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003064:	4a27      	ldr	r2, [pc, #156]	@ (8003104 <HAL_GPIO_Init+0x334>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306a:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <HAL_GPIO_Init+0x334>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308e:	4a1d      	ldr	r2, [pc, #116]	@ (8003104 <HAL_GPIO_Init+0x334>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_GPIO_Init+0x334>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b8:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <HAL_GPIO_Init+0x334>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f67f ae90 	bls.w	8002dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	@ 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40021400 	.word	0x40021400
 80030fc:	40021800 	.word	0x40021800
 8003100:	40021c00 	.word	0x40021c00
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	041a      	lsls	r2, r3, #16
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43d9      	mvns	r1, r3
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	400b      	ands	r3, r1
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	619a      	str	r2, [r3, #24]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800317a:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fa0c 	bl	80015ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e101      	b.n	80033b6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f006 fef1 	bl	8009fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e0:	d102      	bne.n	80031e8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fa50 	bl	8006692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7c1a      	ldrb	r2, [r3, #16]
 80031fa:	f88d 2000 	strb.w	r2, [sp]
 80031fe:	3304      	adds	r3, #4
 8003200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003202:	f003 f92f 	bl	8006464 <USB_CoreInit>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0ce      	b.n	80033b6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fa48 	bl	80066b4 <USB_SetCurrentMode>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0bf      	b.n	80033b6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e04a      	b.n	80032d2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3315      	adds	r3, #21
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3314      	adds	r3, #20
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	b298      	uxth	r0, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	332e      	adds	r3, #46	@ 0x2e
 8003278:	4602      	mov	r2, r0
 800327a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3318      	adds	r3, #24
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	331c      	adds	r3, #28
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3320      	adds	r3, #32
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3324      	adds	r3, #36	@ 0x24
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	3301      	adds	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3af      	bcc.n	800323c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
 80032e0:	e044      	b.n	800336c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	3301      	adds	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	791b      	ldrb	r3, [r3, #4]
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3b5      	bcc.n	80032e2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7c1a      	ldrb	r2, [r3, #16]
 800337e:	f88d 2000 	strb.w	r2, [sp]
 8003382:	3304      	adds	r3, #4
 8003384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003386:	f003 f9e1 	bl	800674c <USB_DevInit>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e00c      	b.n	80033b6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 fa2b 	bl	800780a <USB_DevDisconnect>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_PCD_Start+0x1c>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e022      	b.n	8003420 <HAL_PCD_Start+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 f932 	bl	8006670 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 f9d9 	bl	80077c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b08d      	sub	sp, #52	@ 0x34
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fa97 	bl	8007972 <USB_GetMode>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 848c 	bne.w	8003d64 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f004 f9fb 	bl	800784c <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8482 	beq.w	8003d62 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f004 f9e8 	bl	800784c <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 0202 	and.w	r2, r2, #2
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 f9d6 	bl	800784c <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d161      	bne.n	800356e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0210 	bic.w	r2, r2, #16
 80034b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80034e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034e4:	d124      	bne.n	8003530 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d035      	beq.n	800355e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003500:	b29b      	uxth	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	6a38      	ldr	r0, [r7, #32]
 8003506:	f004 f80d 	bl	8007524 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003516:	441a      	add	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003528:	441a      	add	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	615a      	str	r2, [r3, #20]
 800352e:	e016      	b.n	800355e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003536:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800353a:	d110      	bne.n	800355e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003542:	2208      	movs	r2, #8
 8003544:	4619      	mov	r1, r3
 8003546:	6a38      	ldr	r0, [r7, #32]
 8003548:	f003 ffec 	bl	8007524 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003558:	441a      	add	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0210 	orr.w	r2, r2, #16
 800356c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f004 f96a 	bl	800784c <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800357e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003582:	f040 80a7 	bne.w	80036d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 f96f 	bl	8007872 <USB_ReadDevAllOutEpInterrupt>
 8003594:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003596:	e099      	b.n	80036cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 808e 	beq.w	80036c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 f993 	bl	80078da <USB_ReadDevOutEPInterrupt>
 80035b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00c      	beq.n	80035da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035cc:	461a      	mov	r2, r3
 80035ce:	2301      	movs	r3, #1
 80035d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fea3 	bl	8004320 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00c      	beq.n	80035fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2308      	movs	r3, #8
 80035f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 ff79 	bl	80044f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003614:	461a      	mov	r2, r3
 8003616:	2310      	movs	r3, #16
 8003618:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d030      	beq.n	8003686 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362c:	2b80      	cmp	r3, #128	@ 0x80
 800362e:	d109      	bne.n	8003644 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800363e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003642:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	3304      	adds	r3, #4
 8003658:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	78db      	ldrb	r3, [r3, #3]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d108      	bne.n	8003674 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	b2db      	uxtb	r3, r3
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f006 fda6 	bl	800a1c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	2302      	movs	r3, #2
 8003684:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369c:	461a      	mov	r2, r3
 800369e:	2320      	movs	r3, #32
 80036a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	3301      	adds	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f47f af62 	bne.w	8003598 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f004 f8b7 	bl	800784c <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036e8:	f040 80db 	bne.w	80038a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 f8d8 	bl	80078a6 <USB_ReadDevAllInEpInterrupt>
 80036f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80036fc:	e0cd      	b.n	800389a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80c2 	beq.w	800388e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f004 f8fe 	bl	8007916 <USB_ReadDevInEPInterrupt>
 800371a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d057      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	2201      	movs	r2, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800373a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43db      	mvns	r3, r3
 8003740:	69f9      	ldr	r1, [r7, #28]
 8003742:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003746:	4013      	ands	r3, r2
 8003748:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	2301      	movs	r3, #1
 800375a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	799b      	ldrb	r3, [r3, #6]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d132      	bne.n	80037ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3320      	adds	r3, #32
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	331c      	adds	r3, #28
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4419      	add	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4403      	add	r3, r0
 8003798:	3320      	adds	r3, #32
 800379a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d113      	bne.n	80037ca <HAL_PCD_IRQHandler+0x3a2>
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3324      	adds	r3, #36	@ 0x24
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d108      	bne.n	80037ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037c2:	461a      	mov	r2, r3
 80037c4:	2101      	movs	r1, #1
 80037c6:	f004 f905 	bl	80079d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f006 fc70 	bl	800a0b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	2308      	movs	r3, #8
 80037f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003808:	461a      	mov	r2, r3
 800380a:	2310      	movs	r3, #16
 800380c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003824:	461a      	mov	r2, r3
 8003826:	2340      	movs	r3, #64	@ 0x40
 8003828:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003836:	6a38      	ldr	r0, [r7, #32]
 8003838:	f003 f8ec 	bl	8006a14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800383c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	3310      	adds	r3, #16
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	3304      	adds	r3, #4
 800384e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	78db      	ldrb	r3, [r3, #3]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d108      	bne.n	800386a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2200      	movs	r2, #0
 800385c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f006 fcbd 	bl	800a1e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003876:	461a      	mov	r2, r3
 8003878:	2302      	movs	r3, #2
 800387a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003886:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fcbd 	bl	8004208 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	3301      	adds	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	f47f af2e 	bne.w	80036fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 ffd0 	bl	800784c <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038b6:	d122      	bne.n	80038fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d108      	bne.n	80038e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038de:	2100      	movs	r1, #0
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fea3 	bl	800462c <HAL_PCDEx_LPM_Callback>
 80038e6:	e002      	b.n	80038ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f006 fc5b 	bl	800a1a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80038fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 ffa2 	bl	800784c <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003912:	d112      	bne.n	800393a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d102      	bne.n	800392a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f006 fc17 	bl	800a158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003938:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f003 ff84 	bl	800784c <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394e:	f040 80b7 	bne.w	8003ac0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2110      	movs	r1, #16
 800396c:	4618      	mov	r0, r3
 800396e:	f003 f851 	bl	8006a14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	e046      	b.n	8003a06 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003984:	461a      	mov	r2, r3
 8003986:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800398a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a02:	3301      	adds	r3, #1
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d3b2      	bcc.n	8003978 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a20:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003a24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7bdb      	ldrb	r3, [r3, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3e:	f043 030b 	orr.w	r3, r3, #11
 8003a42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a54:	f043 030b 	orr.w	r3, r3, #11
 8003a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a5a:	e015      	b.n	8003a88 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a6e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a82:	f043 030b 	orr.w	r3, r3, #11
 8003a86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f003 ff92 	bl	80079d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fec1 	bl	800784c <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad4:	d123      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 ff57 	bl	800798e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 f80e 	bl	8006b06 <USB_GetDevSpeed>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681c      	ldr	r4, [r3, #0]
 8003af6:	f001 fa39 	bl	8004f6c <HAL_RCC_GetHCLKFreq>
 8003afa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b00:	461a      	mov	r2, r3
 8003b02:	4620      	mov	r0, r4
 8003b04:	f002 fd12 	bl	800652c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f006 fafc 	bl	800a106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 fe92 	bl	800784c <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d10a      	bne.n	8003b48 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f006 fad9 	bl	800a0ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f002 0208 	and.w	r2, r2, #8
 8003b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fe7d 	bl	800784c <USB_ReadInterrupts>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	2b80      	cmp	r3, #128	@ 0x80
 8003b5a:	d123      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	e014      	b.n	8003b98 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb0a 	bl	80041a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	3301      	adds	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	791b      	ldrb	r3, [r3, #4]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d3e4      	bcc.n	8003b6e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f003 fe4f 	bl	800784c <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb8:	d13c      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bba:	2301      	movs	r3, #1
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e02b      	b.n	8003c18 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3318      	adds	r3, #24
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d115      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003be6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	da12      	bge.n	8003c12 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3317      	adds	r3, #23
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 faca 	bl	80041a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	3301      	adds	r3, #1
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	791b      	ldrb	r3, [r3, #4]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d3cd      	bcc.n	8003bc0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 fe07 	bl	800784c <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c48:	d156      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	e045      	b.n	8003cdc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d12e      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da2b      	bge.n	8003cd6 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	0c1a      	lsrs	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c88:	4053      	eors	r3, r2
 8003c8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d121      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cd2:	6053      	str	r3, [r2, #4]
            break;
 8003cd4:	e008      	b.n	8003ce8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	3301      	adds	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d3b3      	bcc.n	8003c50 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 fda5 	bl	800784c <USB_ReadInterrupts>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d10a      	bne.n	8003d24 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f006 fa7a 	bl	800a208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 fd8f 	bl	800784c <USB_ReadInterrupts>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d115      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f006 fa6a 	bl	800a224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	e000      	b.n	8003d64 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d62:	bf00      	nop
    }
  }
}
 8003d64:	3734      	adds	r7, #52	@ 0x34
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}

08003d6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_PCD_SetAddress+0x1a>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e012      	b.n	8003daa <HAL_PCD_SetAddress+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f003 fcee 	bl	800777c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	4608      	mov	r0, r1
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	70fb      	strb	r3, [r7, #3]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	803b      	strh	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da0f      	bge.n	8003df8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	3310      	adds	r3, #16
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	705a      	strb	r2, [r3, #1]
 8003df6:	e00f      	b.n	8003e18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e24:	883b      	ldrh	r3, [r7, #0]
 8003e26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	78ba      	ldrb	r2, [r7, #2]
 8003e32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e46:	78bb      	ldrb	r3, [r7, #2]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d102      	bne.n	8003e52 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_PCD_EP_Open+0xae>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e00e      	b.n	8003e7e <HAL_PCD_EP_Open+0xcc>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68f9      	ldr	r1, [r7, #12]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 fe6e 	bl	8006b50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da0f      	bge.n	8003eba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 020f 	and.w	r2, r3, #15
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	3310      	adds	r3, #16
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	3304      	adds	r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	705a      	strb	r2, [r3, #1]
 8003eb8:	e00f      	b.n	8003eda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_PCD_EP_Close+0x6e>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e00e      	b.n	8003f12 <HAL_PCD_EP_Close+0x8c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 feac 	bl	8006c60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	460b      	mov	r3, r1
 8003f28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	799b      	ldrb	r3, [r3, #6]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d102      	bne.n	8003f76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	799b      	ldrb	r3, [r3, #6]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6979      	ldr	r1, [r7, #20]
 8003f82:	f002 ff49 	bl	8006e18 <USB_EPStartXfer>

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3310      	adds	r3, #16
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	b2da      	uxtb	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	799b      	ldrb	r3, [r3, #6]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d102      	bne.n	800401a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	799b      	ldrb	r3, [r3, #6]
 8004022:	461a      	mov	r2, r3
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	f002 fef7 	bl	8006e18 <USB_EPStartXfer>

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	7912      	ldrb	r2, [r2, #4]
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e04f      	b.n	80040f2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0f      	bge.n	800407a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3310      	adds	r3, #16
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	705a      	strb	r2, [r3, #1]
 8004078:	e00d      	b.n	8004096 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	3304      	adds	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_PCD_EP_SetStall+0x82>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e01d      	b.n	80040f2 <HAL_PCD_EP_SetStall+0xbe>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f003 fa85 	bl	80075d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7999      	ldrb	r1, [r3, #6]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040e2:	461a      	mov	r2, r3
 80040e4:	f003 fc76 	bl	80079d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	7912      	ldrb	r2, [r2, #4]
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e042      	b.n	800419e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800411c:	2b00      	cmp	r3, #0
 800411e:	da0f      	bge.n	8004140 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 020f 	and.w	r2, r3, #15
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	3310      	adds	r3, #16
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	3304      	adds	r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	705a      	strb	r2, [r3, #1]
 800413e:	e00f      	b.n	8004160 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_PCD_EP_ClrStall+0x86>
 800417c:	2302      	movs	r3, #2
 800417e:	e00e      	b.n	800419e <HAL_PCD_EP_ClrStall+0xa4>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	4618      	mov	r0, r3
 8004190:	f003 fa8e 	bl	80076b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da0c      	bge.n	80041d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	3310      	adds	r3, #16
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	3304      	adds	r3, #4
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e00c      	b.n	80041ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 020f 	and.w	r2, r3, #15
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	3304      	adds	r3, #4
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 f8ad 	bl	8007354 <USB_EPStopXfer>
 80041fa:	4603      	mov	r3, r0
 80041fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	3310      	adds	r3, #16
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d901      	bls.n	8004240 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e06b      	b.n	8004318 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	429a      	cmp	r2, r3
 8004254:	d902      	bls.n	800425c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3303      	adds	r3, #3
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004264:	e02a      	b.n	80042bc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	429a      	cmp	r2, r3
 800427a:	d902      	bls.n	8004282 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3303      	adds	r3, #3
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68d9      	ldr	r1, [r3, #12]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4603      	mov	r3, r0
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f003 f902 	bl	80074a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d809      	bhi.n	80042e6 <PCD_WriteEmptyTxFifo+0xde>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042da:	429a      	cmp	r2, r3
 80042dc:	d203      	bcs.n	80042e6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1bf      	bne.n	8004266 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d811      	bhi.n	8004316 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2201      	movs	r2, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	43db      	mvns	r3, r3
 800430c:	6939      	ldr	r1, [r7, #16]
 800430e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004312:	4013      	ands	r3, r2
 8004314:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	333c      	adds	r3, #60	@ 0x3c
 8004338:	3304      	adds	r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	799b      	ldrb	r3, [r3, #6]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d17b      	bne.n	800444e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4a61      	ldr	r2, [pc, #388]	@ (80044e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	f240 80b9 	bls.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80b3 	beq.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	e0a7      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a2:	461a      	mov	r2, r3
 80043a4:	2320      	movs	r3, #32
 80043a6:	6093      	str	r3, [r2, #8]
 80043a8:	e098      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 8093 	bne.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4a4b      	ldr	r2, [pc, #300]	@ (80044e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d90f      	bls.n	80043de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d4:	461a      	mov	r2, r3
 80043d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043da:	6093      	str	r3, [r2, #8]
 80043dc:	e07e      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	440b      	add	r3, r1
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d114      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004428:	461a      	mov	r2, r3
 800442a:	2101      	movs	r1, #1
 800442c:	f003 fad2 	bl	80079d4 <USB_EP0_OutStart>
 8004430:	e006      	b.n	8004440 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	441a      	add	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f005 fe1a 	bl	800a080 <HAL_PCD_DataOutStageCallback>
 800444c:	e046      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a26      	ldr	r2, [pc, #152]	@ (80044ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d124      	bne.n	80044a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004472:	6093      	str	r3, [r2, #8]
 8004474:	e032      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	2320      	movs	r3, #32
 8004490:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f005 fdf1 	bl	800a080 <HAL_PCD_DataOutStageCallback>
 800449e:	e01d      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d114      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044c8:	461a      	mov	r2, r3
 80044ca:	2100      	movs	r1, #0
 80044cc:	f003 fa82 	bl	80079d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f005 fdd2 	bl	800a080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	4f54300a 	.word	0x4f54300a
 80044ec:	4f54310a 	.word	0x4f54310a

080044f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	333c      	adds	r3, #60	@ 0x3c
 8004508:	3304      	adds	r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a15      	ldr	r2, [pc, #84]	@ (8004578 <PCD_EP_OutSetupPacket_int+0x88>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d90e      	bls.n	8004544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f005 fd89 	bl	800a05c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a0a      	ldr	r2, [pc, #40]	@ (8004578 <PCD_EP_OutSetupPacket_int+0x88>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d90c      	bls.n	800456c <PCD_EP_OutSetupPacket_int+0x7c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	799b      	ldrb	r3, [r3, #6]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d108      	bne.n	800456c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004564:	461a      	mov	r2, r3
 8004566:	2101      	movs	r1, #1
 8004568:	f003 fa34 	bl	80079d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	4f54300a 	.word	0x4f54300a

0800457c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
 8004588:	4613      	mov	r3, r2
 800458a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800459a:	883b      	ldrh	r3, [r7, #0]
 800459c:	0419      	lsls	r1, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045a8:	e028      	b.n	80045fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	e00d      	b.n	80045da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	3340      	adds	r3, #64	@ 0x40
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	3301      	adds	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	3b01      	subs	r3, #1
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3ec      	bcc.n	80045be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045e4:	883b      	ldrh	r3, [r7, #0]
 80045e6:	0418      	lsls	r0, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4302      	orrs	r2, r0
 80045f4:	3340      	adds	r3, #64	@ 0x40
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_PWR_EnterSTOPMode+0x58>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 0203 	bic.w	r2, r3, #3
 8004658:	4910      	ldr	r1, [pc, #64]	@ (800469c <HAL_PWR_EnterSTOPMode+0x58>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004660:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	4a0e      	ldr	r2, [pc, #56]	@ (80046a0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004672:	bf30      	wfi
 8004674:	e005      	b.n	8004682 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d001      	beq.n	8004680 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 800467c:	bf40      	sev
      __WFE();
 800467e:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8004680:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	4a06      	ldr	r2, [pc, #24]	@ (80046a0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6113      	str	r3, [r2, #16]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40007000 	.word	0x40007000
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e267      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d075      	beq.n	80047ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046c2:	4b88      	ldr	r3, [pc, #544]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4b85      	ldr	r3, [pc, #532]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d112      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b82      	ldr	r3, [pc, #520]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e6:	d10b      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	4b7e      	ldr	r3, [pc, #504]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d05b      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d157      	bne.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e242      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x74>
 800470a:	4b76      	ldr	r3, [pc, #472]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a75      	ldr	r2, [pc, #468]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x98>
 8004722:	4b70      	ldr	r3, [pc, #448]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6f      	ldr	r2, [pc, #444]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b6d      	ldr	r3, [pc, #436]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6c      	ldr	r2, [pc, #432]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 800473c:	4b69      	ldr	r3, [pc, #420]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a68      	ldr	r2, [pc, #416]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b66      	ldr	r3, [pc, #408]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a65      	ldr	r2, [pc, #404]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fb5c 	bl	8001e18 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fd fb58 	bl	8001e18 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	@ 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e207      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd fb48 	bl	8001e18 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd fb44 	bl	8001e18 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1f3      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b51      	ldr	r3, [pc, #324]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ba:	4b4a      	ldr	r3, [pc, #296]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b47      	ldr	r3, [pc, #284]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d2:	4b44      	ldr	r3, [pc, #272]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b41      	ldr	r3, [pc, #260]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c7      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4937      	ldr	r1, [pc, #220]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b34      	ldr	r3, [pc, #208]	@ (80048e8 <HAL_RCC_OscConfig+0x244>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fd fafd 	bl	8001e18 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004822:	f7fd faf9 	bl	8001e18 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a8      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b28      	ldr	r3, [pc, #160]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4925      	ldr	r1, [pc, #148]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b24      	ldr	r3, [pc, #144]	@ (80048e8 <HAL_RCC_OscConfig+0x244>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fadc 	bl	8001e18 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004864:	f7fd fad8 	bl	8001e18 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e187      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d036      	beq.n	80048fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b15      	ldr	r3, [pc, #84]	@ (80048ec <HAL_RCC_OscConfig+0x248>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd fabc 	bl	8001e18 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fd fab8 	bl	8001e18 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e167      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x200>
 80048c2:	e01b      	b.n	80048fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCC_OscConfig+0x248>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fd faa5 	bl	8001e18 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	e00e      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d2:	f7fd faa1 	bl	8001e18 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d907      	bls.n	80048f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e150      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470000 	.word	0x42470000
 80048ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	4b88      	ldr	r3, [pc, #544]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ea      	bne.n	80048d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8097 	beq.w	8004a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490e:	4b81      	ldr	r3, [pc, #516]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	4a7c      	ldr	r2, [pc, #496]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004928:	6413      	str	r3, [r2, #64]	@ 0x40
 800492a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493a:	4b77      	ldr	r3, [pc, #476]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d118      	bne.n	8004978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004946:	4b74      	ldr	r3, [pc, #464]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a73      	ldr	r2, [pc, #460]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004952:	f7fd fa61 	bl	8001e18 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fd fa5d 	bl	8001e18 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e10c      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x2ea>
 8004980:	4b64      	ldr	r3, [pc, #400]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004984:	4a63      	ldr	r2, [pc, #396]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6713      	str	r3, [r2, #112]	@ 0x70
 800498c:	e01c      	b.n	80049c8 <HAL_RCC_OscConfig+0x324>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b05      	cmp	r3, #5
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x30c>
 8004996:	4b5f      	ldr	r3, [pc, #380]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	4a5e      	ldr	r2, [pc, #376]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 0304 	orr.w	r3, r3, #4
 80049a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0x324>
 80049b0:	4b58      	ldr	r3, [pc, #352]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b4:	4a57      	ldr	r2, [pc, #348]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80049bc:	4b55      	ldr	r3, [pc, #340]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	4a54      	ldr	r2, [pc, #336]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fa22 	bl	8001e18 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd fa1e 	bl	8001e18 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0cb      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	4b49      	ldr	r3, [pc, #292]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ee      	beq.n	80049d8 <HAL_RCC_OscConfig+0x334>
 80049fa:	e014      	b.n	8004a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fd fa0c 	bl	8001e18 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fd fa08 	bl	8001e18 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0b5      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ee      	bne.n	8004a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d105      	bne.n	8004a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2c:	4b39      	ldr	r3, [pc, #228]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a1 	beq.w	8004b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a42:	4b34      	ldr	r3, [pc, #208]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d05c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d141      	bne.n	8004ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4b31      	ldr	r3, [pc, #196]	@ (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7fd f9dc 	bl	8001e18 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fd f9d8 	bl	8001e18 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e087      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	491b      	ldr	r1, [pc, #108]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aac:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd f9b1 	bl	8001e18 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd f9ad 	bl	8001e18 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e05c      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x416>
 8004ad8:	e054      	b.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fd f99a 	bl	8001e18 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fd f996 	bl	8001e18 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e045      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x444>
 8004b06:	e03d      	b.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e038      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40007000 	.word	0x40007000
 8004b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d121      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cc      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b68      	ldr	r3, [pc, #416]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d90c      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b65      	ldr	r3, [pc, #404]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a58      	ldr	r2, [pc, #352]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a52      	ldr	r2, [pc, #328]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d044      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b3f      	ldr	r3, [pc, #252]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3b      	ldr	r3, [pc, #236]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e067      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b37      	ldr	r3, [pc, #220]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4934      	ldr	r1, [pc, #208]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fd f8c8 	bl	8001e18 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fd f8c4 	bl	8001e18 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e04f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20c      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b22      	ldr	r3, [pc, #136]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d06:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	490a      	ldr	r1, [pc, #40]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	5ccb      	ldrb	r3, [r1, r3]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	@ (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fd f828 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
 8004d54:	0800cf54 	.word	0x0800cf54
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	20000010 	.word	0x20000010

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b094      	sub	sp, #80	@ 0x50
 8004d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d78:	4b79      	ldr	r3, [pc, #484]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x40>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	f200 80e1 	bhi.w	8004f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d92:	e0db      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d98:	e0db      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d9a:	4b73      	ldr	r3, [pc, #460]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d9e:	e0d8      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004daa:	4b6d      	ldr	r3, [pc, #436]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d063      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	f04f 0100 	mov.w	r1, #0
 8004dde:	0159      	lsls	r1, r3, #5
 8004de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de4:	0150      	lsls	r0, r2, #5
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4621      	mov	r1, r4
 8004dec:	1a51      	subs	r1, r2, r1
 8004dee:	6139      	str	r1, [r7, #16]
 8004df0:	4629      	mov	r1, r5
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e04:	4659      	mov	r1, fp
 8004e06:	018b      	lsls	r3, r1, #6
 8004e08:	4651      	mov	r1, sl
 8004e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0e:	4651      	mov	r1, sl
 8004e10:	018a      	lsls	r2, r1, #6
 8004e12:	4651      	mov	r1, sl
 8004e14:	ebb2 0801 	subs.w	r8, r2, r1
 8004e18:	4659      	mov	r1, fp
 8004e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e32:	4690      	mov	r8, r2
 8004e34:	4699      	mov	r9, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	eb18 0303 	adds.w	r3, r8, r3
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	462b      	mov	r3, r5
 8004e40:	eb49 0303 	adc.w	r3, r9, r3
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e52:	4629      	mov	r1, r5
 8004e54:	024b      	lsls	r3, r1, #9
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	024a      	lsls	r2, r1, #9
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e66:	2200      	movs	r2, #0
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e70:	f7fb fe9a 	bl	8000ba8 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7c:	e058      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7e:	4b38      	ldr	r3, [pc, #224]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	2200      	movs	r2, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	4611      	mov	r1, r2
 8004e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	0159      	lsls	r1, r3, #5
 8004ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eaa:	0150      	lsls	r0, r2, #5
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	00eb      	lsls	r3, r5, #3
 8004ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee6:	00e2      	lsls	r2, r4, #3
 8004ee8:	4614      	mov	r4, r2
 8004eea:	461d      	mov	r5, r3
 8004eec:	4643      	mov	r3, r8
 8004eee:	18e3      	adds	r3, r4, r3
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	eb45 0303 	adc.w	r3, r5, r3
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f06:	4629      	mov	r1, r5
 8004f08:	028b      	lsls	r3, r1, #10
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f10:	4621      	mov	r1, r4
 8004f12:	028a      	lsls	r2, r1, #10
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	61fa      	str	r2, [r7, #28]
 8004f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f24:	f7fb fe40 	bl	8000ba8 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f4a:	e002      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3750      	adds	r7, #80	@ 0x50
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00f42400 	.word	0x00f42400
 8004f68:	007a1200 	.word	0x007a1200

08004f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f70:	4b03      	ldr	r3, [pc, #12]	@ (8004f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	2000000c 	.word	0x2000000c

08004f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e07b      	b.n	800508e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d108      	bne.n	8004fb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa6:	d009      	beq.n	8004fbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	61da      	str	r2, [r3, #28]
 8004fae:	e005      	b.n	8004fbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc fb80 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005040:	ea42 0103 	orr.w	r1, r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0104 	and.w	r1, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	f003 0210 	and.w	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800507c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b088      	sub	sp, #32
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a6:	f7fc feb7 	bl	8001e18 <HAL_GetTick>
 80050aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	e12a      	b.n	8005316 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_SPI_Transmit+0x36>
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e122      	b.n	8005316 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Transmit+0x48>
 80050da:	2302      	movs	r3, #2
 80050dc:	e11b      	b.n	8005316 <HAL_SPI_Transmit+0x280>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2203      	movs	r2, #3
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800512c:	d10f      	bne.n	800514e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800513c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800514c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b40      	cmp	r3, #64	@ 0x40
 800515a:	d007      	beq.n	800516c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005174:	d152      	bne.n	800521c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_SPI_Transmit+0xee>
 800517e:	8b7b      	ldrh	r3, [r7, #26]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d145      	bne.n	8005210 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	881a      	ldrh	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	1c9a      	adds	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051a8:	e032      	b.n	8005210 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d112      	bne.n	80051de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051dc:	e018      	b.n	8005210 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051de:	f7fc fe1b 	bl	8001e18 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d803      	bhi.n	80051f6 <HAL_SPI_Transmit+0x160>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d102      	bne.n	80051fc <HAL_SPI_Transmit+0x166>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e082      	b.n	8005316 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1c7      	bne.n	80051aa <HAL_SPI_Transmit+0x114>
 800521a:	e053      	b.n	80052c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit+0x194>
 8005224:	8b7b      	ldrh	r3, [r7, #26]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d147      	bne.n	80052ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005250:	e033      	b.n	80052ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d113      	bne.n	8005288 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005286:	e018      	b.n	80052ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005288:	f7fc fdc6 	bl	8001e18 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d803      	bhi.n	80052a0 <HAL_SPI_Transmit+0x20a>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d102      	bne.n	80052a6 <HAL_SPI_Transmit+0x210>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e02d      	b.n	8005316 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1c6      	bne.n	8005252 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fbd9 	bl	8005a80 <SPI_EndRxTxTransaction>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005314:	2300      	movs	r3, #0
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af02      	add	r7, sp, #8
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d001      	beq.n	800533e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
 800533c:	e104      	b.n	8005548 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_SPI_Receive+0x2c>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e0fc      	b.n	8005548 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005356:	d112      	bne.n	800537e <HAL_SPI_Receive+0x60>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10e      	bne.n	800537e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2204      	movs	r2, #4
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f8eb 	bl	8005550 <HAL_SPI_TransmitReceive>
 800537a:	4603      	mov	r3, r0
 800537c:	e0e4      	b.n	8005548 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800537e:	f7fc fd4b 	bl	8001e18 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_SPI_Receive+0x74>
 800538e:	2302      	movs	r3, #2
 8005390:	e0da      	b.n	8005548 <HAL_SPI_Receive+0x22a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2204      	movs	r2, #4
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	88fa      	ldrh	r2, [r7, #6]
 80053b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e0:	d10f      	bne.n	8005402 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005400:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b40      	cmp	r3, #64	@ 0x40
 800540e:	d007      	beq.n	8005420 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800541e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d170      	bne.n	800550a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005428:	e035      	b.n	8005496 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d115      	bne.n	8005464 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f103 020c 	add.w	r2, r3, #12
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005462:	e018      	b.n	8005496 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005464:	f7fc fcd8 	bl	8001e18 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d803      	bhi.n	800547c <HAL_SPI_Receive+0x15e>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d102      	bne.n	8005482 <HAL_SPI_Receive+0x164>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e058      	b.n	8005548 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1c4      	bne.n	800542a <HAL_SPI_Receive+0x10c>
 80054a0:	e038      	b.n	8005514 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d113      	bne.n	80054d8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	b292      	uxth	r2, r2
 80054bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054d6:	e018      	b.n	800550a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d8:	f7fc fc9e 	bl	8001e18 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d803      	bhi.n	80054f0 <HAL_SPI_Receive+0x1d2>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d102      	bne.n	80054f6 <HAL_SPI_Receive+0x1d8>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e01e      	b.n	8005548 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1c6      	bne.n	80054a2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fa4b 	bl	80059b4 <SPI_EndRxTransaction>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005546:	2300      	movs	r3, #0
  }
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	@ 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800555e:	2301      	movs	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005562:	f7fc fc59 	bl	8001e18 <HAL_GetTick>
 8005566:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800556e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800557a:	7ffb      	ldrb	r3, [r7, #31]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d00c      	beq.n	800559a <HAL_SPI_TransmitReceive+0x4a>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005586:	d106      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x46>
 8005590:	7ffb      	ldrb	r3, [r7, #31]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d001      	beq.n	800559a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005596:	2302      	movs	r3, #2
 8005598:	e17f      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x5c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x5c>
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e174      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_SPI_TransmitReceive+0x6e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e16d      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d003      	beq.n	80055da <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2205      	movs	r2, #5
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	887a      	ldrh	r2, [r7, #2]
 80055ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	887a      	ldrh	r2, [r7, #2]
 8005602:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561a:	2b40      	cmp	r3, #64	@ 0x40
 800561c:	d007      	beq.n	800562e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800562c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005636:	d17e      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_SPI_TransmitReceive+0xf6>
 8005640:	8afb      	ldrh	r3, [r7, #22]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d16c      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	1c9a      	adds	r2, r3, #2
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800566a:	e059      	b.n	8005720 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d11b      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x162>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d016      	beq.n	80056b2 <HAL_SPI_TransmitReceive+0x162>
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	2b01      	cmp	r3, #1
 8005688:	d113      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d119      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x1a4>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d014      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	b292      	uxth	r2, r2
 80056d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056f0:	2301      	movs	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056f4:	f7fc fb90 	bl	8001e18 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005700:	429a      	cmp	r2, r3
 8005702:	d80d      	bhi.n	8005720 <HAL_SPI_TransmitReceive+0x1d0>
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d009      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e0bc      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1a0      	bne.n	800566c <HAL_SPI_TransmitReceive+0x11c>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d19b      	bne.n	800566c <HAL_SPI_TransmitReceive+0x11c>
 8005734:	e082      	b.n	800583c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_TransmitReceive+0x1f4>
 800573e:	8afb      	ldrh	r3, [r7, #22]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d171      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576a:	e05d      	b.n	8005828 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d11c      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x264>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d017      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x264>
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b01      	cmp	r3, #1
 8005788:	d114      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d119      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x2a6>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d014      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057f2:	2301      	movs	r3, #1
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057f6:	f7fc fb0f 	bl	8001e18 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005802:	429a      	cmp	r2, r3
 8005804:	d803      	bhi.n	800580e <HAL_SPI_TransmitReceive+0x2be>
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d102      	bne.n	8005814 <HAL_SPI_TransmitReceive+0x2c4>
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e038      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d19c      	bne.n	800576c <HAL_SPI_TransmitReceive+0x21c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d197      	bne.n	800576c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f91d 	bl	8005a80 <SPI_EndRxTxTransaction>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e01d      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005898:	2300      	movs	r3, #0
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	@ 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058b4:	f7fc fab0 	bl	8001e18 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	4413      	add	r3, r2
 80058c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058c4:	f7fc faa8 	bl	8001e18 <HAL_GetTick>
 80058c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ca:	4b39      	ldr	r3, [pc, #228]	@ (80059b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	015b      	lsls	r3, r3, #5
 80058d0:	0d1b      	lsrs	r3, r3, #20
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058da:	e055      	b.n	8005988 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d051      	beq.n	8005988 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058e4:	f7fc fa98 	bl	8001e18 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d902      	bls.n	80058fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d13d      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005912:	d111      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800591c:	d004      	beq.n	8005928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005926:	d107      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005940:	d10f      	bne.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e018      	b.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e002      	b.n	8005988 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3b01      	subs	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	429a      	cmp	r2, r3
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d19a      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	2000000c 	.word	0x2000000c

080059b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059c8:	d111      	bne.n	80059ee <SPI_EndRxTransaction+0x3a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d2:	d004      	beq.n	80059de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059dc:	d107      	bne.n	80059ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f6:	d12a      	bne.n	8005a4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a00:	d012      	beq.n	8005a28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff ff49 	bl	80058a4 <SPI_WaitFlagStateUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02d      	beq.n	8005a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e026      	b.n	8005a76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2101      	movs	r1, #1
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff ff36 	bl	80058a4 <SPI_WaitFlagStateUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01a      	beq.n	8005a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e013      	b.n	8005a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2101      	movs	r1, #1
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff ff23 	bl	80058a4 <SPI_WaitFlagStateUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e000      	b.n	8005a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2201      	movs	r2, #1
 8005a94:	2102      	movs	r1, #2
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff ff04 	bl	80058a4 <SPI_WaitFlagStateUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa6:	f043 0220 	orr.w	r2, r3, #32
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e032      	b.n	8005b18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b20 <SPI_EndRxTxTransaction+0xa0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <SPI_EndRxTxTransaction+0xa4>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	0d5b      	lsrs	r3, r3, #21
 8005abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad0:	d112      	bne.n	8005af8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2180      	movs	r1, #128	@ 0x80
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff fee1 	bl	80058a4 <SPI_WaitFlagStateUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d016      	beq.n	8005b16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e00f      	b.n	8005b18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b80      	cmp	r3, #128	@ 0x80
 8005b10:	d0f2      	beq.n	8005af8 <SPI_EndRxTxTransaction+0x78>
 8005b12:	e000      	b.n	8005b16 <SPI_EndRxTxTransaction+0x96>
        break;
 8005b14:	bf00      	nop
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	2000000c 	.word	0x2000000c
 8005b24:	165e9f81 	.word	0x165e9f81

08005b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e041      	b.n	8005bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb fe0c 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f000 faac 	bl	80060c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e04e      	b.n	8005c7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a23      	ldr	r2, [pc, #140]	@ (8005c8c <HAL_TIM_Base_Start_IT+0xc4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0a:	d01d      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	@ (8005c90 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c94 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a19      	ldr	r2, [pc, #100]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a18      	ldr	r2, [pc, #96]	@ (8005ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d111      	bne.n	8005c6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d010      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6a:	e007      	b.n	8005c7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40010400 	.word	0x40010400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40001800 	.word	0x40001800

08005ca8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10f      	bne.n	8005cf0 <HAL_TIM_Base_Stop_IT+0x48>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01b      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0202 	mvn.w	r2, #2
 8005d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f999 	bl	8006088 <HAL_TIM_IC_CaptureCallback>
 8005d56:	e005      	b.n	8005d64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f98b 	bl	8006074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f99c 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01b      	beq.n	8005db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0204 	mvn.w	r2, #4
 8005d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f973 	bl	8006088 <HAL_TIM_IC_CaptureCallback>
 8005da2:	e005      	b.n	8005db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f965 	bl	8006074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f976 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01b      	beq.n	8005e02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f06f 0208 	mvn.w	r2, #8
 8005dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f94d 	bl	8006088 <HAL_TIM_IC_CaptureCallback>
 8005dee:	e005      	b.n	8005dfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f93f 	bl	8006074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f950 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d020      	beq.n	8005e4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01b      	beq.n	8005e4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0210 	mvn.w	r2, #16
 8005e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2208      	movs	r2, #8
 8005e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f927 	bl	8006088 <HAL_TIM_IC_CaptureCallback>
 8005e3a:	e005      	b.n	8005e48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f919 	bl	8006074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f92a 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00c      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f06f 0201 	mvn.w	r2, #1
 8005e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fb fb7b 	bl	8001568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00c      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fadd 	bl	8006450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8fb 	bl	80060b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00c      	beq.n	8005ede <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0220 	mvn.w	r2, #32
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 faaf 	bl	800643c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_ConfigClockSource+0x1c>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e0b4      	b.n	800606c <HAL_TIM_ConfigClockSource+0x186>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3a:	d03e      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xd4>
 8005f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f40:	f200 8087 	bhi.w	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f48:	f000 8086 	beq.w	8006058 <HAL_TIM_ConfigClockSource+0x172>
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f50:	d87f      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f52:	2b70      	cmp	r3, #112	@ 0x70
 8005f54:	d01a      	beq.n	8005f8c <HAL_TIM_ConfigClockSource+0xa6>
 8005f56:	2b70      	cmp	r3, #112	@ 0x70
 8005f58:	d87b      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f5a:	2b60      	cmp	r3, #96	@ 0x60
 8005f5c:	d050      	beq.n	8006000 <HAL_TIM_ConfigClockSource+0x11a>
 8005f5e:	2b60      	cmp	r3, #96	@ 0x60
 8005f60:	d877      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f62:	2b50      	cmp	r3, #80	@ 0x50
 8005f64:	d03c      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0xfa>
 8005f66:	2b50      	cmp	r3, #80	@ 0x50
 8005f68:	d873      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6a:	2b40      	cmp	r3, #64	@ 0x40
 8005f6c:	d058      	beq.n	8006020 <HAL_TIM_ConfigClockSource+0x13a>
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d86f      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f72:	2b30      	cmp	r3, #48	@ 0x30
 8005f74:	d064      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x15a>
 8005f76:	2b30      	cmp	r3, #48	@ 0x30
 8005f78:	d86b      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d060      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d867      	bhi.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d05c      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x15a>
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d05a      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x15a>
 8005f8a:	e062      	b.n	8006052 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f9c:	f000 f9b2 	bl	8006304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]
      break;
 8005fb8:	e04f      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fca:	f000 f99b 	bl	8006304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fdc:	609a      	str	r2, [r3, #8]
      break;
 8005fde:	e03c      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fec:	461a      	mov	r2, r3
 8005fee:	f000 f90f 	bl	8006210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2150      	movs	r1, #80	@ 0x50
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 f968 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 8005ffe:	e02c      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600c:	461a      	mov	r2, r3
 800600e:	f000 f92e 	bl	800626e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2160      	movs	r1, #96	@ 0x60
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f958 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 800601e:	e01c      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602c:	461a      	mov	r2, r3
 800602e:	f000 f8ef 	bl	8006210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2140      	movs	r1, #64	@ 0x40
 8006038:	4618      	mov	r0, r3
 800603a:	f000 f948 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 800603e:	e00c      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f000 f93f 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 8006050:	e003      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
      break;
 8006056:	e000      	b.n	800605a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006058:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a43      	ldr	r2, [pc, #268]	@ (80061e4 <TIM_Base_SetConfig+0x120>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <TIM_Base_SetConfig+0x40>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e2:	d00f      	beq.n	8006104 <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a40      	ldr	r2, [pc, #256]	@ (80061e8 <TIM_Base_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	@ (80061ec <TIM_Base_SetConfig+0x128>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a3e      	ldr	r2, [pc, #248]	@ (80061f0 <TIM_Base_SetConfig+0x12c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0x40>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a3d      	ldr	r2, [pc, #244]	@ (80061f4 <TIM_Base_SetConfig+0x130>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a32      	ldr	r2, [pc, #200]	@ (80061e4 <TIM_Base_SetConfig+0x120>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d02b      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006124:	d027      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2f      	ldr	r2, [pc, #188]	@ (80061e8 <TIM_Base_SetConfig+0x124>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d023      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2e      	ldr	r2, [pc, #184]	@ (80061ec <TIM_Base_SetConfig+0x128>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01f      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2d      	ldr	r2, [pc, #180]	@ (80061f0 <TIM_Base_SetConfig+0x12c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01b      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2c      	ldr	r2, [pc, #176]	@ (80061f4 <TIM_Base_SetConfig+0x130>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d017      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2b      	ldr	r2, [pc, #172]	@ (80061f8 <TIM_Base_SetConfig+0x134>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2a      	ldr	r2, [pc, #168]	@ (80061fc <TIM_Base_SetConfig+0x138>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a29      	ldr	r2, [pc, #164]	@ (8006200 <TIM_Base_SetConfig+0x13c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a28      	ldr	r2, [pc, #160]	@ (8006204 <TIM_Base_SetConfig+0x140>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a27      	ldr	r2, [pc, #156]	@ (8006208 <TIM_Base_SetConfig+0x144>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a26      	ldr	r2, [pc, #152]	@ (800620c <TIM_Base_SetConfig+0x148>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d108      	bne.n	8006188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800617c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a0e      	ldr	r2, [pc, #56]	@ (80061e4 <TIM_Base_SetConfig+0x120>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_Base_SetConfig+0xf2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a10      	ldr	r2, [pc, #64]	@ (80061f4 <TIM_Base_SetConfig+0x130>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d103      	bne.n	80061be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f043 0204 	orr.w	r2, r3, #4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800
 8006204:	40001800 	.word	0x40001800
 8006208:	40001c00 	.word	0x40001c00
 800620c:	40002000 	.word	0x40002000

08006210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800623a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 030a 	bic.w	r3, r3, #10
 800624c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f023 0210 	bic.w	r2, r3, #16
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	031b      	lsls	r3, r3, #12
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f043 0307 	orr.w	r3, r3, #7
 80062f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800631e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	021a      	lsls	r2, r3, #8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	431a      	orrs	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006358:	2302      	movs	r3, #2
 800635a:	e05a      	b.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a21      	ldr	r2, [pc, #132]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a8:	d01d      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a17      	ldr	r2, [pc, #92]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a15      	ldr	r2, [pc, #84]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10c      	bne.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40010400 	.word	0x40010400
 8006434:	40014000 	.word	0x40014000
 8006438:	40001800 	.word	0x40001800

0800643c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006464:	b084      	sub	sp, #16
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	f107 001c 	add.w	r0, r7, #28
 8006472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006476:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800647a:	2b01      	cmp	r3, #1
 800647c:	d123      	bne.n	80064c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fae8 	bl	8007a90 <USB_CoreReset>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
 80064c4:	e01b      	b.n	80064fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 fadc 	bl	8007a90 <USB_CoreReset>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80064f0:	e005      	b.n	80064fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064fe:	7fbb      	ldrb	r3, [r7, #30]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10b      	bne.n	800651c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f043 0206 	orr.w	r2, r3, #6
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr

0800652c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d165      	bne.n	800660c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a41      	ldr	r2, [pc, #260]	@ (8006648 <USB_SetTurnaroundTime+0x11c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d906      	bls.n	8006556 <USB_SetTurnaroundTime+0x2a>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a40      	ldr	r2, [pc, #256]	@ (800664c <USB_SetTurnaroundTime+0x120>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d202      	bcs.n	8006556 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006550:	230f      	movs	r3, #15
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e062      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a3c      	ldr	r2, [pc, #240]	@ (800664c <USB_SetTurnaroundTime+0x120>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d306      	bcc.n	800656c <USB_SetTurnaroundTime+0x40>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a3b      	ldr	r2, [pc, #236]	@ (8006650 <USB_SetTurnaroundTime+0x124>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d202      	bcs.n	800656c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006566:	230e      	movs	r3, #14
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e057      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a38      	ldr	r2, [pc, #224]	@ (8006650 <USB_SetTurnaroundTime+0x124>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d306      	bcc.n	8006582 <USB_SetTurnaroundTime+0x56>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a37      	ldr	r2, [pc, #220]	@ (8006654 <USB_SetTurnaroundTime+0x128>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d202      	bcs.n	8006582 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800657c:	230d      	movs	r3, #13
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e04c      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a33      	ldr	r2, [pc, #204]	@ (8006654 <USB_SetTurnaroundTime+0x128>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d306      	bcc.n	8006598 <USB_SetTurnaroundTime+0x6c>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4a32      	ldr	r2, [pc, #200]	@ (8006658 <USB_SetTurnaroundTime+0x12c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d802      	bhi.n	8006598 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006592:	230c      	movs	r3, #12
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e041      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a2f      	ldr	r2, [pc, #188]	@ (8006658 <USB_SetTurnaroundTime+0x12c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d906      	bls.n	80065ae <USB_SetTurnaroundTime+0x82>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a2e      	ldr	r2, [pc, #184]	@ (800665c <USB_SetTurnaroundTime+0x130>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d802      	bhi.n	80065ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065a8:	230b      	movs	r3, #11
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e036      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <USB_SetTurnaroundTime+0x130>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d906      	bls.n	80065c4 <USB_SetTurnaroundTime+0x98>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a29      	ldr	r2, [pc, #164]	@ (8006660 <USB_SetTurnaroundTime+0x134>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d802      	bhi.n	80065c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065be:	230a      	movs	r3, #10
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e02b      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a26      	ldr	r2, [pc, #152]	@ (8006660 <USB_SetTurnaroundTime+0x134>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d906      	bls.n	80065da <USB_SetTurnaroundTime+0xae>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a25      	ldr	r2, [pc, #148]	@ (8006664 <USB_SetTurnaroundTime+0x138>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d202      	bcs.n	80065da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065d4:	2309      	movs	r3, #9
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e020      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4a21      	ldr	r2, [pc, #132]	@ (8006664 <USB_SetTurnaroundTime+0x138>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d306      	bcc.n	80065f0 <USB_SetTurnaroundTime+0xc4>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4a20      	ldr	r2, [pc, #128]	@ (8006668 <USB_SetTurnaroundTime+0x13c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d802      	bhi.n	80065f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065ea:	2308      	movs	r3, #8
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e015      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006668 <USB_SetTurnaroundTime+0x13c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d906      	bls.n	8006606 <USB_SetTurnaroundTime+0xda>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a1c      	ldr	r2, [pc, #112]	@ (800666c <USB_SetTurnaroundTime+0x140>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d202      	bcs.n	8006606 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006600:	2307      	movs	r3, #7
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e00a      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006606:	2306      	movs	r3, #6
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e007      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006612:	2309      	movs	r3, #9
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e001      	b.n	800661c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006618:	2309      	movs	r3, #9
 800661a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	029b      	lsls	r3, r3, #10
 8006630:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006634:	431a      	orrs	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	00d8acbf 	.word	0x00d8acbf
 800664c:	00e4e1c0 	.word	0x00e4e1c0
 8006650:	00f42400 	.word	0x00f42400
 8006654:	01067380 	.word	0x01067380
 8006658:	011a499f 	.word	0x011a499f
 800665c:	01312cff 	.word	0x01312cff
 8006660:	014ca43f 	.word	0x014ca43f
 8006664:	016e3600 	.word	0x016e3600
 8006668:	01a6ab1f 	.word	0x01a6ab1f
 800666c:	01e84800 	.word	0x01e84800

08006670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d115      	bne.n	8006702 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066e2:	200a      	movs	r0, #10
 80066e4:	f7fb fba4 	bl	8001e30 <HAL_Delay>
      ms += 10U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	330a      	adds	r3, #10
 80066ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 f93f 	bl	8007972 <USB_GetMode>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d01e      	beq.n	8006738 <USB_SetCurrentMode+0x84>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80066fe:	d9f0      	bls.n	80066e2 <USB_SetCurrentMode+0x2e>
 8006700:	e01a      	b.n	8006738 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006714:	200a      	movs	r0, #10
 8006716:	f7fb fb8b 	bl	8001e30 <HAL_Delay>
      ms += 10U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	330a      	adds	r3, #10
 800671e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 f926 	bl	8007972 <USB_GetMode>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <USB_SetCurrentMode+0x84>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006730:	d9f0      	bls.n	8006714 <USB_SetCurrentMode+0x60>
 8006732:	e001      	b.n	8006738 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e005      	b.n	8006744 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2bc8      	cmp	r3, #200	@ 0xc8
 800673c:	d101      	bne.n	8006742 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800674c:	b084      	sub	sp, #16
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800675a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e009      	b.n	8006780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	3340      	adds	r3, #64	@ 0x40
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	2200      	movs	r2, #0
 8006778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3301      	adds	r3, #1
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b0e      	cmp	r3, #14
 8006784:	d9f2      	bls.n	800676c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006786:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11c      	bne.n	80067c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800679c:	f043 0302 	orr.w	r3, r3, #2
 80067a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80067c6:	e00b      	b.n	80067e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067e6:	461a      	mov	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10d      	bne.n	8006810 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f968 	bl	8006ad4 <USB_SetDevSpeed>
 8006804:	e008      	b.n	8006818 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f963 	bl	8006ad4 <USB_SetDevSpeed>
 800680e:	e003      	b.n	8006818 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006810:	2103      	movs	r1, #3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f95e 	bl	8006ad4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006818:	2110      	movs	r1, #16
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8fa 	bl	8006a14 <USB_FlushTxFifo>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f924 	bl	8006a78 <USB_FlushRxFifo>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006840:	461a      	mov	r2, r3
 8006842:	2300      	movs	r3, #0
 8006844:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006858:	461a      	mov	r2, r3
 800685a:	2300      	movs	r3, #0
 800685c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	e043      	b.n	80068ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800687a:	d118      	bne.n	80068ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688e:	461a      	mov	r2, r3
 8006890:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e013      	b.n	80068c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	461a      	mov	r2, r3
 80068a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	e008      	b.n	80068c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ba:	461a      	mov	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068de:	461a      	mov	r2, r3
 80068e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3301      	adds	r3, #1
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068f0:	461a      	mov	r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d3b5      	bcc.n	8006864 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	e043      	b.n	8006986 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006914:	d118      	bne.n	8006948 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006928:	461a      	mov	r2, r3
 800692a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e013      	b.n	800695a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	461a      	mov	r2, r3
 8006940:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e008      	b.n	800695a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006966:	461a      	mov	r2, r3
 8006968:	2300      	movs	r3, #0
 800696a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006978:	461a      	mov	r2, r3
 800697a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800697e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3301      	adds	r3, #1
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800698a:	461a      	mov	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	4293      	cmp	r3, r2
 8006990:	d3b5      	bcc.n	80068fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80069b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f043 0210 	orr.w	r2, r3, #16
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	4b10      	ldr	r3, [pc, #64]	@ (8006a10 <USB_DevInit+0x2c4>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f043 0208 	orr.w	r2, r3, #8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d107      	bne.n	8006a00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069f8:	f043 0304 	orr.w	r3, r3, #4
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a0c:	b004      	add	sp, #16
 8006a0e:	4770      	bx	lr
 8006a10:	803c3800 	.word	0x803c3800

08006a14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3301      	adds	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a2e:	d901      	bls.n	8006a34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e01b      	b.n	8006a6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	daf2      	bge.n	8006a22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	019b      	lsls	r3, r3, #6
 8006a44:	f043 0220 	orr.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a58:	d901      	bls.n	8006a5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e006      	b.n	8006a6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d0f0      	beq.n	8006a4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a90:	d901      	bls.n	8006a96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e018      	b.n	8006ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	daf2      	bge.n	8006a84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ab4:	d901      	bls.n	8006aba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e006      	b.n	8006ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d0f0      	beq.n	8006aa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b087      	sub	sp, #28
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0306 	and.w	r3, r3, #6
 8006b1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b26:	2300      	movs	r3, #0
 8006b28:	75fb      	strb	r3, [r7, #23]
 8006b2a:	e00a      	b.n	8006b42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d002      	beq.n	8006b38 <USB_GetDevSpeed+0x32>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b06      	cmp	r3, #6
 8006b36:	d102      	bne.n	8006b3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	75fb      	strb	r3, [r7, #23]
 8006b3c:	e001      	b.n	8006b42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b3e:	230f      	movs	r3, #15
 8006b40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d13a      	bne.n	8006be2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	68f9      	ldr	r1, [r7, #12]
 8006b86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d155      	bne.n	8006c50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	791b      	ldrb	r3, [r3, #4]
 8006bbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	059b      	lsls	r3, r3, #22
 8006bc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	e036      	b.n	8006c50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be8:	69da      	ldr	r2, [r3, #28]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d11a      	bne.n	8006c50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	791b      	ldrb	r3, [r3, #4]
 8006c34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c36:	430b      	orrs	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
	...

08006c60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d161      	bne.n	8006d40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c92:	d11f      	bne.n	8006cd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	68f9      	ldr	r1, [r7, #12]
 8006cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	2101      	movs	r1, #1
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d18:	4013      	ands	r3, r2
 8006d1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	0159      	lsls	r1, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	440b      	add	r3, r1
 8006d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d36:	4619      	mov	r1, r3
 8006d38:	4b35      	ldr	r3, [pc, #212]	@ (8006e10 <USB_DeactivateEndpoint+0x1b0>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	600b      	str	r3, [r1, #0]
 8006d3e:	e060      	b.n	8006e02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d56:	d11f      	bne.n	8006d98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	2101      	movs	r1, #1
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	43db      	mvns	r3, r3
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db8:	4013      	ands	r3, r2
 8006dba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc2:	69da      	ldr	r2, [r3, #28]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	2101      	movs	r1, #1
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ddc:	4013      	ands	r3, r2
 8006dde:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	0159      	lsls	r1, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	440b      	add	r3, r1
 8006df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <USB_DeactivateEndpoint+0x1b4>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	ec337800 	.word	0xec337800
 8006e14:	eff37800 	.word	0xeff37800

08006e18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	@ 0x28
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 817f 	bne.w	8007138 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d132      	bne.n	8006ea8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea0:	0cdb      	lsrs	r3, r3, #19
 8006ea2:	04db      	lsls	r3, r3, #19
 8006ea4:	6113      	str	r3, [r2, #16]
 8006ea6:	e097      	b.n	8006fd8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec2:	0cdb      	lsrs	r3, r3, #19
 8006ec4:	04db      	lsls	r3, r3, #19
 8006ec6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ee6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006eea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11a      	bne.n	8006f28 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d903      	bls.n	8006f06 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f24:	6113      	str	r3, [r2, #16]
 8006f26:	e044      	b.n	8006fb2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	1e5a      	subs	r2, r3, #1
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	8afb      	ldrh	r3, [r7, #22]
 8006f4e:	04d9      	lsls	r1, r3, #19
 8006f50:	4ba4      	ldr	r3, [pc, #656]	@ (80071e4 <USB_EPStartXfer+0x3cc>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	0148      	lsls	r0, r1, #5
 8006f58:	69f9      	ldr	r1, [r7, #28]
 8006f5a:	4401      	add	r1, r0
 8006f5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f60:	4313      	orrs	r3, r2
 8006f62:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	791b      	ldrb	r3, [r3, #4]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d122      	bne.n	8006fb2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f86:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f8a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	8afb      	ldrh	r3, [r7, #22]
 8006f9c:	075b      	lsls	r3, r3, #29
 8006f9e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006fa2:	69b9      	ldr	r1, [r7, #24]
 8006fa4:	0148      	lsls	r0, r1, #5
 8006fa6:	69f9      	ldr	r1, [r7, #28]
 8006fa8:	4401      	add	r1, r0
 8006faa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc8:	69b9      	ldr	r1, [r7, #24]
 8006fca:	0148      	lsls	r0, r1, #5
 8006fcc:	69f9      	ldr	r1, [r7, #28]
 8006fce:	4401      	add	r1, r0
 8006fd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d14b      	bne.n	8007076 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d128      	bne.n	8007054 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d110      	bne.n	8007034 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800702c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e00f      	b.n	8007054 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007052:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800706e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e166      	b.n	8007344 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007090:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007094:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	791b      	ldrb	r3, [r3, #4]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d015      	beq.n	80070ca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 814e 	beq.w	8007344 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	2101      	movs	r1, #1
 80070ba:	fa01 f303 	lsl.w	r3, r1, r3
 80070be:	69f9      	ldr	r1, [r7, #28]
 80070c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070c4:	4313      	orrs	r3, r2
 80070c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80070c8:	e13c      	b.n	8007344 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d110      	bne.n	80070fc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e00f      	b.n	800711c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800711a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68d9      	ldr	r1, [r3, #12]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	b298      	uxth	r0, r3
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	4603      	mov	r3, r0
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f9b9 	bl	80074a8 <USB_WritePacket>
 8007136:	e105      	b.n	8007344 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007152:	0cdb      	lsrs	r3, r3, #19
 8007154:	04db      	lsls	r3, r3, #19
 8007156:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007172:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007176:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800717a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d132      	bne.n	80071e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b0:	69b9      	ldr	r1, [r7, #24]
 80071b2:	0148      	lsls	r0, r1, #5
 80071b4:	69f9      	ldr	r1, [r7, #28]
 80071b6:	4401      	add	r1, r0
 80071b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071bc:	4313      	orrs	r3, r2
 80071be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071de:	6113      	str	r3, [r2, #16]
 80071e0:	e062      	b.n	80072a8 <USB_EPStartXfer+0x490>
 80071e2:	bf00      	nop
 80071e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d123      	bne.n	8007238 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fc:	691a      	ldr	r2, [r3, #16]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007206:	69b9      	ldr	r1, [r7, #24]
 8007208:	0148      	lsls	r0, r1, #5
 800720a:	69f9      	ldr	r1, [r7, #28]
 800720c:	4401      	add	r1, r0
 800720e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007212:	4313      	orrs	r3, r2
 8007214:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007230:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007234:	6113      	str	r3, [r2, #16]
 8007236:	e037      	b.n	80072a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4413      	add	r3, r2
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	8afa      	ldrh	r2, [r7, #22]
 8007254:	fb03 f202 	mul.w	r2, r3, r2
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	8afb      	ldrh	r3, [r7, #22]
 800726c:	04d9      	lsls	r1, r3, #19
 800726e:	4b38      	ldr	r3, [pc, #224]	@ (8007350 <USB_EPStartXfer+0x538>)
 8007270:	400b      	ands	r3, r1
 8007272:	69b9      	ldr	r1, [r7, #24]
 8007274:	0148      	lsls	r0, r1, #5
 8007276:	69f9      	ldr	r1, [r7, #28]
 8007278:	4401      	add	r1, r0
 800727a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800727e:	4313      	orrs	r3, r2
 8007280:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d10d      	bne.n	80072ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	68d9      	ldr	r1, [r3, #12]
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	460a      	mov	r2, r1
 80072c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d128      	bne.n	8007324 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d110      	bne.n	8007304 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e00f      	b.n	8007324 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800731e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007322:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800733e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	1ff80000 	.word	0x1ff80000

08007354 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d14a      	bne.n	8007408 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007386:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800738a:	f040 8086 	bne.w	800749a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	7812      	ldrb	r2, [r2, #0]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d902      	bls.n	80073ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
          break;
 80073ea:	e056      	b.n	800749a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007404:	d0e7      	beq.n	80073d6 <USB_EPStopXfer+0x82>
 8007406:	e048      	b.n	800749a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800741c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007420:	d13b      	bne.n	800749a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007440:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007444:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007468:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007476:	4293      	cmp	r3, r2
 8007478:	d902      	bls.n	8007480 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
          break;
 800747e:	e00c      	b.n	800749a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007494:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007498:	d0e7      	beq.n	800746a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
}
 800749c:	4618      	mov	r0, r3
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b089      	sub	sp, #36	@ 0x24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	4611      	mov	r1, r2
 80074b4:	461a      	mov	r2, r3
 80074b6:	460b      	mov	r3, r1
 80074b8:	71fb      	strb	r3, [r7, #7]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d123      	bne.n	8007516 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074ce:	88bb      	ldrh	r3, [r7, #4]
 80074d0:	3303      	adds	r3, #3
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	e018      	b.n	800750e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	031a      	lsls	r2, r3, #12
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074e8:	461a      	mov	r2, r3
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	3301      	adds	r3, #1
 80074fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	3301      	adds	r3, #1
 8007500:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	3301      	adds	r3, #1
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	429a      	cmp	r2, r3
 8007514:	d3e2      	bcc.n	80074dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3724      	adds	r7, #36	@ 0x24
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007524:	b480      	push	{r7}
 8007526:	b08b      	sub	sp, #44	@ 0x2c
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	089b      	lsrs	r3, r3, #2
 800753e:	b29b      	uxth	r3, r3
 8007540:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	f003 0303 	and.w	r3, r3, #3
 8007548:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800754a:	2300      	movs	r3, #0
 800754c:	623b      	str	r3, [r7, #32]
 800754e:	e014      	b.n	800757a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	601a      	str	r2, [r3, #0]
    pDest++;
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	3301      	adds	r3, #1
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	3301      	adds	r3, #1
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756a:	3301      	adds	r3, #1
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	3301      	adds	r3, #1
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	3301      	adds	r3, #1
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	6a3a      	ldr	r2, [r7, #32]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	429a      	cmp	r2, r3
 8007580:	d3e6      	bcc.n	8007550 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007582:	8bfb      	ldrh	r3, [r7, #30]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01e      	beq.n	80075c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007592:	461a      	mov	r2, r3
 8007594:	f107 0310 	add.w	r3, r7, #16
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	fa22 f303 	lsr.w	r3, r2, r3
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	701a      	strb	r2, [r3, #0]
      i++;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	3301      	adds	r3, #1
 80075b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	3301      	adds	r3, #1
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075ba:	8bfb      	ldrh	r3, [r7, #30]
 80075bc:	3b01      	subs	r3, #1
 80075be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075c0:	8bfb      	ldrh	r3, [r7, #30]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1ea      	bne.n	800759c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	372c      	adds	r7, #44	@ 0x2c
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d12c      	bne.n	800764a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	db12      	blt.n	8007628 <USB_EPSetStall+0x54>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00f      	beq.n	8007628 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007622:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007626:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007642:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	e02b      	b.n	80076a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	db12      	blt.n	8007682 <USB_EPSetStall+0xae>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00f      	beq.n	8007682 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800767c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007680:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d128      	bne.n	800771e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	791b      	ldrb	r3, [r3, #4]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d003      	beq.n	80076fc <USB_EPClearStall+0x4c>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	791b      	ldrb	r3, [r3, #4]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d138      	bne.n	800776e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	e027      	b.n	800776e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007738:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800773c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d003      	beq.n	800774e <USB_EPClearStall+0x9e>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	791b      	ldrb	r3, [r3, #4]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d10f      	bne.n	800776e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800776c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800779a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800779e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80077b0:	68f9      	ldr	r1, [r7, #12]
 80077b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b6:	4313      	orrs	r3, r2
 80077b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077f6:	f023 0302 	bic.w	r3, r3, #2
 80077fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007838:	f043 0302 	orr.w	r3, r3, #2
 800783c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4013      	ands	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	4013      	ands	r3, r2
 8007894:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	0c1b      	lsrs	r3, r3, #16
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	4013      	ands	r3, r2
 80078c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	b29b      	uxth	r3, r3
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	4013      	ands	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007908:	68bb      	ldr	r3, [r7, #8]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007916:	b480      	push	{r7}
 8007918:	b087      	sub	sp, #28
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007938:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	01db      	lsls	r3, r3, #7
 8007948:	b2db      	uxtb	r3, r3
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4013      	ands	r3, r2
 8007962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007964:	68bb      	ldr	r3, [r7, #8]
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f003 0301 	and.w	r3, r3, #1
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800798e:	b480      	push	{r7}
 8007990:	b085      	sub	sp, #20
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80079ac:	f023 0307 	bic.w	r3, r3, #7
 80079b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	460b      	mov	r3, r1
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	333c      	adds	r3, #60	@ 0x3c
 80079ea:	3304      	adds	r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4a26      	ldr	r2, [pc, #152]	@ (8007a8c <USB_EP0_OutStart+0xb8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d90a      	bls.n	8007a0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a08:	d101      	bne.n	8007a0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e037      	b.n	8007a7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a3c:	f043 0318 	orr.w	r3, r3, #24
 8007a40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a50:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d10f      	bne.n	8007a7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a76:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	4f54300a 	.word	0x4f54300a

08007a90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aa8:	d901      	bls.n	8007aae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e022      	b.n	8007af4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	daf2      	bge.n	8007a9c <USB_CoreReset+0xc>

  count = 10U;
 8007ab6:	230a      	movs	r3, #10
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007aba:	e002      	b.n	8007ac2 <USB_CoreReset+0x32>
  {
    count--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f9      	bne.n	8007abc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f043 0201 	orr.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ae0:	d901      	bls.n	8007ae6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e006      	b.n	8007af4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d0f0      	beq.n	8007ad4 <USB_CoreReset+0x44>

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b10:	f002 fd20 	bl	800a554 <USBD_static_malloc>
 8007b14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32b0      	adds	r2, #176	@ 0xb0
 8007b26:	2100      	movs	r1, #0
 8007b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e0d4      	b.n	8007cda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b34:	2100      	movs	r1, #0
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f003 faab 	bl	800b092 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	32b0      	adds	r2, #176	@ 0xb0
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32b0      	adds	r2, #176	@ 0xb0
 8007b56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7c1b      	ldrb	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d138      	bne.n	8007bda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b68:	4b5e      	ldr	r3, [pc, #376]	@ (8007ce4 <USBD_CDC_Init+0x1e4>)
 8007b6a:	7819      	ldrb	r1, [r3, #0]
 8007b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b70:	2202      	movs	r2, #2
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f002 fbcb 	bl	800a30e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ce4 <USBD_CDC_Init+0x1e4>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	3323      	adds	r3, #35	@ 0x23
 8007b8e:	2201      	movs	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b92:	4b55      	ldr	r3, [pc, #340]	@ (8007ce8 <USBD_CDC_Init+0x1e8>)
 8007b94:	7819      	ldrb	r1, [r3, #0]
 8007b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f002 fbb6 	bl	800a30e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ba2:	4b51      	ldr	r3, [pc, #324]	@ (8007ce8 <USBD_CDC_Init+0x1e8>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 020f 	and.w	r2, r3, #15
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007bba:	2201      	movs	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8007cec <USBD_CDC_Init+0x1ec>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	331c      	adds	r3, #28
 8007bd4:	2210      	movs	r2, #16
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e035      	b.n	8007c46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bda:	4b42      	ldr	r3, [pc, #264]	@ (8007ce4 <USBD_CDC_Init+0x1e4>)
 8007bdc:	7819      	ldrb	r1, [r3, #0]
 8007bde:	2340      	movs	r3, #64	@ 0x40
 8007be0:	2202      	movs	r2, #2
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f002 fb93 	bl	800a30e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007be8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce4 <USBD_CDC_Init+0x1e4>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3323      	adds	r3, #35	@ 0x23
 8007bfe:	2201      	movs	r2, #1
 8007c00:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c02:	4b39      	ldr	r3, [pc, #228]	@ (8007ce8 <USBD_CDC_Init+0x1e8>)
 8007c04:	7819      	ldrb	r1, [r3, #0]
 8007c06:	2340      	movs	r3, #64	@ 0x40
 8007c08:	2202      	movs	r2, #2
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f002 fb7f 	bl	800a30e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c10:	4b35      	ldr	r3, [pc, #212]	@ (8007ce8 <USBD_CDC_Init+0x1e8>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007c28:	2201      	movs	r2, #1
 8007c2a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007cec <USBD_CDC_Init+0x1ec>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	331c      	adds	r3, #28
 8007c42:	2210      	movs	r2, #16
 8007c44:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c46:	4b29      	ldr	r3, [pc, #164]	@ (8007cec <USBD_CDC_Init+0x1ec>)
 8007c48:	7819      	ldrb	r1, [r3, #0]
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fb5d 	bl	800a30e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c54:	4b25      	ldr	r3, [pc, #148]	@ (8007cec <USBD_CDC_Init+0x1ec>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 020f 	and.w	r2, r3, #15
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	3323      	adds	r3, #35	@ 0x23
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	33b0      	adds	r3, #176	@ 0xb0
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e018      	b.n	8007cda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7c1b      	ldrb	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce8 <USBD_CDC_Init+0x1e8>)
 8007cb2:	7819      	ldrb	r1, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007cba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f002 fc14 	bl	800a4ec <USBD_LL_PrepareReceive>
 8007cc4:	e008      	b.n	8007cd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cc6:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <USBD_CDC_Init+0x1e8>)
 8007cc8:	7819      	ldrb	r1, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007cd0:	2340      	movs	r3, #64	@ 0x40
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f002 fc0a 	bl	800a4ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000009f 	.word	0x2000009f
 8007ce8:	200000a0 	.word	0x200000a0
 8007cec:	200000a1 	.word	0x200000a1

08007cf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8007de8 <USBD_CDC_DeInit+0xf8>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f002 fb29 	bl	800a35a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d08:	4b37      	ldr	r3, [pc, #220]	@ (8007de8 <USBD_CDC_DeInit+0xf8>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f003 020f 	and.w	r2, r3, #15
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	3323      	adds	r3, #35	@ 0x23
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d22:	4b32      	ldr	r3, [pc, #200]	@ (8007dec <USBD_CDC_DeInit+0xfc>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f002 fb16 	bl	800a35a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007dec <USBD_CDC_DeInit+0xfc>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f003 020f 	and.w	r2, r3, #15
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d4a:	4b29      	ldr	r3, [pc, #164]	@ (8007df0 <USBD_CDC_DeInit+0x100>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f002 fb02 	bl	800a35a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d56:	4b26      	ldr	r3, [pc, #152]	@ (8007df0 <USBD_CDC_DeInit+0x100>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f003 020f 	and.w	r2, r3, #15
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	3323      	adds	r3, #35	@ 0x23
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d70:	4b1f      	ldr	r3, [pc, #124]	@ (8007df0 <USBD_CDC_DeInit+0x100>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 020f 	and.w	r2, r3, #15
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	440b      	add	r3, r1
 8007d84:	331c      	adds	r3, #28
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32b0      	adds	r2, #176	@ 0xb0
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01f      	beq.n	8007ddc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	33b0      	adds	r3, #176	@ 0xb0
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	32b0      	adds	r2, #176	@ 0xb0
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f002 fbd6 	bl	800a570 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	32b0      	adds	r2, #176	@ 0xb0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	2000009f 	.word	0x2000009f
 8007dec:	200000a0 	.word	0x200000a0
 8007df0:	200000a1 	.word	0x200000a1

08007df4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	32b0      	adds	r2, #176	@ 0xb0
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e0bf      	b.n	8007fa4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d050      	beq.n	8007ed2 <USBD_CDC_Setup+0xde>
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	f040 80af 	bne.w	8007f94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d03a      	beq.n	8007eb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	b25b      	sxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	da1b      	bge.n	8007e80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	33b0      	adds	r3, #176	@ 0xb0
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	88d2      	ldrh	r2, [r2, #6]
 8007e64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	2b07      	cmp	r3, #7
 8007e6c:	bf28      	it	cs
 8007e6e:	2307      	movcs	r3, #7
 8007e70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	89fa      	ldrh	r2, [r7, #14]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fda9 	bl	80099d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e7e:	e090      	b.n	8007fa2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	785a      	ldrb	r2, [r3, #1]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	88db      	ldrh	r3, [r3, #6]
 8007e8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e90:	d803      	bhi.n	8007e9a <USBD_CDC_Setup+0xa6>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	88db      	ldrh	r3, [r3, #6]
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	e000      	b.n	8007e9c <USBD_CDC_Setup+0xa8>
 8007e9a:	2240      	movs	r2, #64	@ 0x40
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ea2:	6939      	ldr	r1, [r7, #16]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 fdbe 	bl	8009a2e <USBD_CtlPrepareRx>
      break;
 8007eb2:	e076      	b.n	8007fa2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	33b0      	adds	r3, #176	@ 0xb0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	7850      	ldrb	r0, [r2, #1]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	4798      	blx	r3
      break;
 8007ed0:	e067      	b.n	8007fa2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b0b      	cmp	r3, #11
 8007ed8:	d851      	bhi.n	8007f7e <USBD_CDC_Setup+0x18a>
 8007eda:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee0 <USBD_CDC_Setup+0xec>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007f11 	.word	0x08007f11
 8007ee4:	08007f8d 	.word	0x08007f8d
 8007ee8:	08007f7f 	.word	0x08007f7f
 8007eec:	08007f7f 	.word	0x08007f7f
 8007ef0:	08007f7f 	.word	0x08007f7f
 8007ef4:	08007f7f 	.word	0x08007f7f
 8007ef8:	08007f7f 	.word	0x08007f7f
 8007efc:	08007f7f 	.word	0x08007f7f
 8007f00:	08007f7f 	.word	0x08007f7f
 8007f04:	08007f7f 	.word	0x08007f7f
 8007f08:	08007f3b 	.word	0x08007f3b
 8007f0c:	08007f65 	.word	0x08007f65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d107      	bne.n	8007f2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f1c:	f107 030a 	add.w	r3, r7, #10
 8007f20:	2202      	movs	r2, #2
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fd53 	bl	80099d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f2a:	e032      	b.n	8007f92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fcd1 	bl	80098d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	75fb      	strb	r3, [r7, #23]
          break;
 8007f38:	e02b      	b.n	8007f92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d107      	bne.n	8007f56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f46:	f107 030d 	add.w	r3, r7, #13
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fd3e 	bl	80099d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f54:	e01d      	b.n	8007f92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 fcbc 	bl	80098d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	75fb      	strb	r3, [r7, #23]
          break;
 8007f62:	e016      	b.n	8007f92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d00f      	beq.n	8007f90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fcaf 	bl	80098d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f7c:	e008      	b.n	8007f90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fca8 	bl	80098d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8a:	e002      	b.n	8007f92 <USBD_CDC_Setup+0x19e>
          break;
 8007f8c:	bf00      	nop
 8007f8e:	e008      	b.n	8007fa2 <USBD_CDC_Setup+0x1ae>
          break;
 8007f90:	bf00      	nop
      }
      break;
 8007f92:	e006      	b.n	8007fa2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fc9d 	bl	80098d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	32b0      	adds	r2, #176	@ 0xb0
 8007fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e065      	b.n	80080a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	32b0      	adds	r2, #176	@ 0xb0
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	f003 020f 	and.w	r2, r3, #15
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d02f      	beq.n	8008060 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	f003 020f 	and.w	r2, r3, #15
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	3314      	adds	r3, #20
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	f003 010f 	and.w	r1, r3, #15
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	460b      	mov	r3, r1
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	440b      	add	r3, r1
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4403      	add	r3, r0
 8008028:	331c      	adds	r3, #28
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008036:	2b00      	cmp	r3, #0
 8008038:	d112      	bne.n	8008060 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	f003 020f 	and.w	r2, r3, #15
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	3314      	adds	r3, #20
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008052:	78f9      	ldrb	r1, [r7, #3]
 8008054:	2300      	movs	r3, #0
 8008056:	2200      	movs	r2, #0
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f002 fa26 	bl	800a4aa <USBD_LL_Transmit>
 800805e:	e01f      	b.n	80080a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	33b0      	adds	r3, #176	@ 0xb0
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d010      	beq.n	80080a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	33b0      	adds	r3, #176	@ 0xb0
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	32b0      	adds	r2, #176	@ 0xb0
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	32b0      	adds	r2, #176	@ 0xb0
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080d8:	2303      	movs	r3, #3
 80080da:	e01a      	b.n	8008112 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f002 fa24 	bl	800a52e <USBD_LL_GetRxDataSize>
 80080e6:	4602      	mov	r2, r0
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	33b0      	adds	r3, #176	@ 0xb0
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800810c:	4611      	mov	r1, r2
 800810e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	32b0      	adds	r2, #176	@ 0xb0
 800812c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008130:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008138:	2303      	movs	r3, #3
 800813a:	e024      	b.n	8008186 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	33b0      	adds	r3, #176	@ 0xb0
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d019      	beq.n	8008184 <USBD_CDC_EP0_RxReady+0x6a>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008156:	2bff      	cmp	r3, #255	@ 0xff
 8008158:	d014      	beq.n	8008184 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	33b0      	adds	r3, #176	@ 0xb0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008172:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800817a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	22ff      	movs	r2, #255	@ 0xff
 8008180:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008198:	2182      	movs	r1, #130	@ 0x82
 800819a:	4818      	ldr	r0, [pc, #96]	@ (80081fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800819c:	f000 fd62 	bl	8008c64 <USBD_GetEpDesc>
 80081a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081a2:	2101      	movs	r1, #1
 80081a4:	4815      	ldr	r0, [pc, #84]	@ (80081fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081a6:	f000 fd5d 	bl	8008c64 <USBD_GetEpDesc>
 80081aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081ac:	2181      	movs	r1, #129	@ 0x81
 80081ae:	4813      	ldr	r0, [pc, #76]	@ (80081fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081b0:	f000 fd58 	bl	8008c64 <USBD_GetEpDesc>
 80081b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2210      	movs	r2, #16
 80081c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d006      	beq.n	80081d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081d0:	711a      	strb	r2, [r3, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d006      	beq.n	80081ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081e4:	711a      	strb	r2, [r3, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2243      	movs	r2, #67	@ 0x43
 80081ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081f0:	4b02      	ldr	r3, [pc, #8]	@ (80081fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000005c 	.word	0x2000005c

08008200 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008208:	2182      	movs	r1, #130	@ 0x82
 800820a:	4818      	ldr	r0, [pc, #96]	@ (800826c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800820c:	f000 fd2a 	bl	8008c64 <USBD_GetEpDesc>
 8008210:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008212:	2101      	movs	r1, #1
 8008214:	4815      	ldr	r0, [pc, #84]	@ (800826c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008216:	f000 fd25 	bl	8008c64 <USBD_GetEpDesc>
 800821a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800821c:	2181      	movs	r1, #129	@ 0x81
 800821e:	4813      	ldr	r0, [pc, #76]	@ (800826c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008220:	f000 fd20 	bl	8008c64 <USBD_GetEpDesc>
 8008224:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2210      	movs	r2, #16
 8008230:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2200      	movs	r2, #0
 800823c:	711a      	strb	r2, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f042 0202 	orr.w	r2, r2, #2
 8008244:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d006      	beq.n	800825a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f042 0202 	orr.w	r2, r2, #2
 8008258:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2243      	movs	r2, #67	@ 0x43
 800825e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008260:	4b02      	ldr	r3, [pc, #8]	@ (800826c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	2000005c 	.word	0x2000005c

08008270 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008278:	2182      	movs	r1, #130	@ 0x82
 800827a:	4818      	ldr	r0, [pc, #96]	@ (80082dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800827c:	f000 fcf2 	bl	8008c64 <USBD_GetEpDesc>
 8008280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008282:	2101      	movs	r1, #1
 8008284:	4815      	ldr	r0, [pc, #84]	@ (80082dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008286:	f000 fced 	bl	8008c64 <USBD_GetEpDesc>
 800828a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800828c:	2181      	movs	r1, #129	@ 0x81
 800828e:	4813      	ldr	r0, [pc, #76]	@ (80082dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008290:	f000 fce8 	bl	8008c64 <USBD_GetEpDesc>
 8008294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2210      	movs	r2, #16
 80082a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b0:	711a      	strb	r2, [r3, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082c4:	711a      	strb	r2, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2243      	movs	r2, #67	@ 0x43
 80082ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d0:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	2000005c 	.word	0x2000005c

080082e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220a      	movs	r2, #10
 80082ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082ee:	4b03      	ldr	r3, [pc, #12]	@ (80082fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000018 	.word	0x20000018

08008300 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e009      	b.n	8008328 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	33b0      	adds	r3, #176	@ 0xb0
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	32b0      	adds	r2, #176	@ 0xb0
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008356:	2303      	movs	r3, #3
 8008358:	e008      	b.n	800836c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	32b0      	adds	r2, #176	@ 0xb0
 800838c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008390:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008398:	2303      	movs	r3, #3
 800839a:	e004      	b.n	80083a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
	...

080083b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	32b0      	adds	r2, #176	@ 0xb0
 80083c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e025      	b.n	8008426 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11f      	bne.n	8008424 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083ec:	4b10      	ldr	r3, [pc, #64]	@ (8008430 <USBD_CDC_TransmitPacket+0x7c>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4403      	add	r3, r0
 8008406:	3314      	adds	r3, #20
 8008408:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800840a:	4b09      	ldr	r3, [pc, #36]	@ (8008430 <USBD_CDC_TransmitPacket+0x7c>)
 800840c:	7819      	ldrb	r1, [r3, #0]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f002 f845 	bl	800a4aa <USBD_LL_Transmit>

    ret = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	2000009f 	.word	0x2000009f

08008434 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32b0      	adds	r2, #176	@ 0xb0
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	32b0      	adds	r2, #176	@ 0xb0
 8008456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	e018      	b.n	8008494 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7c1b      	ldrb	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800846a:	4b0c      	ldr	r3, [pc, #48]	@ (800849c <USBD_CDC_ReceivePacket+0x68>)
 800846c:	7819      	ldrb	r1, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f002 f837 	bl	800a4ec <USBD_LL_PrepareReceive>
 800847e:	e008      	b.n	8008492 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008480:	4b06      	ldr	r3, [pc, #24]	@ (800849c <USBD_CDC_ReceivePacket+0x68>)
 8008482:	7819      	ldrb	r1, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800848a:	2340      	movs	r3, #64	@ 0x40
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f002 f82d 	bl	800a4ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200000a0 	.word	0x200000a0

080084a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e01f      	b.n	80084f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	79fa      	ldrb	r2, [r7, #7]
 80084ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f001 fea7 	bl	800a240 <USBD_LL_Init>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	e025      	b.n	8008564 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32ae      	adds	r2, #174	@ 0xae
 800852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00f      	beq.n	8008554 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32ae      	adds	r2, #174	@ 0xae
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	f107 020e 	add.w	r2, r7, #14
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	4602      	mov	r2, r0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 feaf 	bl	800a2d8 <USBD_LL_Start>
 800857a:	4603      	mov	r3, r0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	78fa      	ldrb	r2, [r7, #3]
 80085be:	4611      	mov	r1, r2
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085f8:	2303      	movs	r3, #3
 80085fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f001 f922 	bl	8009862 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800862c:	461a      	mov	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	2b02      	cmp	r3, #2
 8008640:	d01a      	beq.n	8008678 <USBD_LL_SetupStage+0x72>
 8008642:	2b02      	cmp	r3, #2
 8008644:	d822      	bhi.n	800868c <USBD_LL_SetupStage+0x86>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <USBD_LL_SetupStage+0x4a>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d00a      	beq.n	8008664 <USBD_LL_SetupStage+0x5e>
 800864e:	e01d      	b.n	800868c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fb77 	bl	8008d4c <USBD_StdDevReq>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
      break;
 8008662:	e020      	b.n	80086a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fbdf 	bl	8008e30 <USBD_StdItfReq>
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
      break;
 8008676:	e016      	b.n	80086a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc41 	bl	8008f08 <USBD_StdEPReq>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e00c      	b.n	80086a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008692:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008696:	b2db      	uxtb	r3, r3
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fe7c 	bl	800a398 <USBD_LL_StallEP>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73fb      	strb	r3, [r7, #15]
      break;
 80086a4:	bf00      	nop
  }

  return ret;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	460b      	mov	r3, r1
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d177      	bne.n	80087b8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	f040 80a1 	bne.w	800881e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	8992      	ldrh	r2, [r2, #12]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d91c      	bls.n	8008722 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	8992      	ldrh	r2, [r2, #12]
 80086f0:	1a9a      	subs	r2, r3, r2
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	8992      	ldrh	r2, [r2, #12]
 80086fe:	441a      	add	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6919      	ldr	r1, [r3, #16]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	899b      	ldrh	r3, [r3, #12]
 800870c:	461a      	mov	r2, r3
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	4293      	cmp	r3, r2
 8008714:	bf38      	it	cc
 8008716:	4613      	movcc	r3, r2
 8008718:	461a      	mov	r2, r3
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f001 f9a8 	bl	8009a70 <USBD_CtlContinueRx>
 8008720:	e07d      	b.n	800881e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2b02      	cmp	r3, #2
 800872e:	d014      	beq.n	800875a <USBD_LL_DataOutStage+0xaa>
 8008730:	2b02      	cmp	r3, #2
 8008732:	d81d      	bhi.n	8008770 <USBD_LL_DataOutStage+0xc0>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <USBD_LL_DataOutStage+0x8e>
 8008738:	2b01      	cmp	r3, #1
 800873a:	d003      	beq.n	8008744 <USBD_LL_DataOutStage+0x94>
 800873c:	e018      	b.n	8008770 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	75bb      	strb	r3, [r7, #22]
            break;
 8008742:	e018      	b.n	8008776 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800874a:	b2db      	uxtb	r3, r3
 800874c:	4619      	mov	r1, r3
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fa6e 	bl	8008c30 <USBD_CoreFindIF>
 8008754:	4603      	mov	r3, r0
 8008756:	75bb      	strb	r3, [r7, #22]
            break;
 8008758:	e00d      	b.n	8008776 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4619      	mov	r1, r3
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fa70 	bl	8008c4a <USBD_CoreFindEP>
 800876a:	4603      	mov	r3, r0
 800876c:	75bb      	strb	r3, [r7, #22]
            break;
 800876e:	e002      	b.n	8008776 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	75bb      	strb	r3, [r7, #22]
            break;
 8008774:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008776:	7dbb      	ldrb	r3, [r7, #22]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d119      	bne.n	80087b0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b03      	cmp	r3, #3
 8008786:	d113      	bne.n	80087b0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008788:	7dba      	ldrb	r2, [r7, #22]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	32ae      	adds	r2, #174	@ 0xae
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008798:	7dba      	ldrb	r2, [r7, #22]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087a0:	7dba      	ldrb	r2, [r7, #22]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	32ae      	adds	r2, #174	@ 0xae
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f001 f96e 	bl	8009a92 <USBD_CtlSendStatus>
 80087b6:	e032      	b.n	800881e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	4619      	mov	r1, r3
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 fa41 	bl	8008c4a <USBD_CoreFindEP>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087cc:	7dbb      	ldrb	r3, [r7, #22]
 80087ce:	2bff      	cmp	r3, #255	@ 0xff
 80087d0:	d025      	beq.n	800881e <USBD_LL_DataOutStage+0x16e>
 80087d2:	7dbb      	ldrb	r3, [r7, #22]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d122      	bne.n	800881e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d117      	bne.n	8008814 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087e4:	7dba      	ldrb	r2, [r7, #22]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	32ae      	adds	r2, #174	@ 0xae
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00f      	beq.n	8008814 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80087f4:	7dba      	ldrb	r2, [r7, #22]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087fc:	7dba      	ldrb	r2, [r7, #22]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	32ae      	adds	r2, #174	@ 0xae
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	7afa      	ldrb	r2, [r7, #11]
 800880a:	4611      	mov	r1, r2
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	e000      	b.n	8008820 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	460b      	mov	r3, r1
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008836:	7afb      	ldrb	r3, [r7, #11]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d178      	bne.n	800892e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3314      	adds	r3, #20
 8008840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008848:	2b02      	cmp	r3, #2
 800884a:	d163      	bne.n	8008914 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	8992      	ldrh	r2, [r2, #12]
 8008854:	4293      	cmp	r3, r2
 8008856:	d91c      	bls.n	8008892 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	8992      	ldrh	r2, [r2, #12]
 8008860:	1a9a      	subs	r2, r3, r2
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	8992      	ldrh	r2, [r2, #12]
 800886e:	441a      	add	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6919      	ldr	r1, [r3, #16]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	461a      	mov	r2, r3
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f8c4 	bl	8009a0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f001 fe2e 	bl	800a4ec <USBD_LL_PrepareReceive>
 8008890:	e040      	b.n	8008914 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	899b      	ldrh	r3, [r3, #12]
 8008896:	461a      	mov	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d11c      	bne.n	80088da <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d316      	bcc.n	80088da <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d20f      	bcs.n	80088da <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088ba:	2200      	movs	r2, #0
 80088bc:	2100      	movs	r1, #0
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f001 f8a4 	bl	8009a0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f001 fe0a 	bl	800a4ec <USBD_LL_PrepareReceive>
 80088d8:	e01c      	b.n	8008914 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d10f      	bne.n	8008906 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008906:	2180      	movs	r1, #128	@ 0x80
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f001 fd45 	bl	800a398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f001 f8d2 	bl	8009ab8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d03a      	beq.n	8008994 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fe30 	bl	8008584 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800892c:	e032      	b.n	8008994 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008934:	b2db      	uxtb	r3, r3
 8008936:	4619      	mov	r1, r3
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f986 	bl	8008c4a <USBD_CoreFindEP>
 800893e:	4603      	mov	r3, r0
 8008940:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	2bff      	cmp	r3, #255	@ 0xff
 8008946:	d025      	beq.n	8008994 <USBD_LL_DataInStage+0x16c>
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d122      	bne.n	8008994 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b03      	cmp	r3, #3
 8008958:	d11c      	bne.n	8008994 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800895a:	7dfa      	ldrb	r2, [r7, #23]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	32ae      	adds	r2, #174	@ 0xae
 8008960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d014      	beq.n	8008994 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800896a:	7dfa      	ldrb	r2, [r7, #23]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008972:	7dfa      	ldrb	r2, [r7, #23]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	32ae      	adds	r2, #174	@ 0xae
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	7afa      	ldrb	r2, [r7, #11]
 8008980:	4611      	mov	r1, r2
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	4798      	blx	r3
 8008986:	4603      	mov	r3, r0
 8008988:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800898a:	7dbb      	ldrb	r3, [r7, #22]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008990:	7dbb      	ldrb	r3, [r7, #22]
 8008992:	e000      	b.n	8008996 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d014      	beq.n	8008a04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00e      	beq.n	8008a04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6852      	ldr	r2, [r2, #4]
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	4611      	mov	r1, r2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a00:	2303      	movs	r3, #3
 8008a02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	2200      	movs	r2, #0
 8008a08:	2100      	movs	r1, #0
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fc7f 	bl	800a30e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2240      	movs	r2, #64	@ 0x40
 8008a1c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a20:	2340      	movs	r3, #64	@ 0x40
 8008a22:	2200      	movs	r2, #0
 8008a24:	2180      	movs	r1, #128	@ 0x80
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 fc71 	bl	800a30e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2240      	movs	r2, #64	@ 0x40
 8008a38:	841a      	strh	r2, [r3, #32]

  return ret;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d006      	beq.n	8008a86 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d106      	bne.n	8008abe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d110      	bne.n	8008b02 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00b      	beq.n	8008b02 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	@ 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e01c      	b.n	8008b68 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d115      	bne.n	8008b66 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	32ae      	adds	r2, #174	@ 0xae
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	32ae      	adds	r2, #174	@ 0xae
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	4611      	mov	r1, r2
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32ae      	adds	r2, #174	@ 0xae
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e01c      	b.n	8008bcc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d115      	bne.n	8008bca <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	32ae      	adds	r2, #174	@ 0xae
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	32ae      	adds	r2, #174	@ 0xae
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00e      	beq.n	8008c26 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	6852      	ldr	r2, [r2, #4]
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	4611      	mov	r1, r2
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c22:	2303      	movs	r3, #3
 8008c24:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	885b      	ldrh	r3, [r3, #2]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	7812      	ldrb	r2, [r2, #0]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d91f      	bls.n	8008cca <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c90:	e013      	b.n	8008cba <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c92:	f107 030a 	add.w	r3, r7, #10
 8008c96:	4619      	mov	r1, r3
 8008c98:	6978      	ldr	r0, [r7, #20]
 8008c9a:	f000 f81b 	bl	8008cd4 <USBD_GetNextDesc>
 8008c9e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b05      	cmp	r3, #5
 8008ca6:	d108      	bne.n	8008cba <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	789b      	ldrb	r3, [r3, #2]
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d008      	beq.n	8008cc8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	885b      	ldrh	r3, [r3, #2]
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	897b      	ldrh	r3, [r7, #10]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d8e5      	bhi.n	8008c92 <USBD_GetEpDesc+0x2e>
 8008cc6:	e000      	b.n	8008cca <USBD_GetEpDesc+0x66>
          break;
 8008cc8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008cca:	693b      	ldr	r3, [r7, #16]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	7812      	ldrb	r2, [r2, #0]
 8008cea:	4413      	add	r3, r2
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	3301      	adds	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008d2e:	021b      	lsls	r3, r3, #8
 8008d30:	b21a      	sxth	r2, r3
 8008d32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	b21b      	sxth	r3, r3
 8008d3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d62:	2b40      	cmp	r3, #64	@ 0x40
 8008d64:	d005      	beq.n	8008d72 <USBD_StdDevReq+0x26>
 8008d66:	2b40      	cmp	r3, #64	@ 0x40
 8008d68:	d857      	bhi.n	8008e1a <USBD_StdDevReq+0xce>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00f      	beq.n	8008d8e <USBD_StdDevReq+0x42>
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d153      	bne.n	8008e1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	32ae      	adds	r2, #174	@ 0xae
 8008d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8c:	e04a      	b.n	8008e24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d83b      	bhi.n	8008e0e <USBD_StdDevReq+0xc2>
 8008d96:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <USBD_StdDevReq+0x50>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008df1 	.word	0x08008df1
 8008da0:	08008e05 	.word	0x08008e05
 8008da4:	08008e0f 	.word	0x08008e0f
 8008da8:	08008dfb 	.word	0x08008dfb
 8008dac:	08008e0f 	.word	0x08008e0f
 8008db0:	08008dcf 	.word	0x08008dcf
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008e0f 	.word	0x08008e0f
 8008dbc:	08008de7 	.word	0x08008de7
 8008dc0:	08008dd9 	.word	0x08008dd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa3e 	bl	8009248 <USBD_GetDescriptor>
          break;
 8008dcc:	e024      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fba3 	bl	800951c <USBD_SetAddress>
          break;
 8008dd6:	e01f      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fbe2 	bl	80095a4 <USBD_SetConfig>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]
          break;
 8008de4:	e018      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fc85 	bl	80096f8 <USBD_GetConfig>
          break;
 8008dee:	e013      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fcb6 	bl	8009764 <USBD_GetStatus>
          break;
 8008df8:	e00e      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fce5 	bl	80097cc <USBD_SetFeature>
          break;
 8008e02:	e009      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fd09 	bl	800981e <USBD_ClrFeature>
          break;
 8008e0c:	e004      	b.n	8008e18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fd60 	bl	80098d6 <USBD_CtlError>
          break;
 8008e16:	bf00      	nop
      }
      break;
 8008e18:	e004      	b.n	8008e24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fd5a 	bl	80098d6 <USBD_CtlError>
      break;
 8008e22:	bf00      	nop
  }

  return ret;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop

08008e30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e46:	2b40      	cmp	r3, #64	@ 0x40
 8008e48:	d005      	beq.n	8008e56 <USBD_StdItfReq+0x26>
 8008e4a:	2b40      	cmp	r3, #64	@ 0x40
 8008e4c:	d852      	bhi.n	8008ef4 <USBD_StdItfReq+0xc4>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <USBD_StdItfReq+0x26>
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d14e      	bne.n	8008ef4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d840      	bhi.n	8008ee6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	889b      	ldrh	r3, [r3, #4]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d836      	bhi.n	8008edc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	889b      	ldrh	r3, [r3, #4]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff feda 	bl	8008c30 <USBD_CoreFindIF>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2bff      	cmp	r3, #255	@ 0xff
 8008e84:	d01d      	beq.n	8008ec2 <USBD_StdItfReq+0x92>
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11a      	bne.n	8008ec2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e8c:	7bba      	ldrb	r2, [r7, #14]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	32ae      	adds	r2, #174	@ 0xae
 8008e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00f      	beq.n	8008ebc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e9c:	7bba      	ldrb	r2, [r7, #14]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ea4:	7bba      	ldrb	r2, [r7, #14]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	32ae      	adds	r2, #174	@ 0xae
 8008eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008eba:	e004      	b.n	8008ec6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ec0:	e001      	b.n	8008ec6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	88db      	ldrh	r3, [r3, #6]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d110      	bne.n	8008ef0 <USBD_StdItfReq+0xc0>
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10d      	bne.n	8008ef0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fddc 	bl	8009a92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008eda:	e009      	b.n	8008ef0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fcf9 	bl	80098d6 <USBD_CtlError>
          break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fcf4 	bl	80098d6 <USBD_CtlError>
          break;
 8008eee:	e000      	b.n	8008ef2 <USBD_StdItfReq+0xc2>
          break;
 8008ef0:	bf00      	nop
      }
      break;
 8008ef2:	e004      	b.n	8008efe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fced 	bl	80098d6 <USBD_CtlError>
      break;
 8008efc:	bf00      	nop
  }

  return ret;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	889b      	ldrh	r3, [r3, #4]
 8008f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f24:	2b40      	cmp	r3, #64	@ 0x40
 8008f26:	d007      	beq.n	8008f38 <USBD_StdEPReq+0x30>
 8008f28:	2b40      	cmp	r3, #64	@ 0x40
 8008f2a:	f200 8181 	bhi.w	8009230 <USBD_StdEPReq+0x328>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d02a      	beq.n	8008f88 <USBD_StdEPReq+0x80>
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	f040 817c 	bne.w	8009230 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff fe84 	bl	8008c4a <USBD_CoreFindEP>
 8008f42:	4603      	mov	r3, r0
 8008f44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f46:	7b7b      	ldrb	r3, [r7, #13]
 8008f48:	2bff      	cmp	r3, #255	@ 0xff
 8008f4a:	f000 8176 	beq.w	800923a <USBD_StdEPReq+0x332>
 8008f4e:	7b7b      	ldrb	r3, [r7, #13]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f040 8172 	bne.w	800923a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008f56:	7b7a      	ldrb	r2, [r7, #13]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f5e:	7b7a      	ldrb	r2, [r7, #13]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	32ae      	adds	r2, #174	@ 0xae
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8165 	beq.w	800923a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f70:	7b7a      	ldrb	r2, [r7, #13]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	32ae      	adds	r2, #174	@ 0xae
 8008f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f86:	e158      	b.n	800923a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d008      	beq.n	8008fa2 <USBD_StdEPReq+0x9a>
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	f300 8147 	bgt.w	8009224 <USBD_StdEPReq+0x31c>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 809b 	beq.w	80090d2 <USBD_StdEPReq+0x1ca>
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d03c      	beq.n	800901a <USBD_StdEPReq+0x112>
 8008fa0:	e140      	b.n	8009224 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d002      	beq.n	8008fb4 <USBD_StdEPReq+0xac>
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d016      	beq.n	8008fe0 <USBD_StdEPReq+0xd8>
 8008fb2:	e02c      	b.n	800900e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00d      	beq.n	8008fd6 <USBD_StdEPReq+0xce>
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	2b80      	cmp	r3, #128	@ 0x80
 8008fbe:	d00a      	beq.n	8008fd6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 f9e7 	bl	800a398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fca:	2180      	movs	r1, #128	@ 0x80
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 f9e3 	bl	800a398 <USBD_LL_StallEP>
 8008fd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fd4:	e020      	b.n	8009018 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fc7c 	bl	80098d6 <USBD_CtlError>
              break;
 8008fde:	e01b      	b.n	8009018 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	885b      	ldrh	r3, [r3, #2]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10e      	bne.n	8009006 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <USBD_StdEPReq+0xfe>
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b80      	cmp	r3, #128	@ 0x80
 8008ff2:	d008      	beq.n	8009006 <USBD_StdEPReq+0xfe>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	88db      	ldrh	r3, [r3, #6]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 f9c9 	bl	800a398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fd43 	bl	8009a92 <USBD_CtlSendStatus>

              break;
 800900c:	e004      	b.n	8009018 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc60 	bl	80098d6 <USBD_CtlError>
              break;
 8009016:	bf00      	nop
          }
          break;
 8009018:	e109      	b.n	800922e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d002      	beq.n	800902c <USBD_StdEPReq+0x124>
 8009026:	2b03      	cmp	r3, #3
 8009028:	d016      	beq.n	8009058 <USBD_StdEPReq+0x150>
 800902a:	e04b      	b.n	80090c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <USBD_StdEPReq+0x146>
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b80      	cmp	r3, #128	@ 0x80
 8009036:	d00a      	beq.n	800904e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 f9ab 	bl	800a398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009042:	2180      	movs	r1, #128	@ 0x80
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 f9a7 	bl	800a398 <USBD_LL_StallEP>
 800904a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800904c:	e040      	b.n	80090d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fc40 	bl	80098d6 <USBD_CtlError>
              break;
 8009056:	e03b      	b.n	80090d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	885b      	ldrh	r3, [r3, #2]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d136      	bne.n	80090ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009066:	2b00      	cmp	r3, #0
 8009068:	d004      	beq.n	8009074 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 f9b1 	bl	800a3d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fd0c 	bl	8009a92 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff fde3 	bl	8008c4a <USBD_CoreFindEP>
 8009084:	4603      	mov	r3, r0
 8009086:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009088:	7b7b      	ldrb	r3, [r7, #13]
 800908a:	2bff      	cmp	r3, #255	@ 0xff
 800908c:	d01f      	beq.n	80090ce <USBD_StdEPReq+0x1c6>
 800908e:	7b7b      	ldrb	r3, [r7, #13]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d11c      	bne.n	80090ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009094:	7b7a      	ldrb	r2, [r7, #13]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800909c:	7b7a      	ldrb	r2, [r7, #13]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	32ae      	adds	r2, #174	@ 0xae
 80090a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d010      	beq.n	80090ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090ac:	7b7a      	ldrb	r2, [r7, #13]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	32ae      	adds	r2, #174	@ 0xae
 80090b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090c2:	e004      	b.n	80090ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fc05 	bl	80098d6 <USBD_CtlError>
              break;
 80090cc:	e000      	b.n	80090d0 <USBD_StdEPReq+0x1c8>
              break;
 80090ce:	bf00      	nop
          }
          break;
 80090d0:	e0ad      	b.n	800922e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USBD_StdEPReq+0x1dc>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d033      	beq.n	800914a <USBD_StdEPReq+0x242>
 80090e2:	e099      	b.n	8009218 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <USBD_StdEPReq+0x1f2>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	@ 0x80
 80090ee:	d004      	beq.n	80090fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbef 	bl	80098d6 <USBD_CtlError>
                break;
 80090f8:	e093      	b.n	8009222 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da0b      	bge.n	800911a <USBD_StdEPReq+0x212>
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	3310      	adds	r3, #16
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4413      	add	r3, r2
 8009116:	3304      	adds	r3, #4
 8009118:	e00b      	b.n	8009132 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	4413      	add	r3, r2
 8009130:	3304      	adds	r3, #4
 8009132:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2200      	movs	r2, #0
 8009138:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	330e      	adds	r3, #14
 800913e:	2202      	movs	r2, #2
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fc44 	bl	80099d0 <USBD_CtlSendData>
              break;
 8009148:	e06b      	b.n	8009222 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800914a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914e:	2b00      	cmp	r3, #0
 8009150:	da11      	bge.n	8009176 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	440b      	add	r3, r1
 8009164:	3323      	adds	r3, #35	@ 0x23
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d117      	bne.n	800919c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fbb1 	bl	80098d6 <USBD_CtlError>
                  break;
 8009174:	e055      	b.n	8009222 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fb9e 	bl	80098d6 <USBD_CtlError>
                  break;
 800919a:	e042      	b.n	8009222 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800919c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	da0b      	bge.n	80091bc <USBD_StdEPReq+0x2b4>
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	3310      	adds	r3, #16
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	4413      	add	r3, r2
 80091b8:	3304      	adds	r3, #4
 80091ba:	e00b      	b.n	80091d4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4413      	add	r3, r2
 80091d2:	3304      	adds	r3, #4
 80091d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <USBD_StdEPReq+0x2da>
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	2b80      	cmp	r3, #128	@ 0x80
 80091e0:	d103      	bne.n	80091ea <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2200      	movs	r2, #0
 80091e6:	739a      	strb	r2, [r3, #14]
 80091e8:	e00e      	b.n	8009208 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 f910 	bl	800a414 <USBD_LL_IsStallEP>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2201      	movs	r2, #1
 80091fe:	739a      	strb	r2, [r3, #14]
 8009200:	e002      	b.n	8009208 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	330e      	adds	r3, #14
 800920c:	2202      	movs	r2, #2
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fbdd 	bl	80099d0 <USBD_CtlSendData>
              break;
 8009216:	e004      	b.n	8009222 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fb5b 	bl	80098d6 <USBD_CtlError>
              break;
 8009220:	bf00      	nop
          }
          break;
 8009222:	e004      	b.n	800922e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fb55 	bl	80098d6 <USBD_CtlError>
          break;
 800922c:	bf00      	nop
      }
      break;
 800922e:	e005      	b.n	800923c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb4f 	bl	80098d6 <USBD_CtlError>
      break;
 8009238:	e000      	b.n	800923c <USBD_StdEPReq+0x334>
      break;
 800923a:	bf00      	nop
  }

  return ret;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	885b      	ldrh	r3, [r3, #2]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	b29b      	uxth	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	2b06      	cmp	r3, #6
 800926a:	f200 8128 	bhi.w	80094be <USBD_GetDescriptor+0x276>
 800926e:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <USBD_GetDescriptor+0x2c>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	08009291 	.word	0x08009291
 8009278:	080092a9 	.word	0x080092a9
 800927c:	080092e9 	.word	0x080092e9
 8009280:	080094bf 	.word	0x080094bf
 8009284:	080094bf 	.word	0x080094bf
 8009288:	0800945f 	.word	0x0800945f
 800928c:	0800948b 	.word	0x0800948b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	7c12      	ldrb	r2, [r2, #16]
 800929c:	f107 0108 	add.w	r1, r7, #8
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
      break;
 80092a6:	e112      	b.n	80094ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7c1b      	ldrb	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10d      	bne.n	80092cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	f107 0208 	add.w	r2, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	2202      	movs	r2, #2
 80092c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092ca:	e100      	b.n	80094ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	f107 0208 	add.w	r2, r7, #8
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3301      	adds	r3, #1
 80092e2:	2202      	movs	r2, #2
 80092e4:	701a      	strb	r2, [r3, #0]
      break;
 80092e6:	e0f2      	b.n	80094ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	885b      	ldrh	r3, [r3, #2]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	f200 80ac 	bhi.w	800944c <USBD_GetDescriptor+0x204>
 80092f4:	a201      	add	r2, pc, #4	@ (adr r2, 80092fc <USBD_GetDescriptor+0xb4>)
 80092f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fa:	bf00      	nop
 80092fc:	08009315 	.word	0x08009315
 8009300:	08009349 	.word	0x08009349
 8009304:	0800937d 	.word	0x0800937d
 8009308:	080093b1 	.word	0x080093b1
 800930c:	080093e5 	.word	0x080093e5
 8009310:	08009419 	.word	0x08009419
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	7c12      	ldrb	r2, [r2, #16]
 800932c:	f107 0108 	add.w	r1, r7, #8
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
 8009334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009336:	e091      	b.n	800945c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 facb 	bl	80098d6 <USBD_CtlError>
            err++;
 8009340:	7afb      	ldrb	r3, [r7, #11]
 8009342:	3301      	adds	r3, #1
 8009344:	72fb      	strb	r3, [r7, #11]
          break;
 8009346:	e089      	b.n	800945c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936a:	e077      	b.n	800945c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fab1 	bl	80098d6 <USBD_CtlError>
            err++;
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	3301      	adds	r3, #1
 8009378:	72fb      	strb	r3, [r7, #11]
          break;
 800937a:	e06f      	b.n	800945c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	7c12      	ldrb	r2, [r2, #16]
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939e:	e05d      	b.n	800945c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa97 	bl	80098d6 <USBD_CtlError>
            err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
          break;
 80093ae:	e055      	b.n	800945c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 0108 	add.w	r1, r7, #8
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d2:	e043      	b.n	800945c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa7d 	bl	80098d6 <USBD_CtlError>
            err++;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	3301      	adds	r3, #1
 80093e0:	72fb      	strb	r3, [r7, #11]
          break;
 80093e2:	e03b      	b.n	800945c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009406:	e029      	b.n	800945c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa63 	bl	80098d6 <USBD_CtlError>
            err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
          break;
 8009416:	e021      	b.n	800945c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943a:	e00f      	b.n	800945c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa49 	bl	80098d6 <USBD_CtlError>
            err++;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	3301      	adds	r3, #1
 8009448:	72fb      	strb	r3, [r7, #11]
          break;
 800944a:	e007      	b.n	800945c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa41 	bl	80098d6 <USBD_CtlError>
          err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800945a:	bf00      	nop
      }
      break;
 800945c:	e037      	b.n	80094ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7c1b      	ldrb	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d109      	bne.n	800947a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946e:	f107 0208 	add.w	r2, r7, #8
 8009472:	4610      	mov	r0, r2
 8009474:	4798      	blx	r3
 8009476:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009478:	e029      	b.n	80094ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa2a 	bl	80098d6 <USBD_CtlError>
        err++;
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	3301      	adds	r3, #1
 8009486:	72fb      	strb	r3, [r7, #11]
      break;
 8009488:	e021      	b.n	80094ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	7c1b      	ldrb	r3, [r3, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10d      	bne.n	80094ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949a:	f107 0208 	add.w	r2, r7, #8
 800949e:	4610      	mov	r0, r2
 80094a0:	4798      	blx	r3
 80094a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	2207      	movs	r2, #7
 80094aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ac:	e00f      	b.n	80094ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa10 	bl	80098d6 <USBD_CtlError>
        err++;
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	3301      	adds	r3, #1
 80094ba:	72fb      	strb	r3, [r7, #11]
      break;
 80094bc:	e007      	b.n	80094ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa08 	bl	80098d6 <USBD_CtlError>
      err++;
 80094c6:	7afb      	ldrb	r3, [r7, #11]
 80094c8:	3301      	adds	r3, #1
 80094ca:	72fb      	strb	r3, [r7, #11]
      break;
 80094cc:	bf00      	nop
  }

  if (err != 0U)
 80094ce:	7afb      	ldrb	r3, [r7, #11]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11e      	bne.n	8009512 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	88db      	ldrh	r3, [r3, #6]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d016      	beq.n	800950a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80094dc:	893b      	ldrh	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00e      	beq.n	8009500 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	88da      	ldrh	r2, [r3, #6]
 80094e6:	893b      	ldrh	r3, [r7, #8]
 80094e8:	4293      	cmp	r3, r2
 80094ea:	bf28      	it	cs
 80094ec:	4613      	movcs	r3, r2
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094f2:	893b      	ldrh	r3, [r7, #8]
 80094f4:	461a      	mov	r2, r3
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa69 	bl	80099d0 <USBD_CtlSendData>
 80094fe:	e009      	b.n	8009514 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9e7 	bl	80098d6 <USBD_CtlError>
 8009508:	e004      	b.n	8009514 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fac1 	bl	8009a92 <USBD_CtlSendStatus>
 8009510:	e000      	b.n	8009514 <USBD_GetDescriptor+0x2cc>
    return;
 8009512:	bf00      	nop
  }
}
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop

0800951c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	889b      	ldrh	r3, [r3, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d131      	bne.n	8009592 <USBD_SetAddress+0x76>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	88db      	ldrh	r3, [r3, #6]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d12d      	bne.n	8009592 <USBD_SetAddress+0x76>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	2b7f      	cmp	r3, #127	@ 0x7f
 800953c:	d829      	bhi.n	8009592 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009548:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b03      	cmp	r3, #3
 8009554:	d104      	bne.n	8009560 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f9bc 	bl	80098d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800955e:	e01d      	b.n	800959c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7bfa      	ldrb	r2, [r7, #15]
 8009564:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 ff7d 	bl	800a46c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa8d 	bl	8009a92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d004      	beq.n	8009588 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2202      	movs	r2, #2
 8009582:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009586:	e009      	b.n	800959c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009590:	e004      	b.n	800959c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f99e 	bl	80098d6 <USBD_CtlError>
  }
}
 800959a:	bf00      	nop
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	885b      	ldrh	r3, [r3, #2]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	4b4e      	ldr	r3, [pc, #312]	@ (80096f4 <USBD_SetConfig+0x150>)
 80095ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095bc:	4b4d      	ldr	r3, [pc, #308]	@ (80096f4 <USBD_SetConfig+0x150>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d905      	bls.n	80095d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f985 	bl	80098d6 <USBD_CtlError>
    return USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e08c      	b.n	80096ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d002      	beq.n	80095e2 <USBD_SetConfig+0x3e>
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d029      	beq.n	8009634 <USBD_SetConfig+0x90>
 80095e0:	e075      	b.n	80096ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80095e2:	4b44      	ldr	r3, [pc, #272]	@ (80096f4 <USBD_SetConfig+0x150>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d020      	beq.n	800962c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80095ea:	4b42      	ldr	r3, [pc, #264]	@ (80096f4 <USBD_SetConfig+0x150>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095f4:	4b3f      	ldr	r3, [pc, #252]	@ (80096f4 <USBD_SetConfig+0x150>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7fe ffcd 	bl	800859a <USBD_SetClassConfig>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d008      	beq.n	800961c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f962 	bl	80098d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2202      	movs	r2, #2
 8009616:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800961a:	e065      	b.n	80096e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fa38 	bl	8009a92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2203      	movs	r2, #3
 8009626:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800962a:	e05d      	b.n	80096e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fa30 	bl	8009a92 <USBD_CtlSendStatus>
      break;
 8009632:	e059      	b.n	80096e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009634:	4b2f      	ldr	r3, [pc, #188]	@ (80096f4 <USBD_SetConfig+0x150>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d112      	bne.n	8009662 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009644:	4b2b      	ldr	r3, [pc, #172]	@ (80096f4 <USBD_SetConfig+0x150>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800964e:	4b29      	ldr	r3, [pc, #164]	@ (80096f4 <USBD_SetConfig+0x150>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7fe ffbc 	bl	80085d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa19 	bl	8009a92 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009660:	e042      	b.n	80096e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009662:	4b24      	ldr	r3, [pc, #144]	@ (80096f4 <USBD_SetConfig+0x150>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d02a      	beq.n	80096c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7fe ffaa 	bl	80085d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800967e:	4b1d      	ldr	r3, [pc, #116]	@ (80096f4 <USBD_SetConfig+0x150>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009688:	4b1a      	ldr	r3, [pc, #104]	@ (80096f4 <USBD_SetConfig+0x150>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7fe ff83 	bl	800859a <USBD_SetClassConfig>
 8009694:	4603      	mov	r3, r0
 8009696:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00f      	beq.n	80096be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f918 	bl	80098d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7fe ff8f 	bl	80085d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80096bc:	e014      	b.n	80096e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f9e7 	bl	8009a92 <USBD_CtlSendStatus>
      break;
 80096c4:	e010      	b.n	80096e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f9e3 	bl	8009a92 <USBD_CtlSendStatus>
      break;
 80096cc:	e00c      	b.n	80096e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f900 	bl	80098d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096d6:	4b07      	ldr	r3, [pc, #28]	@ (80096f4 <USBD_SetConfig+0x150>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7fe ff78 	bl	80085d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80096e2:	2303      	movs	r3, #3
 80096e4:	73fb      	strb	r3, [r7, #15]
      break;
 80096e6:	bf00      	nop
  }

  return ret;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	200004fc 	.word	0x200004fc

080096f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	88db      	ldrh	r3, [r3, #6]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d004      	beq.n	8009714 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f8e2 	bl	80098d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009712:	e023      	b.n	800975c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	dc02      	bgt.n	8009726 <USBD_GetConfig+0x2e>
 8009720:	2b00      	cmp	r3, #0
 8009722:	dc03      	bgt.n	800972c <USBD_GetConfig+0x34>
 8009724:	e015      	b.n	8009752 <USBD_GetConfig+0x5a>
 8009726:	2b03      	cmp	r3, #3
 8009728:	d00b      	beq.n	8009742 <USBD_GetConfig+0x4a>
 800972a:	e012      	b.n	8009752 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3308      	adds	r3, #8
 8009736:	2201      	movs	r2, #1
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f948 	bl	80099d0 <USBD_CtlSendData>
        break;
 8009740:	e00c      	b.n	800975c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3304      	adds	r3, #4
 8009746:	2201      	movs	r2, #1
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f940 	bl	80099d0 <USBD_CtlSendData>
        break;
 8009750:	e004      	b.n	800975c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8be 	bl	80098d6 <USBD_CtlError>
        break;
 800975a:	bf00      	nop
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009774:	b2db      	uxtb	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	2b02      	cmp	r3, #2
 800977a:	d81e      	bhi.n	80097ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	88db      	ldrh	r3, [r3, #6]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d004      	beq.n	800978e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f8a5 	bl	80098d6 <USBD_CtlError>
        break;
 800978c:	e01a      	b.n	80097c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f043 0202 	orr.w	r2, r3, #2
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	330c      	adds	r3, #12
 80097ae:	2202      	movs	r2, #2
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f90c 	bl	80099d0 <USBD_CtlSendData>
      break;
 80097b8:	e004      	b.n	80097c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f88a 	bl	80098d6 <USBD_CtlError>
      break;
 80097c2:	bf00      	nop
  }
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	885b      	ldrh	r3, [r3, #2]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d107      	bne.n	80097ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f953 	bl	8009a92 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80097ec:	e013      	b.n	8009816 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	885b      	ldrh	r3, [r3, #2]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d10b      	bne.n	800980e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	889b      	ldrh	r3, [r3, #4]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f943 	bl	8009a92 <USBD_CtlSendStatus>
}
 800980c:	e003      	b.n	8009816 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f860 	bl	80098d6 <USBD_CtlError>
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800982e:	b2db      	uxtb	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	2b02      	cmp	r3, #2
 8009834:	d80b      	bhi.n	800984e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d10c      	bne.n	8009858 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f923 	bl	8009a92 <USBD_CtlSendStatus>
      }
      break;
 800984c:	e004      	b.n	8009858 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f840 	bl	80098d6 <USBD_CtlError>
      break;
 8009856:	e000      	b.n	800985a <USBD_ClrFeature+0x3c>
      break;
 8009858:	bf00      	nop
  }
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781a      	ldrb	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f7ff fa3d 	bl	8008d0c <SWAPBYTE>
 8009892:	4603      	mov	r3, r0
 8009894:	461a      	mov	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3301      	adds	r3, #1
 800989e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3301      	adds	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fa30 	bl	8008d0c <SWAPBYTE>
 80098ac:	4603      	mov	r3, r0
 80098ae:	461a      	mov	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff fa23 	bl	8008d0c <SWAPBYTE>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	80da      	strh	r2, [r3, #6]
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80098e0:	2180      	movs	r1, #128	@ 0x80
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fd58 	bl	800a398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80098e8:	2100      	movs	r1, #0
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fd54 	bl	800a398 <USBD_LL_StallEP>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d042      	beq.n	8009994 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009912:	6938      	ldr	r0, [r7, #16]
 8009914:	f000 f842 	bl	800999c <USBD_GetLen>
 8009918:	4603      	mov	r3, r0
 800991a:	3301      	adds	r3, #1
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009922:	d808      	bhi.n	8009936 <USBD_GetString+0x3e>
 8009924:	6938      	ldr	r0, [r7, #16]
 8009926:	f000 f839 	bl	800999c <USBD_GetLen>
 800992a:	4603      	mov	r3, r0
 800992c:	3301      	adds	r3, #1
 800992e:	b29b      	uxth	r3, r3
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	e001      	b.n	800993a <USBD_GetString+0x42>
 8009936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	4413      	add	r3, r2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	701a      	strb	r2, [r3, #0]
  idx++;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	3301      	adds	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	4413      	add	r3, r2
 8009956:	2203      	movs	r2, #3
 8009958:	701a      	strb	r2, [r3, #0]
  idx++;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	3301      	adds	r3, #1
 800995e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009960:	e013      	b.n	800998a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	4413      	add	r3, r2
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	7812      	ldrb	r2, [r2, #0]
 800996c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3301      	adds	r3, #1
 8009972:	613b      	str	r3, [r7, #16]
    idx++;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	3301      	adds	r3, #1
 8009978:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	4413      	add	r3, r2
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
    idx++;
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	3301      	adds	r3, #1
 8009988:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e7      	bne.n	8009962 <USBD_GetString+0x6a>
 8009992:	e000      	b.n	8009996 <USBD_GetString+0x9e>
    return;
 8009994:	bf00      	nop
  }
}
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099ac:	e005      	b.n	80099ba <USBD_GetLen+0x1e>
  {
    len++;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	3301      	adds	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3301      	adds	r3, #1
 80099b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f5      	bne.n	80099ae <USBD_GetLen+0x12>
  }

  return len;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2202      	movs	r2, #2
 80099e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	2100      	movs	r1, #0
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fd54 	bl	800a4aa <USBD_LL_Transmit>

  return USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fd43 	bl	800a4aa <USBD_LL_Transmit>

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2203      	movs	r2, #3
 8009a3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fd43 	bl	800a4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	2100      	movs	r1, #0
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fd32 	bl	800a4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fcfe 	bl	800a4aa <USBD_LL_Transmit>

  return USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2205      	movs	r2, #5
 8009ac4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ac8:	2300      	movs	r3, #0
 8009aca:	2200      	movs	r2, #0
 8009acc:	2100      	movs	r1, #0
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fd0c 	bl	800a4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4912      	ldr	r1, [pc, #72]	@ (8009b30 <MX_USB_DEVICE_Init+0x50>)
 8009ae8:	4812      	ldr	r0, [pc, #72]	@ (8009b34 <MX_USB_DEVICE_Init+0x54>)
 8009aea:	f7fe fcd9 	bl	80084a0 <USBD_Init>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009af4:	f7f7 fd68 	bl	80015c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009af8:	490f      	ldr	r1, [pc, #60]	@ (8009b38 <MX_USB_DEVICE_Init+0x58>)
 8009afa:	480e      	ldr	r0, [pc, #56]	@ (8009b34 <MX_USB_DEVICE_Init+0x54>)
 8009afc:	f7fe fd00 	bl	8008500 <USBD_RegisterClass>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b06:	f7f7 fd5f 	bl	80015c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b0a:	490c      	ldr	r1, [pc, #48]	@ (8009b3c <MX_USB_DEVICE_Init+0x5c>)
 8009b0c:	4809      	ldr	r0, [pc, #36]	@ (8009b34 <MX_USB_DEVICE_Init+0x54>)
 8009b0e:	f7fe fbf7 	bl	8008300 <USBD_CDC_RegisterInterface>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b18:	f7f7 fd56 	bl	80015c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b1c:	4805      	ldr	r0, [pc, #20]	@ (8009b34 <MX_USB_DEVICE_Init+0x54>)
 8009b1e:	f7fe fd25 	bl	800856c <USBD_Start>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b28:	f7f7 fd4e 	bl	80015c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b2c:	bf00      	nop
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	200000b8 	.word	0x200000b8
 8009b34:	20000500 	.word	0x20000500
 8009b38:	20000024 	.word	0x20000024
 8009b3c:	200000a4 	.word	0x200000a4

08009b40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b44:	2200      	movs	r2, #0
 8009b46:	4905      	ldr	r1, [pc, #20]	@ (8009b5c <CDC_Init_FS+0x1c>)
 8009b48:	4805      	ldr	r0, [pc, #20]	@ (8009b60 <CDC_Init_FS+0x20>)
 8009b4a:	f7fe fbf3 	bl	8008334 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b4e:	4905      	ldr	r1, [pc, #20]	@ (8009b64 <CDC_Init_FS+0x24>)
 8009b50:	4803      	ldr	r0, [pc, #12]	@ (8009b60 <CDC_Init_FS+0x20>)
 8009b52:	f7fe fc11 	bl	8008378 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009b56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	200010e0 	.word	0x200010e0
 8009b60:	20000500 	.word	0x20000500
 8009b64:	200008e0 	.word	0x200008e0

08009b68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009b6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	6039      	str	r1, [r7, #0]
 8009b82:	71fb      	strb	r3, [r7, #7]
 8009b84:	4613      	mov	r3, r2
 8009b86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	2b23      	cmp	r3, #35	@ 0x23
 8009b8c:	d84a      	bhi.n	8009c24 <CDC_Control_FS+0xac>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <CDC_Control_FS+0x1c>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009c25 	.word	0x08009c25
 8009b98:	08009c25 	.word	0x08009c25
 8009b9c:	08009c25 	.word	0x08009c25
 8009ba0:	08009c25 	.word	0x08009c25
 8009ba4:	08009c25 	.word	0x08009c25
 8009ba8:	08009c25 	.word	0x08009c25
 8009bac:	08009c25 	.word	0x08009c25
 8009bb0:	08009c25 	.word	0x08009c25
 8009bb4:	08009c25 	.word	0x08009c25
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009c25 	.word	0x08009c25
 8009bc4:	08009c25 	.word	0x08009c25
 8009bc8:	08009c25 	.word	0x08009c25
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c25 	.word	0x08009c25
 8009bd4:	08009c25 	.word	0x08009c25
 8009bd8:	08009c25 	.word	0x08009c25
 8009bdc:	08009c25 	.word	0x08009c25
 8009be0:	08009c25 	.word	0x08009c25
 8009be4:	08009c25 	.word	0x08009c25
 8009be8:	08009c25 	.word	0x08009c25
 8009bec:	08009c25 	.word	0x08009c25
 8009bf0:	08009c25 	.word	0x08009c25
 8009bf4:	08009c25 	.word	0x08009c25
 8009bf8:	08009c25 	.word	0x08009c25
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c25 	.word	0x08009c25
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c25 	.word	0x08009c25
 8009c0c:	08009c25 	.word	0x08009c25
 8009c10:	08009c25 	.word	0x08009c25
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c25 	.word	0x08009c25
 8009c1c:	08009c25 	.word	0x08009c25
 8009c20:	08009c25 	.word	0x08009c25
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009c24:	bf00      	nop
	}

	return (USBD_OK);
 8009c26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4805      	ldr	r0, [pc, #20]	@ (8009c58 <CDC_Receive_FS+0x24>)
 8009c42:	f7fe fb99 	bl	8008378 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c46:	4804      	ldr	r0, [pc, #16]	@ (8009c58 <CDC_Receive_FS+0x24>)
 8009c48:	f7fe fbf4 	bl	8008434 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009c4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20000500 	.word	0x20000500

08009c5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	flush_tx_fifo(); //try to send the next chunk
 8009c6e:	f000 f83f 	bl	8009cf0 <flush_tx_fifo>
  /* USER CODE END 13 */
  return result;
 8009c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <CDC_Transmit_NonBlocking>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
//copies len bytes from the sender into the ring buffer, parks the data
//each time we store a byte into ring buffer, we advance head. If the next
// position is colliding with the tail, we return busy.
uint8_t CDC_Transmit_NonBlocking(const uint8_t *p, uint16_t len)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	807b      	strh	r3, [r7, #2]
	while (len--){
 8009c8c:	e01d      	b.n	8009cca <CDC_Transmit_NonBlocking+0x4a>
		uint16_t next = (head + 1) % TX_BUF_SIZE;
 8009c8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ce4 <CDC_Transmit_NonBlocking+0x64>)
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	3301      	adds	r3, #1
 8009c96:	425a      	negs	r2, r3
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	bf58      	it	pl
 8009c9e:	4253      	negpl	r3, r2
 8009ca0:	81fb      	strh	r3, [r7, #14]
		if(next == tail)
 8009ca2:	4b11      	ldr	r3, [pc, #68]	@ (8009ce8 <CDC_Transmit_NonBlocking+0x68>)
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	89fa      	ldrh	r2, [r7, #14]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d101      	bne.n	8009cb2 <CDC_Transmit_NonBlocking+0x32>
			return USBD_BUSY; //buffer full
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e011      	b.n	8009cd6 <CDC_Transmit_NonBlocking+0x56>
		txBuf[head] = *p++;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce4 <CDC_Transmit_NonBlocking+0x64>)
 8009cba:	8812      	ldrh	r2, [r2, #0]
 8009cbc:	b292      	uxth	r2, r2
 8009cbe:	7819      	ldrb	r1, [r3, #0]
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009cec <CDC_Transmit_NonBlocking+0x6c>)
 8009cc2:	5499      	strb	r1, [r3, r2]
		head = next;
 8009cc4:	4a07      	ldr	r2, [pc, #28]	@ (8009ce4 <CDC_Transmit_NonBlocking+0x64>)
 8009cc6:	89fb      	ldrh	r3, [r7, #14]
 8009cc8:	8013      	strh	r3, [r2, #0]
	while (len--){
 8009cca:	887b      	ldrh	r3, [r7, #2]
 8009ccc:	1e5a      	subs	r2, r3, #1
 8009cce:	807a      	strh	r2, [r7, #2]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1dc      	bne.n	8009c8e <CDC_Transmit_NonBlocking+0xe>
	}
	return USBD_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200008dc 	.word	0x200008dc
 8009ce8:	200008de 	.word	0x200008de
 8009cec:	200007dc 	.word	0x200007dc

08009cf0 <flush_tx_fifo>:
// If the device is configured, and there is something in the fifo, it ships
//one continous chunk to USB stack. Will drain the buffer, called repetaedly.
// decide how many bytes are consecutive between head and tail
// kick transfer, advance tail on success
static void flush_tx_fifo(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
	if(tail == head || hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) //if full or USB not configured
 8009cf6:	4b23      	ldr	r3, [pc, #140]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	4b22      	ldr	r3, [pc, #136]	@ (8009d88 <flush_tx_fifo+0x98>)
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d03a      	beq.n	8009d7c <flush_tx_fifo+0x8c>
 8009d06:	4b21      	ldr	r3, [pc, #132]	@ (8009d8c <flush_tx_fifo+0x9c>)
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d134      	bne.n	8009d7c <flush_tx_fifo+0x8c>
		return;

	uint16_t len = (head >= tail) ? (head - tail) : (TX_BUF_SIZE - tail); //how many bytes are in there, decide
 8009d12:	4b1d      	ldr	r3, [pc, #116]	@ (8009d88 <flush_tx_fifo+0x98>)
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	4b1a      	ldr	r3, [pc, #104]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d308      	bcc.n	8009d34 <flush_tx_fifo+0x44>
 8009d22:	4b19      	ldr	r3, [pc, #100]	@ (8009d88 <flush_tx_fifo+0x98>)
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	4b16      	ldr	r3, [pc, #88]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	e005      	b.n	8009d40 <flush_tx_fifo+0x50>
 8009d34:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	80fb      	strh	r3, [r7, #6]
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &txBuf[tail], len); //points USB to that region
 8009d42:	4b10      	ldr	r3, [pc, #64]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4b11      	ldr	r3, [pc, #68]	@ (8009d90 <flush_tx_fifo+0xa0>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	88fa      	ldrh	r2, [r7, #6]
 8009d50:	4619      	mov	r1, r3
 8009d52:	480e      	ldr	r0, [pc, #56]	@ (8009d8c <flush_tx_fifo+0x9c>)
 8009d54:	f7fe faee 	bl	8008334 <USBD_CDC_SetTxBuffer>

	if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK) //kick transfer, advance the tail on success
 8009d58:	480c      	ldr	r0, [pc, #48]	@ (8009d8c <flush_tx_fifo+0x9c>)
 8009d5a:	f7fe fb2b 	bl	80083b4 <USBD_CDC_TransmitPacket>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10c      	bne.n	8009d7e <flush_tx_fifo+0x8e>
		tail = (tail + len) & TX_BUF_SIZE;
 8009d64:	4b07      	ldr	r3, [pc, #28]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	4b03      	ldr	r3, [pc, #12]	@ (8009d84 <flush_tx_fifo+0x94>)
 8009d78:	801a      	strh	r2, [r3, #0]
 8009d7a:	e000      	b.n	8009d7e <flush_tx_fifo+0x8e>
		return;
 8009d7c:	bf00      	nop
}
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200008de 	.word	0x200008de
 8009d88:	200008dc 	.word	0x200008dc
 8009d8c:	20000500 	.word	0x20000500
 8009d90:	200007dc 	.word	0x200007dc

08009d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2212      	movs	r2, #18
 8009da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009da6:	4b03      	ldr	r3, [pc, #12]	@ (8009db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	200000d4 	.word	0x200000d4

08009db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	6039      	str	r1, [r7, #0]
 8009dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2204      	movs	r2, #4
 8009dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dca:	4b03      	ldr	r3, [pc, #12]	@ (8009dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	200000e8 	.word	0x200000e8

08009ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	6039      	str	r1, [r7, #0]
 8009de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d105      	bne.n	8009dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	4907      	ldr	r1, [pc, #28]	@ (8009e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8009df2:	4808      	ldr	r0, [pc, #32]	@ (8009e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8009df4:	f7ff fd80 	bl	80098f8 <USBD_GetString>
 8009df8:	e004      	b.n	8009e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	4904      	ldr	r1, [pc, #16]	@ (8009e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8009dfe:	4805      	ldr	r0, [pc, #20]	@ (8009e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e00:	f7ff fd7a 	bl	80098f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e04:	4b02      	ldr	r3, [pc, #8]	@ (8009e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200018e0 	.word	0x200018e0
 8009e14:	0800cf0c 	.word	0x0800cf0c

08009e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	4904      	ldr	r1, [pc, #16]	@ (8009e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e28:	4804      	ldr	r0, [pc, #16]	@ (8009e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e2a:	f7ff fd65 	bl	80098f8 <USBD_GetString>
  return USBD_StrDesc;
 8009e2e:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	200018e0 	.word	0x200018e0
 8009e3c:	0800cf24 	.word	0x0800cf24

08009e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	221a      	movs	r2, #26
 8009e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e52:	f000 f843 	bl	8009edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e56:	4b02      	ldr	r3, [pc, #8]	@ (8009e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200000ec 	.word	0x200000ec

08009e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	6039      	str	r1, [r7, #0]
 8009e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d105      	bne.n	8009e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	4907      	ldr	r1, [pc, #28]	@ (8009e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e7a:	4808      	ldr	r0, [pc, #32]	@ (8009e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e7c:	f7ff fd3c 	bl	80098f8 <USBD_GetString>
 8009e80:	e004      	b.n	8009e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	4904      	ldr	r1, [pc, #16]	@ (8009e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e86:	4805      	ldr	r0, [pc, #20]	@ (8009e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e88:	f7ff fd36 	bl	80098f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e8c:	4b02      	ldr	r3, [pc, #8]	@ (8009e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	200018e0 	.word	0x200018e0
 8009e9c:	0800cf38 	.word	0x0800cf38

08009ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d105      	bne.n	8009ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4907      	ldr	r1, [pc, #28]	@ (8009ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eb6:	4808      	ldr	r0, [pc, #32]	@ (8009ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009eb8:	f7ff fd1e 	bl	80098f8 <USBD_GetString>
 8009ebc:	e004      	b.n	8009ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4904      	ldr	r1, [pc, #16]	@ (8009ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ec2:	4805      	ldr	r0, [pc, #20]	@ (8009ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ec4:	f7ff fd18 	bl	80098f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ec8:	4b02      	ldr	r3, [pc, #8]	@ (8009ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	200018e0 	.word	0x200018e0
 8009ed8:	0800cf44 	.word	0x0800cf44

08009edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f20 <Get_SerialNum+0x44>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f24 <Get_SerialNum+0x48>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009eee:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <Get_SerialNum+0x4c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4413      	add	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f02:	2208      	movs	r2, #8
 8009f04:	4909      	ldr	r1, [pc, #36]	@ (8009f2c <Get_SerialNum+0x50>)
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 f814 	bl	8009f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	4908      	ldr	r1, [pc, #32]	@ (8009f30 <Get_SerialNum+0x54>)
 8009f10:	68b8      	ldr	r0, [r7, #8]
 8009f12:	f000 f80f 	bl	8009f34 <IntToUnicode>
  }
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	1fff7a10 	.word	0x1fff7a10
 8009f24:	1fff7a14 	.word	0x1fff7a14
 8009f28:	1fff7a18 	.word	0x1fff7a18
 8009f2c:	200000ee 	.word	0x200000ee
 8009f30:	200000fe 	.word	0x200000fe

08009f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f46:	2300      	movs	r3, #0
 8009f48:	75fb      	strb	r3, [r7, #23]
 8009f4a:	e027      	b.n	8009f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	0f1b      	lsrs	r3, r3, #28
 8009f50:	2b09      	cmp	r3, #9
 8009f52:	d80b      	bhi.n	8009f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	0f1b      	lsrs	r3, r3, #28
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4619      	mov	r1, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	440b      	add	r3, r1
 8009f64:	3230      	adds	r2, #48	@ 0x30
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	e00a      	b.n	8009f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	0f1b      	lsrs	r3, r3, #28
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	4619      	mov	r1, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	440b      	add	r3, r1
 8009f7c:	3237      	adds	r2, #55	@ 0x37
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	011b      	lsls	r3, r3, #4
 8009f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	75fb      	strb	r3, [r7, #23]
 8009f9c:	7dfa      	ldrb	r2, [r7, #23]
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d3d3      	bcc.n	8009f4c <IntToUnicode+0x18>
  }
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
	...

08009fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	@ 0x28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fbc:	f107 0314 	add.w	r3, r7, #20
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	605a      	str	r2, [r3, #4]
 8009fc6:	609a      	str	r2, [r3, #8]
 8009fc8:	60da      	str	r2, [r3, #12]
 8009fca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fd4:	d13a      	bne.n	800a04c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	613b      	str	r3, [r7, #16]
 8009fda:	4b1e      	ldr	r3, [pc, #120]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fde:	4a1d      	ldr	r2, [pc, #116]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 8009fe0:	f043 0301 	orr.w	r3, r3, #1
 8009fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fe6:	4b1b      	ldr	r3, [pc, #108]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 8009fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ff2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a000:	2303      	movs	r3, #3
 800a002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a004:	230a      	movs	r3, #10
 800a006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a008:	f107 0314 	add.w	r3, r7, #20
 800a00c:	4619      	mov	r1, r3
 800a00e:	4812      	ldr	r0, [pc, #72]	@ (800a058 <HAL_PCD_MspInit+0xa4>)
 800a010:	f7f8 fede 	bl	8002dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a014:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 800a016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a018:	4a0e      	ldr	r2, [pc, #56]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 800a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	4b0b      	ldr	r3, [pc, #44]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 800a026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a028:	4a0a      	ldr	r2, [pc, #40]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 800a02a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a02e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a030:	4b08      	ldr	r3, [pc, #32]	@ (800a054 <HAL_PCD_MspInit+0xa0>)
 800a032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a03c:	2200      	movs	r2, #0
 800a03e:	2100      	movs	r1, #0
 800a040:	2043      	movs	r0, #67	@ 0x43
 800a042:	f7f8 fba4 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a046:	2043      	movs	r0, #67	@ 0x43
 800a048:	f7f8 fbbd 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a04c:	bf00      	nop
 800a04e:	3728      	adds	r7, #40	@ 0x28
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	40023800 	.word	0x40023800
 800a058:	40020000 	.word	0x40020000

0800a05c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f7fe fac7 	bl	8008606 <USBD_LL_SetupStage>
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a092:	78fa      	ldrb	r2, [r7, #3]
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	4613      	mov	r3, r2
 800a098:	00db      	lsls	r3, r3, #3
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f7fe fb01 	bl	80086b0 <USBD_LL_DataOutStage>
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	440b      	add	r3, r1
 800a0d6:	3320      	adds	r3, #32
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	f7fe fba3 	bl	8008828 <USBD_LL_DataInStage>
}
 800a0e2:	bf00      	nop
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe fce7 	bl	8008acc <USBD_LL_SOF>
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a10e:	2301      	movs	r3, #1
 800a110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	79db      	ldrb	r3, [r3, #7]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d102      	bne.n	800a120 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
 800a11e:	e008      	b.n	800a132 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	79db      	ldrb	r3, [r3, #7]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d102      	bne.n	800a12e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
 800a12c:	e001      	b.n	800a132 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a12e:	f7f7 fa4b 	bl	80015c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a138:	7bfa      	ldrb	r2, [r7, #15]
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fc81 	bl	8008a44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fc28 	bl	800899e <USBD_LL_Reset>
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe fc7c 	bl	8008a64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7adb      	ldrb	r3, [r3, #11]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a18c:	4b04      	ldr	r3, [pc, #16]	@ (800a1a0 <HAL_PCD_SuspendCallback+0x48>)
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	4a03      	ldr	r2, [pc, #12]	@ (800a1a0 <HAL_PCD_SuspendCallback+0x48>)
 800a192:	f043 0306 	orr.w	r3, r3, #6
 800a196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	e000ed00 	.word	0xe000ed00

0800a1a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fc72 	bl	8008a9c <USBD_LL_Resume>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1d2:	78fa      	ldrb	r2, [r7, #3]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe fcca 	bl	8008b70 <USBD_LL_IsoOUTIncomplete>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1f6:	78fa      	ldrb	r2, [r7, #3]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fc86 	bl	8008b0c <USBD_LL_IsoINIncomplete>
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fcdc 	bl	8008bd4 <USBD_LL_DevConnected>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fcd9 	bl	8008bea <USBD_LL_DevDisconnected>
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d13c      	bne.n	800a2ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a250:	4a20      	ldr	r2, [pc, #128]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a25c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a260:	4b1c      	ldr	r3, [pc, #112]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a262:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a268:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a26a:	2204      	movs	r2, #4
 800a26c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a26e:	4b19      	ldr	r3, [pc, #100]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a270:	2202      	movs	r2, #2
 800a272:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a274:	4b17      	ldr	r3, [pc, #92]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a276:	2200      	movs	r2, #0
 800a278:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a27a:	4b16      	ldr	r3, [pc, #88]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a27c:	2202      	movs	r2, #2
 800a27e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a280:	4b14      	ldr	r3, [pc, #80]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a282:	2200      	movs	r2, #0
 800a284:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a286:	4b13      	ldr	r3, [pc, #76]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a288:	2200      	movs	r2, #0
 800a28a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a28c:	4b11      	ldr	r3, [pc, #68]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a28e:	2200      	movs	r2, #0
 800a290:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a292:	4b10      	ldr	r3, [pc, #64]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a294:	2200      	movs	r2, #0
 800a296:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a298:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a29e:	480d      	ldr	r0, [pc, #52]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a2a0:	f7f8 ff7e 	bl	80031a0 <HAL_PCD_Init>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2aa:	f7f7 f98d 	bl	80015c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2ae:	2180      	movs	r1, #128	@ 0x80
 800a2b0:	4808      	ldr	r0, [pc, #32]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a2b2:	f7fa f9aa 	bl	800460a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2b6:	2240      	movs	r2, #64	@ 0x40
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4806      	ldr	r0, [pc, #24]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a2bc:	f7fa f95e 	bl	800457c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a2c0:	2280      	movs	r2, #128	@ 0x80
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	4803      	ldr	r0, [pc, #12]	@ (800a2d4 <USBD_LL_Init+0x94>)
 800a2c6:	f7fa f959 	bl	800457c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	20001ae0 	.word	0x20001ae0

0800a2d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f9 f865 	bl	80033be <HAL_PCD_Start>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f942 	bl	800a584 <USBD_Get_USB_Status>
 800a300:	4603      	mov	r3, r0
 800a302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a304:	7bbb      	ldrb	r3, [r7, #14]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	461a      	mov	r2, r3
 800a31c:	4603      	mov	r3, r0
 800a31e:	70fb      	strb	r3, [r7, #3]
 800a320:	460b      	mov	r3, r1
 800a322:	70bb      	strb	r3, [r7, #2]
 800a324:	4613      	mov	r3, r2
 800a326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a336:	78bb      	ldrb	r3, [r7, #2]
 800a338:	883a      	ldrh	r2, [r7, #0]
 800a33a:	78f9      	ldrb	r1, [r7, #3]
 800a33c:	f7f9 fd39 	bl	8003db2 <HAL_PCD_EP_Open>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f91c 	bl	800a584 <USBD_Get_USB_Status>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a350:	7bbb      	ldrb	r3, [r7, #14]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f9 fd84 	bl	8003e86 <HAL_PCD_EP_Close>
 800a37e:	4603      	mov	r3, r0
 800a380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f8fd 	bl	800a584 <USBD_Get_USB_Status>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3b2:	78fa      	ldrb	r2, [r7, #3]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7f9 fe3c 	bl	8004034 <HAL_PCD_EP_SetStall>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 f8de 	bl	800a584 <USBD_Get_USB_Status>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3f0:	78fa      	ldrb	r2, [r7, #3]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7f9 fe80 	bl	80040fa <HAL_PCD_EP_ClrStall>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	4618      	mov	r0, r3
 800a402:	f000 f8bf 	bl	800a584 <USBD_Get_USB_Status>
 800a406:	4603      	mov	r3, r0
 800a408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da0b      	bge.n	800a448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a436:	68f9      	ldr	r1, [r7, #12]
 800a438:	4613      	mov	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	3316      	adds	r3, #22
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	e00b      	b.n	800a460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a44e:	68f9      	ldr	r1, [r7, #12]
 800a450:	4613      	mov	r3, r2
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a45e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7f9 fc6d 	bl	8003d6a <HAL_PCD_SetAddress>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 f874 	bl	800a584 <USBD_Get_USB_Status>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b086      	sub	sp, #24
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4c8:	7af9      	ldrb	r1, [r7, #11]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	f7f9 fd77 	bl	8003fc0 <HAL_PCD_EP_Transmit>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f853 	bl	800a584 <USBD_Get_USB_Status>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a50a:	7af9      	ldrb	r1, [r7, #11]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	f7f9 fd03 	bl	8003f1a <HAL_PCD_EP_Receive>
 800a514:	4603      	mov	r3, r0
 800a516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f832 	bl	800a584 <USBD_Get_USB_Status>
 800a520:	4603      	mov	r3, r0
 800a522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a524:	7dbb      	ldrb	r3, [r7, #22]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a540:	78fa      	ldrb	r2, [r7, #3]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f7f9 fd23 	bl	8003f90 <HAL_PCD_EP_GetRxCount>
 800a54a:	4603      	mov	r3, r0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a55c:	4b03      	ldr	r3, [pc, #12]	@ (800a56c <USBD_static_malloc+0x18>)
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20001fc4 	.word	0x20001fc4

0800a570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]

}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d817      	bhi.n	800a5c8 <USBD_Get_USB_Status+0x44>
 800a598:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a0 <USBD_Get_USB_Status+0x1c>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5b1 	.word	0x0800a5b1
 800a5a4:	0800a5b7 	.word	0x0800a5b7
 800a5a8:	0800a5bd 	.word	0x0800a5bd
 800a5ac:	0800a5c3 	.word	0x0800a5c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	e00b      	b.n	800a5ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ba:	e008      	b.n	800a5ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	73fb      	strb	r3, [r7, #15]
    break;
 800a5c0:	e005      	b.n	800a5ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5c6:	e002      	b.n	800a5ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a5cc:	bf00      	nop
  }
  return usb_status;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <__cvt>:
 800a5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	ec57 6b10 	vmov	r6, r7, d0
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	bfbb      	ittet	lt
 800a5ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a5f2:	461f      	movlt	r7, r3
 800a5f4:	2300      	movge	r3, #0
 800a5f6:	232d      	movlt	r3, #45	@ 0x2d
 800a5f8:	700b      	strb	r3, [r1, #0]
 800a5fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a600:	4691      	mov	r9, r2
 800a602:	f023 0820 	bic.w	r8, r3, #32
 800a606:	bfbc      	itt	lt
 800a608:	4632      	movlt	r2, r6
 800a60a:	4616      	movlt	r6, r2
 800a60c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a610:	d005      	beq.n	800a61e <__cvt+0x42>
 800a612:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a616:	d100      	bne.n	800a61a <__cvt+0x3e>
 800a618:	3401      	adds	r4, #1
 800a61a:	2102      	movs	r1, #2
 800a61c:	e000      	b.n	800a620 <__cvt+0x44>
 800a61e:	2103      	movs	r1, #3
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	ab02      	add	r3, sp, #8
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	ec47 6b10 	vmov	d0, r6, r7
 800a62c:	4653      	mov	r3, sl
 800a62e:	4622      	mov	r2, r4
 800a630:	f000 fe3a 	bl	800b2a8 <_dtoa_r>
 800a634:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a638:	4605      	mov	r5, r0
 800a63a:	d119      	bne.n	800a670 <__cvt+0x94>
 800a63c:	f019 0f01 	tst.w	r9, #1
 800a640:	d00e      	beq.n	800a660 <__cvt+0x84>
 800a642:	eb00 0904 	add.w	r9, r0, r4
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	4630      	mov	r0, r6
 800a64c:	4639      	mov	r1, r7
 800a64e:	f7f6 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a652:	b108      	cbz	r0, 800a658 <__cvt+0x7c>
 800a654:	f8cd 900c 	str.w	r9, [sp, #12]
 800a658:	2230      	movs	r2, #48	@ 0x30
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	454b      	cmp	r3, r9
 800a65e:	d31e      	bcc.n	800a69e <__cvt+0xc2>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a664:	1b5b      	subs	r3, r3, r5
 800a666:	4628      	mov	r0, r5
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	b004      	add	sp, #16
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a674:	eb00 0904 	add.w	r9, r0, r4
 800a678:	d1e5      	bne.n	800a646 <__cvt+0x6a>
 800a67a:	7803      	ldrb	r3, [r0, #0]
 800a67c:	2b30      	cmp	r3, #48	@ 0x30
 800a67e:	d10a      	bne.n	800a696 <__cvt+0xba>
 800a680:	2200      	movs	r2, #0
 800a682:	2300      	movs	r3, #0
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f6 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a68c:	b918      	cbnz	r0, 800a696 <__cvt+0xba>
 800a68e:	f1c4 0401 	rsb	r4, r4, #1
 800a692:	f8ca 4000 	str.w	r4, [sl]
 800a696:	f8da 3000 	ldr.w	r3, [sl]
 800a69a:	4499      	add	r9, r3
 800a69c:	e7d3      	b.n	800a646 <__cvt+0x6a>
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	9103      	str	r1, [sp, #12]
 800a6a2:	701a      	strb	r2, [r3, #0]
 800a6a4:	e7d9      	b.n	800a65a <__cvt+0x7e>

0800a6a6 <__exponent>:
 800a6a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	bfba      	itte	lt
 800a6ac:	4249      	neglt	r1, r1
 800a6ae:	232d      	movlt	r3, #45	@ 0x2d
 800a6b0:	232b      	movge	r3, #43	@ 0x2b
 800a6b2:	2909      	cmp	r1, #9
 800a6b4:	7002      	strb	r2, [r0, #0]
 800a6b6:	7043      	strb	r3, [r0, #1]
 800a6b8:	dd29      	ble.n	800a70e <__exponent+0x68>
 800a6ba:	f10d 0307 	add.w	r3, sp, #7
 800a6be:	461d      	mov	r5, r3
 800a6c0:	270a      	movs	r7, #10
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6c8:	fb07 1416 	mls	r4, r7, r6, r1
 800a6cc:	3430      	adds	r4, #48	@ 0x30
 800a6ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	2c63      	cmp	r4, #99	@ 0x63
 800a6d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6da:	4631      	mov	r1, r6
 800a6dc:	dcf1      	bgt.n	800a6c2 <__exponent+0x1c>
 800a6de:	3130      	adds	r1, #48	@ 0x30
 800a6e0:	1e94      	subs	r4, r2, #2
 800a6e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6e6:	1c41      	adds	r1, r0, #1
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	42ab      	cmp	r3, r5
 800a6ec:	d30a      	bcc.n	800a704 <__exponent+0x5e>
 800a6ee:	f10d 0309 	add.w	r3, sp, #9
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	42ac      	cmp	r4, r5
 800a6f6:	bf88      	it	hi
 800a6f8:	2300      	movhi	r3, #0
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	4403      	add	r3, r0
 800a6fe:	1a18      	subs	r0, r3, r0
 800a700:	b003      	add	sp, #12
 800a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a704:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a708:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a70c:	e7ed      	b.n	800a6ea <__exponent+0x44>
 800a70e:	2330      	movs	r3, #48	@ 0x30
 800a710:	3130      	adds	r1, #48	@ 0x30
 800a712:	7083      	strb	r3, [r0, #2]
 800a714:	70c1      	strb	r1, [r0, #3]
 800a716:	1d03      	adds	r3, r0, #4
 800a718:	e7f1      	b.n	800a6fe <__exponent+0x58>
	...

0800a71c <_printf_float>:
 800a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	b08d      	sub	sp, #52	@ 0x34
 800a722:	460c      	mov	r4, r1
 800a724:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a728:	4616      	mov	r6, r2
 800a72a:	461f      	mov	r7, r3
 800a72c:	4605      	mov	r5, r0
 800a72e:	f000 fcb9 	bl	800b0a4 <_localeconv_r>
 800a732:	6803      	ldr	r3, [r0, #0]
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	4618      	mov	r0, r3
 800a738:	f7f5 fd9a 	bl	8000270 <strlen>
 800a73c:	2300      	movs	r3, #0
 800a73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a740:	f8d8 3000 	ldr.w	r3, [r8]
 800a744:	9005      	str	r0, [sp, #20]
 800a746:	3307      	adds	r3, #7
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	f103 0208 	add.w	r2, r3, #8
 800a750:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a754:	f8d4 b000 	ldr.w	fp, [r4]
 800a758:	f8c8 2000 	str.w	r2, [r8]
 800a75c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a760:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f8cd 8018 	str.w	r8, [sp, #24]
 800a76a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a76e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a772:	4b9c      	ldr	r3, [pc, #624]	@ (800a9e4 <_printf_float+0x2c8>)
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	f7f6 f9d8 	bl	8000b2c <__aeabi_dcmpun>
 800a77c:	bb70      	cbnz	r0, 800a7dc <_printf_float+0xc0>
 800a77e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a782:	4b98      	ldr	r3, [pc, #608]	@ (800a9e4 <_printf_float+0x2c8>)
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	f7f6 f9b2 	bl	8000af0 <__aeabi_dcmple>
 800a78c:	bb30      	cbnz	r0, 800a7dc <_printf_float+0xc0>
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f6 f9a1 	bl	8000adc <__aeabi_dcmplt>
 800a79a:	b110      	cbz	r0, 800a7a2 <_printf_float+0x86>
 800a79c:	232d      	movs	r3, #45	@ 0x2d
 800a79e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a2:	4a91      	ldr	r2, [pc, #580]	@ (800a9e8 <_printf_float+0x2cc>)
 800a7a4:	4b91      	ldr	r3, [pc, #580]	@ (800a9ec <_printf_float+0x2d0>)
 800a7a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7aa:	bf8c      	ite	hi
 800a7ac:	4690      	movhi	r8, r2
 800a7ae:	4698      	movls	r8, r3
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	f02b 0304 	bic.w	r3, fp, #4
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	9700      	str	r7, [sp, #0]
 800a7c0:	4633      	mov	r3, r6
 800a7c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f9d2 	bl	800ab70 <_printf_common>
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	f040 808d 	bne.w	800a8ec <_printf_float+0x1d0>
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	b00d      	add	sp, #52	@ 0x34
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	4642      	mov	r2, r8
 800a7de:	464b      	mov	r3, r9
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	f7f6 f9a2 	bl	8000b2c <__aeabi_dcmpun>
 800a7e8:	b140      	cbz	r0, 800a7fc <_printf_float+0xe0>
 800a7ea:	464b      	mov	r3, r9
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfbc      	itt	lt
 800a7f0:	232d      	movlt	r3, #45	@ 0x2d
 800a7f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7f6:	4a7e      	ldr	r2, [pc, #504]	@ (800a9f0 <_printf_float+0x2d4>)
 800a7f8:	4b7e      	ldr	r3, [pc, #504]	@ (800a9f4 <_printf_float+0x2d8>)
 800a7fa:	e7d4      	b.n	800a7a6 <_printf_float+0x8a>
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a802:	9206      	str	r2, [sp, #24]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	d13b      	bne.n	800a880 <_printf_float+0x164>
 800a808:	2306      	movs	r3, #6
 800a80a:	6063      	str	r3, [r4, #4]
 800a80c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a810:	2300      	movs	r3, #0
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	9303      	str	r3, [sp, #12]
 800a816:	ab0a      	add	r3, sp, #40	@ 0x28
 800a818:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a81c:	ab09      	add	r3, sp, #36	@ 0x24
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	ec49 8b10 	vmov	d0, r8, r9
 800a826:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a82a:	4628      	mov	r0, r5
 800a82c:	f7ff fed6 	bl	800a5dc <__cvt>
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a834:	2b47      	cmp	r3, #71	@ 0x47
 800a836:	4680      	mov	r8, r0
 800a838:	d129      	bne.n	800a88e <_printf_float+0x172>
 800a83a:	1cc8      	adds	r0, r1, #3
 800a83c:	db02      	blt.n	800a844 <_printf_float+0x128>
 800a83e:	6863      	ldr	r3, [r4, #4]
 800a840:	4299      	cmp	r1, r3
 800a842:	dd41      	ble.n	800a8c8 <_printf_float+0x1ac>
 800a844:	f1aa 0a02 	sub.w	sl, sl, #2
 800a848:	fa5f fa8a 	uxtb.w	sl, sl
 800a84c:	3901      	subs	r1, #1
 800a84e:	4652      	mov	r2, sl
 800a850:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a854:	9109      	str	r1, [sp, #36]	@ 0x24
 800a856:	f7ff ff26 	bl	800a6a6 <__exponent>
 800a85a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a85c:	1813      	adds	r3, r2, r0
 800a85e:	2a01      	cmp	r2, #1
 800a860:	4681      	mov	r9, r0
 800a862:	6123      	str	r3, [r4, #16]
 800a864:	dc02      	bgt.n	800a86c <_printf_float+0x150>
 800a866:	6822      	ldr	r2, [r4, #0]
 800a868:	07d2      	lsls	r2, r2, #31
 800a86a:	d501      	bpl.n	800a870 <_printf_float+0x154>
 800a86c:	3301      	adds	r3, #1
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0a2      	beq.n	800a7be <_printf_float+0xa2>
 800a878:	232d      	movs	r3, #45	@ 0x2d
 800a87a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a87e:	e79e      	b.n	800a7be <_printf_float+0xa2>
 800a880:	9a06      	ldr	r2, [sp, #24]
 800a882:	2a47      	cmp	r2, #71	@ 0x47
 800a884:	d1c2      	bne.n	800a80c <_printf_float+0xf0>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1c0      	bne.n	800a80c <_printf_float+0xf0>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e7bd      	b.n	800a80a <_printf_float+0xee>
 800a88e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a892:	d9db      	bls.n	800a84c <_printf_float+0x130>
 800a894:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a898:	d118      	bne.n	800a8cc <_printf_float+0x1b0>
 800a89a:	2900      	cmp	r1, #0
 800a89c:	6863      	ldr	r3, [r4, #4]
 800a89e:	dd0b      	ble.n	800a8b8 <_printf_float+0x19c>
 800a8a0:	6121      	str	r1, [r4, #16]
 800a8a2:	b913      	cbnz	r3, 800a8aa <_printf_float+0x18e>
 800a8a4:	6822      	ldr	r2, [r4, #0]
 800a8a6:	07d0      	lsls	r0, r2, #31
 800a8a8:	d502      	bpl.n	800a8b0 <_printf_float+0x194>
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	440b      	add	r3, r1
 800a8ae:	6123      	str	r3, [r4, #16]
 800a8b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8b2:	f04f 0900 	mov.w	r9, #0
 800a8b6:	e7db      	b.n	800a870 <_printf_float+0x154>
 800a8b8:	b913      	cbnz	r3, 800a8c0 <_printf_float+0x1a4>
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	07d2      	lsls	r2, r2, #31
 800a8be:	d501      	bpl.n	800a8c4 <_printf_float+0x1a8>
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	e7f4      	b.n	800a8ae <_printf_float+0x192>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e7f2      	b.n	800a8ae <_printf_float+0x192>
 800a8c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ce:	4299      	cmp	r1, r3
 800a8d0:	db05      	blt.n	800a8de <_printf_float+0x1c2>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	6121      	str	r1, [r4, #16]
 800a8d6:	07d8      	lsls	r0, r3, #31
 800a8d8:	d5ea      	bpl.n	800a8b0 <_printf_float+0x194>
 800a8da:	1c4b      	adds	r3, r1, #1
 800a8dc:	e7e7      	b.n	800a8ae <_printf_float+0x192>
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	bfd4      	ite	le
 800a8e2:	f1c1 0202 	rsble	r2, r1, #2
 800a8e6:	2201      	movgt	r2, #1
 800a8e8:	4413      	add	r3, r2
 800a8ea:	e7e0      	b.n	800a8ae <_printf_float+0x192>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	055a      	lsls	r2, r3, #21
 800a8f0:	d407      	bmi.n	800a902 <_printf_float+0x1e6>
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	4642      	mov	r2, r8
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	47b8      	blx	r7
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d12b      	bne.n	800a958 <_printf_float+0x23c>
 800a900:	e767      	b.n	800a7d2 <_printf_float+0xb6>
 800a902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a906:	f240 80dd 	bls.w	800aac4 <_printf_float+0x3a8>
 800a90a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	f7f6 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a916:	2800      	cmp	r0, #0
 800a918:	d033      	beq.n	800a982 <_printf_float+0x266>
 800a91a:	4a37      	ldr	r2, [pc, #220]	@ (800a9f8 <_printf_float+0x2dc>)
 800a91c:	2301      	movs	r3, #1
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f af54 	beq.w	800a7d2 <_printf_float+0xb6>
 800a92a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a92e:	4543      	cmp	r3, r8
 800a930:	db02      	blt.n	800a938 <_printf_float+0x21c>
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	07d8      	lsls	r0, r3, #31
 800a936:	d50f      	bpl.n	800a958 <_printf_float+0x23c>
 800a938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f af45 	beq.w	800a7d2 <_printf_float+0xb6>
 800a948:	f04f 0900 	mov.w	r9, #0
 800a94c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a950:	f104 0a1a 	add.w	sl, r4, #26
 800a954:	45c8      	cmp	r8, r9
 800a956:	dc09      	bgt.n	800a96c <_printf_float+0x250>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	079b      	lsls	r3, r3, #30
 800a95c:	f100 8103 	bmi.w	800ab66 <_printf_float+0x44a>
 800a960:	68e0      	ldr	r0, [r4, #12]
 800a962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a964:	4298      	cmp	r0, r3
 800a966:	bfb8      	it	lt
 800a968:	4618      	movlt	r0, r3
 800a96a:	e734      	b.n	800a7d6 <_printf_float+0xba>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4652      	mov	r2, sl
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af2b 	beq.w	800a7d2 <_printf_float+0xb6>
 800a97c:	f109 0901 	add.w	r9, r9, #1
 800a980:	e7e8      	b.n	800a954 <_printf_float+0x238>
 800a982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a984:	2b00      	cmp	r3, #0
 800a986:	dc39      	bgt.n	800a9fc <_printf_float+0x2e0>
 800a988:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f8 <_printf_float+0x2dc>)
 800a98a:	2301      	movs	r3, #1
 800a98c:	4631      	mov	r1, r6
 800a98e:	4628      	mov	r0, r5
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f af1d 	beq.w	800a7d2 <_printf_float+0xb6>
 800a998:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a99c:	ea59 0303 	orrs.w	r3, r9, r3
 800a9a0:	d102      	bne.n	800a9a8 <_printf_float+0x28c>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	07d9      	lsls	r1, r3, #31
 800a9a6:	d5d7      	bpl.n	800a958 <_printf_float+0x23c>
 800a9a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b8      	blx	r7
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	f43f af0d 	beq.w	800a7d2 <_printf_float+0xb6>
 800a9b8:	f04f 0a00 	mov.w	sl, #0
 800a9bc:	f104 0b1a 	add.w	fp, r4, #26
 800a9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c2:	425b      	negs	r3, r3
 800a9c4:	4553      	cmp	r3, sl
 800a9c6:	dc01      	bgt.n	800a9cc <_printf_float+0x2b0>
 800a9c8:	464b      	mov	r3, r9
 800a9ca:	e793      	b.n	800a8f4 <_printf_float+0x1d8>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	465a      	mov	r2, fp
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f aefb 	beq.w	800a7d2 <_printf_float+0xb6>
 800a9dc:	f10a 0a01 	add.w	sl, sl, #1
 800a9e0:	e7ee      	b.n	800a9c0 <_printf_float+0x2a4>
 800a9e2:	bf00      	nop
 800a9e4:	7fefffff 	.word	0x7fefffff
 800a9e8:	0800cf70 	.word	0x0800cf70
 800a9ec:	0800cf6c 	.word	0x0800cf6c
 800a9f0:	0800cf78 	.word	0x0800cf78
 800a9f4:	0800cf74 	.word	0x0800cf74
 800a9f8:	0800cf7c 	.word	0x0800cf7c
 800a9fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa02:	4553      	cmp	r3, sl
 800aa04:	bfa8      	it	ge
 800aa06:	4653      	movge	r3, sl
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	4699      	mov	r9, r3
 800aa0c:	dc36      	bgt.n	800aa7c <_printf_float+0x360>
 800aa0e:	f04f 0b00 	mov.w	fp, #0
 800aa12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa16:	f104 021a 	add.w	r2, r4, #26
 800aa1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa1c:	9306      	str	r3, [sp, #24]
 800aa1e:	eba3 0309 	sub.w	r3, r3, r9
 800aa22:	455b      	cmp	r3, fp
 800aa24:	dc31      	bgt.n	800aa8a <_printf_float+0x36e>
 800aa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa28:	459a      	cmp	sl, r3
 800aa2a:	dc3a      	bgt.n	800aaa2 <_printf_float+0x386>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d437      	bmi.n	800aaa2 <_printf_float+0x386>
 800aa32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa34:	ebaa 0903 	sub.w	r9, sl, r3
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	ebaa 0303 	sub.w	r3, sl, r3
 800aa3e:	4599      	cmp	r9, r3
 800aa40:	bfa8      	it	ge
 800aa42:	4699      	movge	r9, r3
 800aa44:	f1b9 0f00 	cmp.w	r9, #0
 800aa48:	dc33      	bgt.n	800aab2 <_printf_float+0x396>
 800aa4a:	f04f 0800 	mov.w	r8, #0
 800aa4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa52:	f104 0b1a 	add.w	fp, r4, #26
 800aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa58:	ebaa 0303 	sub.w	r3, sl, r3
 800aa5c:	eba3 0309 	sub.w	r3, r3, r9
 800aa60:	4543      	cmp	r3, r8
 800aa62:	f77f af79 	ble.w	800a958 <_printf_float+0x23c>
 800aa66:	2301      	movs	r3, #1
 800aa68:	465a      	mov	r2, fp
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f aeae 	beq.w	800a7d2 <_printf_float+0xb6>
 800aa76:	f108 0801 	add.w	r8, r8, #1
 800aa7a:	e7ec      	b.n	800aa56 <_printf_float+0x33a>
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	d1c2      	bne.n	800aa0e <_printf_float+0x2f2>
 800aa88:	e6a3      	b.n	800a7d2 <_printf_float+0xb6>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4628      	mov	r0, r5
 800aa90:	9206      	str	r2, [sp, #24]
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae9c 	beq.w	800a7d2 <_printf_float+0xb6>
 800aa9a:	9a06      	ldr	r2, [sp, #24]
 800aa9c:	f10b 0b01 	add.w	fp, fp, #1
 800aaa0:	e7bb      	b.n	800aa1a <_printf_float+0x2fe>
 800aaa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	47b8      	blx	r7
 800aaac:	3001      	adds	r0, #1
 800aaae:	d1c0      	bne.n	800aa32 <_printf_float+0x316>
 800aab0:	e68f      	b.n	800a7d2 <_printf_float+0xb6>
 800aab2:	9a06      	ldr	r2, [sp, #24]
 800aab4:	464b      	mov	r3, r9
 800aab6:	4442      	add	r2, r8
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	d1c3      	bne.n	800aa4a <_printf_float+0x32e>
 800aac2:	e686      	b.n	800a7d2 <_printf_float+0xb6>
 800aac4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aac8:	f1ba 0f01 	cmp.w	sl, #1
 800aacc:	dc01      	bgt.n	800aad2 <_printf_float+0x3b6>
 800aace:	07db      	lsls	r3, r3, #31
 800aad0:	d536      	bpl.n	800ab40 <_printf_float+0x424>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4642      	mov	r2, r8
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	f43f ae78 	beq.w	800a7d2 <_printf_float+0xb6>
 800aae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae6:	4631      	mov	r1, r6
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b8      	blx	r7
 800aaec:	3001      	adds	r0, #1
 800aaee:	f43f ae70 	beq.w	800a7d2 <_printf_float+0xb6>
 800aaf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aafe:	f7f5 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab02:	b9c0      	cbnz	r0, 800ab36 <_printf_float+0x41a>
 800ab04:	4653      	mov	r3, sl
 800ab06:	f108 0201 	add.w	r2, r8, #1
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	d10c      	bne.n	800ab2e <_printf_float+0x412>
 800ab14:	e65d      	b.n	800a7d2 <_printf_float+0xb6>
 800ab16:	2301      	movs	r3, #1
 800ab18:	465a      	mov	r2, fp
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	47b8      	blx	r7
 800ab20:	3001      	adds	r0, #1
 800ab22:	f43f ae56 	beq.w	800a7d2 <_printf_float+0xb6>
 800ab26:	f108 0801 	add.w	r8, r8, #1
 800ab2a:	45d0      	cmp	r8, sl
 800ab2c:	dbf3      	blt.n	800ab16 <_printf_float+0x3fa>
 800ab2e:	464b      	mov	r3, r9
 800ab30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab34:	e6df      	b.n	800a8f6 <_printf_float+0x1da>
 800ab36:	f04f 0800 	mov.w	r8, #0
 800ab3a:	f104 0b1a 	add.w	fp, r4, #26
 800ab3e:	e7f4      	b.n	800ab2a <_printf_float+0x40e>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4642      	mov	r2, r8
 800ab44:	e7e1      	b.n	800ab0a <_printf_float+0x3ee>
 800ab46:	2301      	movs	r3, #1
 800ab48:	464a      	mov	r2, r9
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	f43f ae3e 	beq.w	800a7d2 <_printf_float+0xb6>
 800ab56:	f108 0801 	add.w	r8, r8, #1
 800ab5a:	68e3      	ldr	r3, [r4, #12]
 800ab5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab5e:	1a5b      	subs	r3, r3, r1
 800ab60:	4543      	cmp	r3, r8
 800ab62:	dcf0      	bgt.n	800ab46 <_printf_float+0x42a>
 800ab64:	e6fc      	b.n	800a960 <_printf_float+0x244>
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	f104 0919 	add.w	r9, r4, #25
 800ab6e:	e7f4      	b.n	800ab5a <_printf_float+0x43e>

0800ab70 <_printf_common>:
 800ab70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab74:	4616      	mov	r6, r2
 800ab76:	4698      	mov	r8, r3
 800ab78:	688a      	ldr	r2, [r1, #8]
 800ab7a:	690b      	ldr	r3, [r1, #16]
 800ab7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab80:	4293      	cmp	r3, r2
 800ab82:	bfb8      	it	lt
 800ab84:	4613      	movlt	r3, r2
 800ab86:	6033      	str	r3, [r6, #0]
 800ab88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	b10a      	cbz	r2, 800ab96 <_printf_common+0x26>
 800ab92:	3301      	adds	r3, #1
 800ab94:	6033      	str	r3, [r6, #0]
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	0699      	lsls	r1, r3, #26
 800ab9a:	bf42      	ittt	mi
 800ab9c:	6833      	ldrmi	r3, [r6, #0]
 800ab9e:	3302      	addmi	r3, #2
 800aba0:	6033      	strmi	r3, [r6, #0]
 800aba2:	6825      	ldr	r5, [r4, #0]
 800aba4:	f015 0506 	ands.w	r5, r5, #6
 800aba8:	d106      	bne.n	800abb8 <_printf_common+0x48>
 800abaa:	f104 0a19 	add.w	sl, r4, #25
 800abae:	68e3      	ldr	r3, [r4, #12]
 800abb0:	6832      	ldr	r2, [r6, #0]
 800abb2:	1a9b      	subs	r3, r3, r2
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	dc26      	bgt.n	800ac06 <_printf_common+0x96>
 800abb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abbc:	6822      	ldr	r2, [r4, #0]
 800abbe:	3b00      	subs	r3, #0
 800abc0:	bf18      	it	ne
 800abc2:	2301      	movne	r3, #1
 800abc4:	0692      	lsls	r2, r2, #26
 800abc6:	d42b      	bmi.n	800ac20 <_printf_common+0xb0>
 800abc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abcc:	4641      	mov	r1, r8
 800abce:	4638      	mov	r0, r7
 800abd0:	47c8      	blx	r9
 800abd2:	3001      	adds	r0, #1
 800abd4:	d01e      	beq.n	800ac14 <_printf_common+0xa4>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	f003 0306 	and.w	r3, r3, #6
 800abde:	2b04      	cmp	r3, #4
 800abe0:	bf02      	ittt	eq
 800abe2:	68e5      	ldreq	r5, [r4, #12]
 800abe4:	6833      	ldreq	r3, [r6, #0]
 800abe6:	1aed      	subeq	r5, r5, r3
 800abe8:	68a3      	ldr	r3, [r4, #8]
 800abea:	bf0c      	ite	eq
 800abec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abf0:	2500      	movne	r5, #0
 800abf2:	4293      	cmp	r3, r2
 800abf4:	bfc4      	itt	gt
 800abf6:	1a9b      	subgt	r3, r3, r2
 800abf8:	18ed      	addgt	r5, r5, r3
 800abfa:	2600      	movs	r6, #0
 800abfc:	341a      	adds	r4, #26
 800abfe:	42b5      	cmp	r5, r6
 800ac00:	d11a      	bne.n	800ac38 <_printf_common+0xc8>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e008      	b.n	800ac18 <_printf_common+0xa8>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4652      	mov	r2, sl
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	47c8      	blx	r9
 800ac10:	3001      	adds	r0, #1
 800ac12:	d103      	bne.n	800ac1c <_printf_common+0xac>
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	e7c6      	b.n	800abae <_printf_common+0x3e>
 800ac20:	18e1      	adds	r1, r4, r3
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	2030      	movs	r0, #48	@ 0x30
 800ac26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac2a:	4422      	add	r2, r4
 800ac2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac34:	3302      	adds	r3, #2
 800ac36:	e7c7      	b.n	800abc8 <_printf_common+0x58>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4641      	mov	r1, r8
 800ac3e:	4638      	mov	r0, r7
 800ac40:	47c8      	blx	r9
 800ac42:	3001      	adds	r0, #1
 800ac44:	d0e6      	beq.n	800ac14 <_printf_common+0xa4>
 800ac46:	3601      	adds	r6, #1
 800ac48:	e7d9      	b.n	800abfe <_printf_common+0x8e>
	...

0800ac4c <_printf_i>:
 800ac4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	7e0f      	ldrb	r7, [r1, #24]
 800ac52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac54:	2f78      	cmp	r7, #120	@ 0x78
 800ac56:	4691      	mov	r9, r2
 800ac58:	4680      	mov	r8, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	469a      	mov	sl, r3
 800ac5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac62:	d807      	bhi.n	800ac74 <_printf_i+0x28>
 800ac64:	2f62      	cmp	r7, #98	@ 0x62
 800ac66:	d80a      	bhi.n	800ac7e <_printf_i+0x32>
 800ac68:	2f00      	cmp	r7, #0
 800ac6a:	f000 80d1 	beq.w	800ae10 <_printf_i+0x1c4>
 800ac6e:	2f58      	cmp	r7, #88	@ 0x58
 800ac70:	f000 80b8 	beq.w	800ade4 <_printf_i+0x198>
 800ac74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac7c:	e03a      	b.n	800acf4 <_printf_i+0xa8>
 800ac7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac82:	2b15      	cmp	r3, #21
 800ac84:	d8f6      	bhi.n	800ac74 <_printf_i+0x28>
 800ac86:	a101      	add	r1, pc, #4	@ (adr r1, 800ac8c <_printf_i+0x40>)
 800ac88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac8c:	0800ace5 	.word	0x0800ace5
 800ac90:	0800acf9 	.word	0x0800acf9
 800ac94:	0800ac75 	.word	0x0800ac75
 800ac98:	0800ac75 	.word	0x0800ac75
 800ac9c:	0800ac75 	.word	0x0800ac75
 800aca0:	0800ac75 	.word	0x0800ac75
 800aca4:	0800acf9 	.word	0x0800acf9
 800aca8:	0800ac75 	.word	0x0800ac75
 800acac:	0800ac75 	.word	0x0800ac75
 800acb0:	0800ac75 	.word	0x0800ac75
 800acb4:	0800ac75 	.word	0x0800ac75
 800acb8:	0800adf7 	.word	0x0800adf7
 800acbc:	0800ad23 	.word	0x0800ad23
 800acc0:	0800adb1 	.word	0x0800adb1
 800acc4:	0800ac75 	.word	0x0800ac75
 800acc8:	0800ac75 	.word	0x0800ac75
 800accc:	0800ae19 	.word	0x0800ae19
 800acd0:	0800ac75 	.word	0x0800ac75
 800acd4:	0800ad23 	.word	0x0800ad23
 800acd8:	0800ac75 	.word	0x0800ac75
 800acdc:	0800ac75 	.word	0x0800ac75
 800ace0:	0800adb9 	.word	0x0800adb9
 800ace4:	6833      	ldr	r3, [r6, #0]
 800ace6:	1d1a      	adds	r2, r3, #4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6032      	str	r2, [r6, #0]
 800acec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acf4:	2301      	movs	r3, #1
 800acf6:	e09c      	b.n	800ae32 <_printf_i+0x1e6>
 800acf8:	6833      	ldr	r3, [r6, #0]
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	1d19      	adds	r1, r3, #4
 800acfe:	6031      	str	r1, [r6, #0]
 800ad00:	0606      	lsls	r6, r0, #24
 800ad02:	d501      	bpl.n	800ad08 <_printf_i+0xbc>
 800ad04:	681d      	ldr	r5, [r3, #0]
 800ad06:	e003      	b.n	800ad10 <_printf_i+0xc4>
 800ad08:	0645      	lsls	r5, r0, #25
 800ad0a:	d5fb      	bpl.n	800ad04 <_printf_i+0xb8>
 800ad0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	da03      	bge.n	800ad1c <_printf_i+0xd0>
 800ad14:	232d      	movs	r3, #45	@ 0x2d
 800ad16:	426d      	negs	r5, r5
 800ad18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad1c:	4858      	ldr	r0, [pc, #352]	@ (800ae80 <_printf_i+0x234>)
 800ad1e:	230a      	movs	r3, #10
 800ad20:	e011      	b.n	800ad46 <_printf_i+0xfa>
 800ad22:	6821      	ldr	r1, [r4, #0]
 800ad24:	6833      	ldr	r3, [r6, #0]
 800ad26:	0608      	lsls	r0, r1, #24
 800ad28:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad2c:	d402      	bmi.n	800ad34 <_printf_i+0xe8>
 800ad2e:	0649      	lsls	r1, r1, #25
 800ad30:	bf48      	it	mi
 800ad32:	b2ad      	uxthmi	r5, r5
 800ad34:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad36:	4852      	ldr	r0, [pc, #328]	@ (800ae80 <_printf_i+0x234>)
 800ad38:	6033      	str	r3, [r6, #0]
 800ad3a:	bf14      	ite	ne
 800ad3c:	230a      	movne	r3, #10
 800ad3e:	2308      	moveq	r3, #8
 800ad40:	2100      	movs	r1, #0
 800ad42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad46:	6866      	ldr	r6, [r4, #4]
 800ad48:	60a6      	str	r6, [r4, #8]
 800ad4a:	2e00      	cmp	r6, #0
 800ad4c:	db05      	blt.n	800ad5a <_printf_i+0x10e>
 800ad4e:	6821      	ldr	r1, [r4, #0]
 800ad50:	432e      	orrs	r6, r5
 800ad52:	f021 0104 	bic.w	r1, r1, #4
 800ad56:	6021      	str	r1, [r4, #0]
 800ad58:	d04b      	beq.n	800adf2 <_printf_i+0x1a6>
 800ad5a:	4616      	mov	r6, r2
 800ad5c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad60:	fb03 5711 	mls	r7, r3, r1, r5
 800ad64:	5dc7      	ldrb	r7, [r0, r7]
 800ad66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad6a:	462f      	mov	r7, r5
 800ad6c:	42bb      	cmp	r3, r7
 800ad6e:	460d      	mov	r5, r1
 800ad70:	d9f4      	bls.n	800ad5c <_printf_i+0x110>
 800ad72:	2b08      	cmp	r3, #8
 800ad74:	d10b      	bne.n	800ad8e <_printf_i+0x142>
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	07df      	lsls	r7, r3, #31
 800ad7a:	d508      	bpl.n	800ad8e <_printf_i+0x142>
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	6861      	ldr	r1, [r4, #4]
 800ad80:	4299      	cmp	r1, r3
 800ad82:	bfde      	ittt	le
 800ad84:	2330      	movle	r3, #48	@ 0x30
 800ad86:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad8e:	1b92      	subs	r2, r2, r6
 800ad90:	6122      	str	r2, [r4, #16]
 800ad92:	f8cd a000 	str.w	sl, [sp]
 800ad96:	464b      	mov	r3, r9
 800ad98:	aa03      	add	r2, sp, #12
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	f7ff fee7 	bl	800ab70 <_printf_common>
 800ada2:	3001      	adds	r0, #1
 800ada4:	d14a      	bne.n	800ae3c <_printf_i+0x1f0>
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	b004      	add	sp, #16
 800adac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	f043 0320 	orr.w	r3, r3, #32
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	4832      	ldr	r0, [pc, #200]	@ (800ae84 <_printf_i+0x238>)
 800adba:	2778      	movs	r7, #120	@ 0x78
 800adbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	6831      	ldr	r1, [r6, #0]
 800adc4:	061f      	lsls	r7, r3, #24
 800adc6:	f851 5b04 	ldr.w	r5, [r1], #4
 800adca:	d402      	bmi.n	800add2 <_printf_i+0x186>
 800adcc:	065f      	lsls	r7, r3, #25
 800adce:	bf48      	it	mi
 800add0:	b2ad      	uxthmi	r5, r5
 800add2:	6031      	str	r1, [r6, #0]
 800add4:	07d9      	lsls	r1, r3, #31
 800add6:	bf44      	itt	mi
 800add8:	f043 0320 	orrmi.w	r3, r3, #32
 800addc:	6023      	strmi	r3, [r4, #0]
 800adde:	b11d      	cbz	r5, 800ade8 <_printf_i+0x19c>
 800ade0:	2310      	movs	r3, #16
 800ade2:	e7ad      	b.n	800ad40 <_printf_i+0xf4>
 800ade4:	4826      	ldr	r0, [pc, #152]	@ (800ae80 <_printf_i+0x234>)
 800ade6:	e7e9      	b.n	800adbc <_printf_i+0x170>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	f023 0320 	bic.w	r3, r3, #32
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	e7f6      	b.n	800ade0 <_printf_i+0x194>
 800adf2:	4616      	mov	r6, r2
 800adf4:	e7bd      	b.n	800ad72 <_printf_i+0x126>
 800adf6:	6833      	ldr	r3, [r6, #0]
 800adf8:	6825      	ldr	r5, [r4, #0]
 800adfa:	6961      	ldr	r1, [r4, #20]
 800adfc:	1d18      	adds	r0, r3, #4
 800adfe:	6030      	str	r0, [r6, #0]
 800ae00:	062e      	lsls	r6, r5, #24
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	d501      	bpl.n	800ae0a <_printf_i+0x1be>
 800ae06:	6019      	str	r1, [r3, #0]
 800ae08:	e002      	b.n	800ae10 <_printf_i+0x1c4>
 800ae0a:	0668      	lsls	r0, r5, #25
 800ae0c:	d5fb      	bpl.n	800ae06 <_printf_i+0x1ba>
 800ae0e:	8019      	strh	r1, [r3, #0]
 800ae10:	2300      	movs	r3, #0
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	4616      	mov	r6, r2
 800ae16:	e7bc      	b.n	800ad92 <_printf_i+0x146>
 800ae18:	6833      	ldr	r3, [r6, #0]
 800ae1a:	1d1a      	adds	r2, r3, #4
 800ae1c:	6032      	str	r2, [r6, #0]
 800ae1e:	681e      	ldr	r6, [r3, #0]
 800ae20:	6862      	ldr	r2, [r4, #4]
 800ae22:	2100      	movs	r1, #0
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7f5 f9d3 	bl	80001d0 <memchr>
 800ae2a:	b108      	cbz	r0, 800ae30 <_printf_i+0x1e4>
 800ae2c:	1b80      	subs	r0, r0, r6
 800ae2e:	6060      	str	r0, [r4, #4]
 800ae30:	6863      	ldr	r3, [r4, #4]
 800ae32:	6123      	str	r3, [r4, #16]
 800ae34:	2300      	movs	r3, #0
 800ae36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae3a:	e7aa      	b.n	800ad92 <_printf_i+0x146>
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	4632      	mov	r2, r6
 800ae40:	4649      	mov	r1, r9
 800ae42:	4640      	mov	r0, r8
 800ae44:	47d0      	blx	sl
 800ae46:	3001      	adds	r0, #1
 800ae48:	d0ad      	beq.n	800ada6 <_printf_i+0x15a>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	079b      	lsls	r3, r3, #30
 800ae4e:	d413      	bmi.n	800ae78 <_printf_i+0x22c>
 800ae50:	68e0      	ldr	r0, [r4, #12]
 800ae52:	9b03      	ldr	r3, [sp, #12]
 800ae54:	4298      	cmp	r0, r3
 800ae56:	bfb8      	it	lt
 800ae58:	4618      	movlt	r0, r3
 800ae5a:	e7a6      	b.n	800adaa <_printf_i+0x15e>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4632      	mov	r2, r6
 800ae60:	4649      	mov	r1, r9
 800ae62:	4640      	mov	r0, r8
 800ae64:	47d0      	blx	sl
 800ae66:	3001      	adds	r0, #1
 800ae68:	d09d      	beq.n	800ada6 <_printf_i+0x15a>
 800ae6a:	3501      	adds	r5, #1
 800ae6c:	68e3      	ldr	r3, [r4, #12]
 800ae6e:	9903      	ldr	r1, [sp, #12]
 800ae70:	1a5b      	subs	r3, r3, r1
 800ae72:	42ab      	cmp	r3, r5
 800ae74:	dcf2      	bgt.n	800ae5c <_printf_i+0x210>
 800ae76:	e7eb      	b.n	800ae50 <_printf_i+0x204>
 800ae78:	2500      	movs	r5, #0
 800ae7a:	f104 0619 	add.w	r6, r4, #25
 800ae7e:	e7f5      	b.n	800ae6c <_printf_i+0x220>
 800ae80:	0800cf7e 	.word	0x0800cf7e
 800ae84:	0800cf8f 	.word	0x0800cf8f

0800ae88 <std>:
 800ae88:	2300      	movs	r3, #0
 800ae8a:	b510      	push	{r4, lr}
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae96:	6083      	str	r3, [r0, #8]
 800ae98:	8181      	strh	r1, [r0, #12]
 800ae9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae9c:	81c2      	strh	r2, [r0, #14]
 800ae9e:	6183      	str	r3, [r0, #24]
 800aea0:	4619      	mov	r1, r3
 800aea2:	2208      	movs	r2, #8
 800aea4:	305c      	adds	r0, #92	@ 0x5c
 800aea6:	f000 f8f4 	bl	800b092 <memset>
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aee0 <std+0x58>)
 800aeac:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeae:	4b0d      	ldr	r3, [pc, #52]	@ (800aee4 <std+0x5c>)
 800aeb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	@ (800aee8 <std+0x60>)
 800aeb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800aeec <std+0x64>)
 800aeb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeba:	4b0d      	ldr	r3, [pc, #52]	@ (800aef0 <std+0x68>)
 800aebc:	6224      	str	r4, [r4, #32]
 800aebe:	429c      	cmp	r4, r3
 800aec0:	d006      	beq.n	800aed0 <std+0x48>
 800aec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aec6:	4294      	cmp	r4, r2
 800aec8:	d002      	beq.n	800aed0 <std+0x48>
 800aeca:	33d0      	adds	r3, #208	@ 0xd0
 800aecc:	429c      	cmp	r4, r3
 800aece:	d105      	bne.n	800aedc <std+0x54>
 800aed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed8:	f000 b958 	b.w	800b18c <__retarget_lock_init_recursive>
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	bf00      	nop
 800aee0:	0800b00d 	.word	0x0800b00d
 800aee4:	0800b02f 	.word	0x0800b02f
 800aee8:	0800b067 	.word	0x0800b067
 800aeec:	0800b08b 	.word	0x0800b08b
 800aef0:	200021e4 	.word	0x200021e4

0800aef4 <stdio_exit_handler>:
 800aef4:	4a02      	ldr	r2, [pc, #8]	@ (800af00 <stdio_exit_handler+0xc>)
 800aef6:	4903      	ldr	r1, [pc, #12]	@ (800af04 <stdio_exit_handler+0x10>)
 800aef8:	4803      	ldr	r0, [pc, #12]	@ (800af08 <stdio_exit_handler+0x14>)
 800aefa:	f000 b869 	b.w	800afd0 <_fwalk_sglue>
 800aefe:	bf00      	nop
 800af00:	20000108 	.word	0x20000108
 800af04:	0800cac9 	.word	0x0800cac9
 800af08:	20000118 	.word	0x20000118

0800af0c <cleanup_stdio>:
 800af0c:	6841      	ldr	r1, [r0, #4]
 800af0e:	4b0c      	ldr	r3, [pc, #48]	@ (800af40 <cleanup_stdio+0x34>)
 800af10:	4299      	cmp	r1, r3
 800af12:	b510      	push	{r4, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	d001      	beq.n	800af1c <cleanup_stdio+0x10>
 800af18:	f001 fdd6 	bl	800cac8 <_fflush_r>
 800af1c:	68a1      	ldr	r1, [r4, #8]
 800af1e:	4b09      	ldr	r3, [pc, #36]	@ (800af44 <cleanup_stdio+0x38>)
 800af20:	4299      	cmp	r1, r3
 800af22:	d002      	beq.n	800af2a <cleanup_stdio+0x1e>
 800af24:	4620      	mov	r0, r4
 800af26:	f001 fdcf 	bl	800cac8 <_fflush_r>
 800af2a:	68e1      	ldr	r1, [r4, #12]
 800af2c:	4b06      	ldr	r3, [pc, #24]	@ (800af48 <cleanup_stdio+0x3c>)
 800af2e:	4299      	cmp	r1, r3
 800af30:	d004      	beq.n	800af3c <cleanup_stdio+0x30>
 800af32:	4620      	mov	r0, r4
 800af34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af38:	f001 bdc6 	b.w	800cac8 <_fflush_r>
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	bf00      	nop
 800af40:	200021e4 	.word	0x200021e4
 800af44:	2000224c 	.word	0x2000224c
 800af48:	200022b4 	.word	0x200022b4

0800af4c <global_stdio_init.part.0>:
 800af4c:	b510      	push	{r4, lr}
 800af4e:	4b0b      	ldr	r3, [pc, #44]	@ (800af7c <global_stdio_init.part.0+0x30>)
 800af50:	4c0b      	ldr	r4, [pc, #44]	@ (800af80 <global_stdio_init.part.0+0x34>)
 800af52:	4a0c      	ldr	r2, [pc, #48]	@ (800af84 <global_stdio_init.part.0+0x38>)
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	4620      	mov	r0, r4
 800af58:	2200      	movs	r2, #0
 800af5a:	2104      	movs	r1, #4
 800af5c:	f7ff ff94 	bl	800ae88 <std>
 800af60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af64:	2201      	movs	r2, #1
 800af66:	2109      	movs	r1, #9
 800af68:	f7ff ff8e 	bl	800ae88 <std>
 800af6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af70:	2202      	movs	r2, #2
 800af72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af76:	2112      	movs	r1, #18
 800af78:	f7ff bf86 	b.w	800ae88 <std>
 800af7c:	2000231c 	.word	0x2000231c
 800af80:	200021e4 	.word	0x200021e4
 800af84:	0800aef5 	.word	0x0800aef5

0800af88 <__sfp_lock_acquire>:
 800af88:	4801      	ldr	r0, [pc, #4]	@ (800af90 <__sfp_lock_acquire+0x8>)
 800af8a:	f000 b900 	b.w	800b18e <__retarget_lock_acquire_recursive>
 800af8e:	bf00      	nop
 800af90:	20002325 	.word	0x20002325

0800af94 <__sfp_lock_release>:
 800af94:	4801      	ldr	r0, [pc, #4]	@ (800af9c <__sfp_lock_release+0x8>)
 800af96:	f000 b8fb 	b.w	800b190 <__retarget_lock_release_recursive>
 800af9a:	bf00      	nop
 800af9c:	20002325 	.word	0x20002325

0800afa0 <__sinit>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	4604      	mov	r4, r0
 800afa4:	f7ff fff0 	bl	800af88 <__sfp_lock_acquire>
 800afa8:	6a23      	ldr	r3, [r4, #32]
 800afaa:	b11b      	cbz	r3, 800afb4 <__sinit+0x14>
 800afac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb0:	f7ff bff0 	b.w	800af94 <__sfp_lock_release>
 800afb4:	4b04      	ldr	r3, [pc, #16]	@ (800afc8 <__sinit+0x28>)
 800afb6:	6223      	str	r3, [r4, #32]
 800afb8:	4b04      	ldr	r3, [pc, #16]	@ (800afcc <__sinit+0x2c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f5      	bne.n	800afac <__sinit+0xc>
 800afc0:	f7ff ffc4 	bl	800af4c <global_stdio_init.part.0>
 800afc4:	e7f2      	b.n	800afac <__sinit+0xc>
 800afc6:	bf00      	nop
 800afc8:	0800af0d 	.word	0x0800af0d
 800afcc:	2000231c 	.word	0x2000231c

0800afd0 <_fwalk_sglue>:
 800afd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	4607      	mov	r7, r0
 800afd6:	4688      	mov	r8, r1
 800afd8:	4614      	mov	r4, r2
 800afda:	2600      	movs	r6, #0
 800afdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afe0:	f1b9 0901 	subs.w	r9, r9, #1
 800afe4:	d505      	bpl.n	800aff2 <_fwalk_sglue+0x22>
 800afe6:	6824      	ldr	r4, [r4, #0]
 800afe8:	2c00      	cmp	r4, #0
 800afea:	d1f7      	bne.n	800afdc <_fwalk_sglue+0xc>
 800afec:	4630      	mov	r0, r6
 800afee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d907      	bls.n	800b008 <_fwalk_sglue+0x38>
 800aff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800affc:	3301      	adds	r3, #1
 800affe:	d003      	beq.n	800b008 <_fwalk_sglue+0x38>
 800b000:	4629      	mov	r1, r5
 800b002:	4638      	mov	r0, r7
 800b004:	47c0      	blx	r8
 800b006:	4306      	orrs	r6, r0
 800b008:	3568      	adds	r5, #104	@ 0x68
 800b00a:	e7e9      	b.n	800afe0 <_fwalk_sglue+0x10>

0800b00c <__sread>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b014:	f000 f86c 	bl	800b0f0 <_read_r>
 800b018:	2800      	cmp	r0, #0
 800b01a:	bfab      	itete	ge
 800b01c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b01e:	89a3      	ldrhlt	r3, [r4, #12]
 800b020:	181b      	addge	r3, r3, r0
 800b022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b026:	bfac      	ite	ge
 800b028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b02a:	81a3      	strhlt	r3, [r4, #12]
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <__swrite>:
 800b02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	461f      	mov	r7, r3
 800b034:	898b      	ldrh	r3, [r1, #12]
 800b036:	05db      	lsls	r3, r3, #23
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	4616      	mov	r6, r2
 800b03e:	d505      	bpl.n	800b04c <__swrite+0x1e>
 800b040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b044:	2302      	movs	r3, #2
 800b046:	2200      	movs	r2, #0
 800b048:	f000 f840 	bl	800b0cc <_lseek_r>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	4628      	mov	r0, r5
 800b05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b062:	f000 b857 	b.w	800b114 <_write_r>

0800b066 <__sseek>:
 800b066:	b510      	push	{r4, lr}
 800b068:	460c      	mov	r4, r1
 800b06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06e:	f000 f82d 	bl	800b0cc <_lseek_r>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	bf15      	itete	ne
 800b078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b07a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b07e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b082:	81a3      	strheq	r3, [r4, #12]
 800b084:	bf18      	it	ne
 800b086:	81a3      	strhne	r3, [r4, #12]
 800b088:	bd10      	pop	{r4, pc}

0800b08a <__sclose>:
 800b08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08e:	f000 b80d 	b.w	800b0ac <_close_r>

0800b092 <memset>:
 800b092:	4402      	add	r2, r0
 800b094:	4603      	mov	r3, r0
 800b096:	4293      	cmp	r3, r2
 800b098:	d100      	bne.n	800b09c <memset+0xa>
 800b09a:	4770      	bx	lr
 800b09c:	f803 1b01 	strb.w	r1, [r3], #1
 800b0a0:	e7f9      	b.n	800b096 <memset+0x4>
	...

0800b0a4 <_localeconv_r>:
 800b0a4:	4800      	ldr	r0, [pc, #0]	@ (800b0a8 <_localeconv_r+0x4>)
 800b0a6:	4770      	bx	lr
 800b0a8:	20000254 	.word	0x20000254

0800b0ac <_close_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d06      	ldr	r5, [pc, #24]	@ (800b0c8 <_close_r+0x1c>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	f7f6 fc1c 	bl	80018f4 <_close>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_close_r+0x1a>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_close_r+0x1a>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	20002320 	.word	0x20002320

0800b0cc <_lseek_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d07      	ldr	r5, [pc, #28]	@ (800b0ec <_lseek_r+0x20>)
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	602a      	str	r2, [r5, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	f7f6 fc31 	bl	8001942 <_lseek>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_lseek_r+0x1e>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_lseek_r+0x1e>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	20002320 	.word	0x20002320

0800b0f0 <_read_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d07      	ldr	r5, [pc, #28]	@ (800b110 <_read_r+0x20>)
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	602a      	str	r2, [r5, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f7f6 fbdb 	bl	80018ba <_read>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <_read_r+0x1e>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	b103      	cbz	r3, 800b10e <_read_r+0x1e>
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	20002320 	.word	0x20002320

0800b114 <_write_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4d07      	ldr	r5, [pc, #28]	@ (800b134 <_write_r+0x20>)
 800b118:	4604      	mov	r4, r0
 800b11a:	4608      	mov	r0, r1
 800b11c:	4611      	mov	r1, r2
 800b11e:	2200      	movs	r2, #0
 800b120:	602a      	str	r2, [r5, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	f7f6 fc1a 	bl	800195c <_write>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_write_r+0x1e>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_write_r+0x1e>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	20002320 	.word	0x20002320

0800b138 <__errno>:
 800b138:	4b01      	ldr	r3, [pc, #4]	@ (800b140 <__errno+0x8>)
 800b13a:	6818      	ldr	r0, [r3, #0]
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	20000114 	.word	0x20000114

0800b144 <__libc_init_array>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	4d0d      	ldr	r5, [pc, #52]	@ (800b17c <__libc_init_array+0x38>)
 800b148:	4c0d      	ldr	r4, [pc, #52]	@ (800b180 <__libc_init_array+0x3c>)
 800b14a:	1b64      	subs	r4, r4, r5
 800b14c:	10a4      	asrs	r4, r4, #2
 800b14e:	2600      	movs	r6, #0
 800b150:	42a6      	cmp	r6, r4
 800b152:	d109      	bne.n	800b168 <__libc_init_array+0x24>
 800b154:	4d0b      	ldr	r5, [pc, #44]	@ (800b184 <__libc_init_array+0x40>)
 800b156:	4c0c      	ldr	r4, [pc, #48]	@ (800b188 <__libc_init_array+0x44>)
 800b158:	f001 fec4 	bl	800cee4 <_init>
 800b15c:	1b64      	subs	r4, r4, r5
 800b15e:	10a4      	asrs	r4, r4, #2
 800b160:	2600      	movs	r6, #0
 800b162:	42a6      	cmp	r6, r4
 800b164:	d105      	bne.n	800b172 <__libc_init_array+0x2e>
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	f855 3b04 	ldr.w	r3, [r5], #4
 800b16c:	4798      	blx	r3
 800b16e:	3601      	adds	r6, #1
 800b170:	e7ee      	b.n	800b150 <__libc_init_array+0xc>
 800b172:	f855 3b04 	ldr.w	r3, [r5], #4
 800b176:	4798      	blx	r3
 800b178:	3601      	adds	r6, #1
 800b17a:	e7f2      	b.n	800b162 <__libc_init_array+0x1e>
 800b17c:	0800d2ec 	.word	0x0800d2ec
 800b180:	0800d2ec 	.word	0x0800d2ec
 800b184:	0800d2ec 	.word	0x0800d2ec
 800b188:	0800d2f0 	.word	0x0800d2f0

0800b18c <__retarget_lock_init_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <__retarget_lock_acquire_recursive>:
 800b18e:	4770      	bx	lr

0800b190 <__retarget_lock_release_recursive>:
 800b190:	4770      	bx	lr

0800b192 <quorem>:
 800b192:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b196:	6903      	ldr	r3, [r0, #16]
 800b198:	690c      	ldr	r4, [r1, #16]
 800b19a:	42a3      	cmp	r3, r4
 800b19c:	4607      	mov	r7, r0
 800b19e:	db7e      	blt.n	800b29e <quorem+0x10c>
 800b1a0:	3c01      	subs	r4, #1
 800b1a2:	f101 0814 	add.w	r8, r1, #20
 800b1a6:	00a3      	lsls	r3, r4, #2
 800b1a8:	f100 0514 	add.w	r5, r0, #20
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1c8:	d32e      	bcc.n	800b228 <quorem+0x96>
 800b1ca:	f04f 0a00 	mov.w	sl, #0
 800b1ce:	46c4      	mov	ip, r8
 800b1d0:	46ae      	mov	lr, r5
 800b1d2:	46d3      	mov	fp, sl
 800b1d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1d8:	b298      	uxth	r0, r3
 800b1da:	fb06 a000 	mla	r0, r6, r0, sl
 800b1de:	0c02      	lsrs	r2, r0, #16
 800b1e0:	0c1b      	lsrs	r3, r3, #16
 800b1e2:	fb06 2303 	mla	r3, r6, r3, r2
 800b1e6:	f8de 2000 	ldr.w	r2, [lr]
 800b1ea:	b280      	uxth	r0, r0
 800b1ec:	b292      	uxth	r2, r2
 800b1ee:	1a12      	subs	r2, r2, r0
 800b1f0:	445a      	add	r2, fp
 800b1f2:	f8de 0000 	ldr.w	r0, [lr]
 800b1f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b200:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b204:	b292      	uxth	r2, r2
 800b206:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b20a:	45e1      	cmp	r9, ip
 800b20c:	f84e 2b04 	str.w	r2, [lr], #4
 800b210:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b214:	d2de      	bcs.n	800b1d4 <quorem+0x42>
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	58eb      	ldr	r3, [r5, r3]
 800b21a:	b92b      	cbnz	r3, 800b228 <quorem+0x96>
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	3b04      	subs	r3, #4
 800b220:	429d      	cmp	r5, r3
 800b222:	461a      	mov	r2, r3
 800b224:	d32f      	bcc.n	800b286 <quorem+0xf4>
 800b226:	613c      	str	r4, [r7, #16]
 800b228:	4638      	mov	r0, r7
 800b22a:	f001 f97f 	bl	800c52c <__mcmp>
 800b22e:	2800      	cmp	r0, #0
 800b230:	db25      	blt.n	800b27e <quorem+0xec>
 800b232:	4629      	mov	r1, r5
 800b234:	2000      	movs	r0, #0
 800b236:	f858 2b04 	ldr.w	r2, [r8], #4
 800b23a:	f8d1 c000 	ldr.w	ip, [r1]
 800b23e:	fa1f fe82 	uxth.w	lr, r2
 800b242:	fa1f f38c 	uxth.w	r3, ip
 800b246:	eba3 030e 	sub.w	r3, r3, lr
 800b24a:	4403      	add	r3, r0
 800b24c:	0c12      	lsrs	r2, r2, #16
 800b24e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b252:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b256:	b29b      	uxth	r3, r3
 800b258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b25c:	45c1      	cmp	r9, r8
 800b25e:	f841 3b04 	str.w	r3, [r1], #4
 800b262:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b266:	d2e6      	bcs.n	800b236 <quorem+0xa4>
 800b268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b270:	b922      	cbnz	r2, 800b27c <quorem+0xea>
 800b272:	3b04      	subs	r3, #4
 800b274:	429d      	cmp	r5, r3
 800b276:	461a      	mov	r2, r3
 800b278:	d30b      	bcc.n	800b292 <quorem+0x100>
 800b27a:	613c      	str	r4, [r7, #16]
 800b27c:	3601      	adds	r6, #1
 800b27e:	4630      	mov	r0, r6
 800b280:	b003      	add	sp, #12
 800b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	3b04      	subs	r3, #4
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	d1cb      	bne.n	800b226 <quorem+0x94>
 800b28e:	3c01      	subs	r4, #1
 800b290:	e7c6      	b.n	800b220 <quorem+0x8e>
 800b292:	6812      	ldr	r2, [r2, #0]
 800b294:	3b04      	subs	r3, #4
 800b296:	2a00      	cmp	r2, #0
 800b298:	d1ef      	bne.n	800b27a <quorem+0xe8>
 800b29a:	3c01      	subs	r4, #1
 800b29c:	e7ea      	b.n	800b274 <quorem+0xe2>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	e7ee      	b.n	800b280 <quorem+0xee>
 800b2a2:	0000      	movs	r0, r0
 800b2a4:	0000      	movs	r0, r0
	...

0800b2a8 <_dtoa_r>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	69c7      	ldr	r7, [r0, #28]
 800b2ae:	b097      	sub	sp, #92	@ 0x5c
 800b2b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b2b4:	ec55 4b10 	vmov	r4, r5, d0
 800b2b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b2ba:	9107      	str	r1, [sp, #28]
 800b2bc:	4681      	mov	r9, r0
 800b2be:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2c2:	b97f      	cbnz	r7, 800b2e4 <_dtoa_r+0x3c>
 800b2c4:	2010      	movs	r0, #16
 800b2c6:	f000 fe09 	bl	800bedc <malloc>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	f8c9 001c 	str.w	r0, [r9, #28]
 800b2d0:	b920      	cbnz	r0, 800b2dc <_dtoa_r+0x34>
 800b2d2:	4ba9      	ldr	r3, [pc, #676]	@ (800b578 <_dtoa_r+0x2d0>)
 800b2d4:	21ef      	movs	r1, #239	@ 0xef
 800b2d6:	48a9      	ldr	r0, [pc, #676]	@ (800b57c <_dtoa_r+0x2d4>)
 800b2d8:	f001 fcd0 	bl	800cc7c <__assert_func>
 800b2dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2e0:	6007      	str	r7, [r0, #0]
 800b2e2:	60c7      	str	r7, [r0, #12]
 800b2e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2e8:	6819      	ldr	r1, [r3, #0]
 800b2ea:	b159      	cbz	r1, 800b304 <_dtoa_r+0x5c>
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	604a      	str	r2, [r1, #4]
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	4093      	lsls	r3, r2
 800b2f4:	608b      	str	r3, [r1, #8]
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	f000 fee6 	bl	800c0c8 <_Bfree>
 800b2fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	1e2b      	subs	r3, r5, #0
 800b306:	bfb9      	ittee	lt
 800b308:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b30c:	9305      	strlt	r3, [sp, #20]
 800b30e:	2300      	movge	r3, #0
 800b310:	6033      	strge	r3, [r6, #0]
 800b312:	9f05      	ldr	r7, [sp, #20]
 800b314:	4b9a      	ldr	r3, [pc, #616]	@ (800b580 <_dtoa_r+0x2d8>)
 800b316:	bfbc      	itt	lt
 800b318:	2201      	movlt	r2, #1
 800b31a:	6032      	strlt	r2, [r6, #0]
 800b31c:	43bb      	bics	r3, r7
 800b31e:	d112      	bne.n	800b346 <_dtoa_r+0x9e>
 800b320:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b322:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b32c:	4323      	orrs	r3, r4
 800b32e:	f000 855a 	beq.w	800bde6 <_dtoa_r+0xb3e>
 800b332:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b334:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b594 <_dtoa_r+0x2ec>
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 855c 	beq.w	800bdf6 <_dtoa_r+0xb4e>
 800b33e:	f10a 0303 	add.w	r3, sl, #3
 800b342:	f000 bd56 	b.w	800bdf2 <_dtoa_r+0xb4a>
 800b346:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b34a:	2200      	movs	r2, #0
 800b34c:	ec51 0b17 	vmov	r0, r1, d7
 800b350:	2300      	movs	r3, #0
 800b352:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b356:	f7f5 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b35a:	4680      	mov	r8, r0
 800b35c:	b158      	cbz	r0, 800b376 <_dtoa_r+0xce>
 800b35e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b360:	2301      	movs	r3, #1
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b366:	b113      	cbz	r3, 800b36e <_dtoa_r+0xc6>
 800b368:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b36a:	4b86      	ldr	r3, [pc, #536]	@ (800b584 <_dtoa_r+0x2dc>)
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b598 <_dtoa_r+0x2f0>
 800b372:	f000 bd40 	b.w	800bdf6 <_dtoa_r+0xb4e>
 800b376:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b37a:	aa14      	add	r2, sp, #80	@ 0x50
 800b37c:	a915      	add	r1, sp, #84	@ 0x54
 800b37e:	4648      	mov	r0, r9
 800b380:	f001 f984 	bl	800c68c <__d2b>
 800b384:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b388:	9002      	str	r0, [sp, #8]
 800b38a:	2e00      	cmp	r6, #0
 800b38c:	d078      	beq.n	800b480 <_dtoa_r+0x1d8>
 800b38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b390:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b398:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b39c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4b76      	ldr	r3, [pc, #472]	@ (800b588 <_dtoa_r+0x2e0>)
 800b3ae:	f7f4 ff6b 	bl	8000288 <__aeabi_dsub>
 800b3b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800b560 <_dtoa_r+0x2b8>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	f7f5 f91e 	bl	80005f8 <__aeabi_dmul>
 800b3bc:	a36a      	add	r3, pc, #424	@ (adr r3, 800b568 <_dtoa_r+0x2c0>)
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f7f4 ff63 	bl	800028c <__adddf3>
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	f7f5 f8aa 	bl	8000524 <__aeabi_i2d>
 800b3d0:	a367      	add	r3, pc, #412	@ (adr r3, 800b570 <_dtoa_r+0x2c8>)
 800b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d6:	f7f5 f90f 	bl	80005f8 <__aeabi_dmul>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f4 ff53 	bl	800028c <__adddf3>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	f7f5 fbb5 	bl	8000b58 <__aeabi_d2iz>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	4607      	mov	r7, r0
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f5 fb70 	bl	8000adc <__aeabi_dcmplt>
 800b3fc:	b140      	cbz	r0, 800b410 <_dtoa_r+0x168>
 800b3fe:	4638      	mov	r0, r7
 800b400:	f7f5 f890 	bl	8000524 <__aeabi_i2d>
 800b404:	4622      	mov	r2, r4
 800b406:	462b      	mov	r3, r5
 800b408:	f7f5 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b40c:	b900      	cbnz	r0, 800b410 <_dtoa_r+0x168>
 800b40e:	3f01      	subs	r7, #1
 800b410:	2f16      	cmp	r7, #22
 800b412:	d852      	bhi.n	800b4ba <_dtoa_r+0x212>
 800b414:	4b5d      	ldr	r3, [pc, #372]	@ (800b58c <_dtoa_r+0x2e4>)
 800b416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b422:	f7f5 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	d049      	beq.n	800b4be <_dtoa_r+0x216>
 800b42a:	3f01      	subs	r7, #1
 800b42c:	2300      	movs	r3, #0
 800b42e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b430:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b432:	1b9b      	subs	r3, r3, r6
 800b434:	1e5a      	subs	r2, r3, #1
 800b436:	bf45      	ittet	mi
 800b438:	f1c3 0301 	rsbmi	r3, r3, #1
 800b43c:	9300      	strmi	r3, [sp, #0]
 800b43e:	2300      	movpl	r3, #0
 800b440:	2300      	movmi	r3, #0
 800b442:	9206      	str	r2, [sp, #24]
 800b444:	bf54      	ite	pl
 800b446:	9300      	strpl	r3, [sp, #0]
 800b448:	9306      	strmi	r3, [sp, #24]
 800b44a:	2f00      	cmp	r7, #0
 800b44c:	db39      	blt.n	800b4c2 <_dtoa_r+0x21a>
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	970d      	str	r7, [sp, #52]	@ 0x34
 800b452:	443b      	add	r3, r7
 800b454:	9306      	str	r3, [sp, #24]
 800b456:	2300      	movs	r3, #0
 800b458:	9308      	str	r3, [sp, #32]
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	2b09      	cmp	r3, #9
 800b45e:	d863      	bhi.n	800b528 <_dtoa_r+0x280>
 800b460:	2b05      	cmp	r3, #5
 800b462:	bfc4      	itt	gt
 800b464:	3b04      	subgt	r3, #4
 800b466:	9307      	strgt	r3, [sp, #28]
 800b468:	9b07      	ldr	r3, [sp, #28]
 800b46a:	f1a3 0302 	sub.w	r3, r3, #2
 800b46e:	bfcc      	ite	gt
 800b470:	2400      	movgt	r4, #0
 800b472:	2401      	movle	r4, #1
 800b474:	2b03      	cmp	r3, #3
 800b476:	d863      	bhi.n	800b540 <_dtoa_r+0x298>
 800b478:	e8df f003 	tbb	[pc, r3]
 800b47c:	2b375452 	.word	0x2b375452
 800b480:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b484:	441e      	add	r6, r3
 800b486:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b48a:	2b20      	cmp	r3, #32
 800b48c:	bfc1      	itttt	gt
 800b48e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b492:	409f      	lslgt	r7, r3
 800b494:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b498:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b49c:	bfd6      	itet	le
 800b49e:	f1c3 0320 	rsble	r3, r3, #32
 800b4a2:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4a6:	fa04 f003 	lslle.w	r0, r4, r3
 800b4aa:	f7f5 f82b 	bl	8000504 <__aeabi_ui2d>
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4b4:	3e01      	subs	r6, #1
 800b4b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800b4b8:	e776      	b.n	800b3a8 <_dtoa_r+0x100>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e7b7      	b.n	800b42e <_dtoa_r+0x186>
 800b4be:	9010      	str	r0, [sp, #64]	@ 0x40
 800b4c0:	e7b6      	b.n	800b430 <_dtoa_r+0x188>
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	1bdb      	subs	r3, r3, r7
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	427b      	negs	r3, r7
 800b4ca:	9308      	str	r3, [sp, #32]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800b4d0:	e7c3      	b.n	800b45a <_dtoa_r+0x1b2>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4d8:	eb07 0b03 	add.w	fp, r7, r3
 800b4dc:	f10b 0301 	add.w	r3, fp, #1
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	9303      	str	r3, [sp, #12]
 800b4e4:	bfb8      	it	lt
 800b4e6:	2301      	movlt	r3, #1
 800b4e8:	e006      	b.n	800b4f8 <_dtoa_r+0x250>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dd28      	ble.n	800b546 <_dtoa_r+0x29e>
 800b4f4:	469b      	mov	fp, r3
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	2204      	movs	r2, #4
 800b500:	f102 0514 	add.w	r5, r2, #20
 800b504:	429d      	cmp	r5, r3
 800b506:	d926      	bls.n	800b556 <_dtoa_r+0x2ae>
 800b508:	6041      	str	r1, [r0, #4]
 800b50a:	4648      	mov	r0, r9
 800b50c:	f000 fd9c 	bl	800c048 <_Balloc>
 800b510:	4682      	mov	sl, r0
 800b512:	2800      	cmp	r0, #0
 800b514:	d142      	bne.n	800b59c <_dtoa_r+0x2f4>
 800b516:	4b1e      	ldr	r3, [pc, #120]	@ (800b590 <_dtoa_r+0x2e8>)
 800b518:	4602      	mov	r2, r0
 800b51a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b51e:	e6da      	b.n	800b2d6 <_dtoa_r+0x2e>
 800b520:	2300      	movs	r3, #0
 800b522:	e7e3      	b.n	800b4ec <_dtoa_r+0x244>
 800b524:	2300      	movs	r3, #0
 800b526:	e7d5      	b.n	800b4d4 <_dtoa_r+0x22c>
 800b528:	2401      	movs	r4, #1
 800b52a:	2300      	movs	r3, #0
 800b52c:	9307      	str	r3, [sp, #28]
 800b52e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b530:	f04f 3bff 	mov.w	fp, #4294967295
 800b534:	2200      	movs	r2, #0
 800b536:	f8cd b00c 	str.w	fp, [sp, #12]
 800b53a:	2312      	movs	r3, #18
 800b53c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b53e:	e7db      	b.n	800b4f8 <_dtoa_r+0x250>
 800b540:	2301      	movs	r3, #1
 800b542:	9309      	str	r3, [sp, #36]	@ 0x24
 800b544:	e7f4      	b.n	800b530 <_dtoa_r+0x288>
 800b546:	f04f 0b01 	mov.w	fp, #1
 800b54a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b54e:	465b      	mov	r3, fp
 800b550:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b554:	e7d0      	b.n	800b4f8 <_dtoa_r+0x250>
 800b556:	3101      	adds	r1, #1
 800b558:	0052      	lsls	r2, r2, #1
 800b55a:	e7d1      	b.n	800b500 <_dtoa_r+0x258>
 800b55c:	f3af 8000 	nop.w
 800b560:	636f4361 	.word	0x636f4361
 800b564:	3fd287a7 	.word	0x3fd287a7
 800b568:	8b60c8b3 	.word	0x8b60c8b3
 800b56c:	3fc68a28 	.word	0x3fc68a28
 800b570:	509f79fb 	.word	0x509f79fb
 800b574:	3fd34413 	.word	0x3fd34413
 800b578:	0800cfad 	.word	0x0800cfad
 800b57c:	0800cfc4 	.word	0x0800cfc4
 800b580:	7ff00000 	.word	0x7ff00000
 800b584:	0800cf7d 	.word	0x0800cf7d
 800b588:	3ff80000 	.word	0x3ff80000
 800b58c:	0800d118 	.word	0x0800d118
 800b590:	0800d01c 	.word	0x0800d01c
 800b594:	0800cfa9 	.word	0x0800cfa9
 800b598:	0800cf7c 	.word	0x0800cf7c
 800b59c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b5a0:	6018      	str	r0, [r3, #0]
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	2b0e      	cmp	r3, #14
 800b5a6:	f200 80a1 	bhi.w	800b6ec <_dtoa_r+0x444>
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	f000 809e 	beq.w	800b6ec <_dtoa_r+0x444>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	dd33      	ble.n	800b61c <_dtoa_r+0x374>
 800b5b4:	4b9c      	ldr	r3, [pc, #624]	@ (800b828 <_dtoa_r+0x580>)
 800b5b6:	f007 020f 	and.w	r2, r7, #15
 800b5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5be:	ed93 7b00 	vldr	d7, [r3]
 800b5c2:	05f8      	lsls	r0, r7, #23
 800b5c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b5c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b5cc:	d516      	bpl.n	800b5fc <_dtoa_r+0x354>
 800b5ce:	4b97      	ldr	r3, [pc, #604]	@ (800b82c <_dtoa_r+0x584>)
 800b5d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5d8:	f7f5 f938 	bl	800084c <__aeabi_ddiv>
 800b5dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5e0:	f004 040f 	and.w	r4, r4, #15
 800b5e4:	2603      	movs	r6, #3
 800b5e6:	4d91      	ldr	r5, [pc, #580]	@ (800b82c <_dtoa_r+0x584>)
 800b5e8:	b954      	cbnz	r4, 800b600 <_dtoa_r+0x358>
 800b5ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5f2:	f7f5 f92b 	bl	800084c <__aeabi_ddiv>
 800b5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5fa:	e028      	b.n	800b64e <_dtoa_r+0x3a6>
 800b5fc:	2602      	movs	r6, #2
 800b5fe:	e7f2      	b.n	800b5e6 <_dtoa_r+0x33e>
 800b600:	07e1      	lsls	r1, r4, #31
 800b602:	d508      	bpl.n	800b616 <_dtoa_r+0x36e>
 800b604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b60c:	f7f4 fff4 	bl	80005f8 <__aeabi_dmul>
 800b610:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b614:	3601      	adds	r6, #1
 800b616:	1064      	asrs	r4, r4, #1
 800b618:	3508      	adds	r5, #8
 800b61a:	e7e5      	b.n	800b5e8 <_dtoa_r+0x340>
 800b61c:	f000 80af 	beq.w	800b77e <_dtoa_r+0x4d6>
 800b620:	427c      	negs	r4, r7
 800b622:	4b81      	ldr	r3, [pc, #516]	@ (800b828 <_dtoa_r+0x580>)
 800b624:	4d81      	ldr	r5, [pc, #516]	@ (800b82c <_dtoa_r+0x584>)
 800b626:	f004 020f 	and.w	r2, r4, #15
 800b62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b636:	f7f4 ffdf 	bl	80005f8 <__aeabi_dmul>
 800b63a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b63e:	1124      	asrs	r4, r4, #4
 800b640:	2300      	movs	r3, #0
 800b642:	2602      	movs	r6, #2
 800b644:	2c00      	cmp	r4, #0
 800b646:	f040 808f 	bne.w	800b768 <_dtoa_r+0x4c0>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1d3      	bne.n	800b5f6 <_dtoa_r+0x34e>
 800b64e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b650:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8094 	beq.w	800b782 <_dtoa_r+0x4da>
 800b65a:	4b75      	ldr	r3, [pc, #468]	@ (800b830 <_dtoa_r+0x588>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f5 fa3b 	bl	8000adc <__aeabi_dcmplt>
 800b666:	2800      	cmp	r0, #0
 800b668:	f000 808b 	beq.w	800b782 <_dtoa_r+0x4da>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 8087 	beq.w	800b782 <_dtoa_r+0x4da>
 800b674:	f1bb 0f00 	cmp.w	fp, #0
 800b678:	dd34      	ble.n	800b6e4 <_dtoa_r+0x43c>
 800b67a:	4620      	mov	r0, r4
 800b67c:	4b6d      	ldr	r3, [pc, #436]	@ (800b834 <_dtoa_r+0x58c>)
 800b67e:	2200      	movs	r2, #0
 800b680:	4629      	mov	r1, r5
 800b682:	f7f4 ffb9 	bl	80005f8 <__aeabi_dmul>
 800b686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b68a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b68e:	3601      	adds	r6, #1
 800b690:	465c      	mov	r4, fp
 800b692:	4630      	mov	r0, r6
 800b694:	f7f4 ff46 	bl	8000524 <__aeabi_i2d>
 800b698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	4b65      	ldr	r3, [pc, #404]	@ (800b838 <_dtoa_r+0x590>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f7f4 fdf2 	bl	800028c <__adddf3>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	d16a      	bne.n	800b788 <_dtoa_r+0x4e0>
 800b6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6b6:	4b61      	ldr	r3, [pc, #388]	@ (800b83c <_dtoa_r+0x594>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f7f4 fde5 	bl	8000288 <__aeabi_dsub>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4633      	mov	r3, r6
 800b6ca:	f7f5 fa25 	bl	8000b18 <__aeabi_dcmpgt>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f040 8298 	bne.w	800bc04 <_dtoa_r+0x95c>
 800b6d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6d8:	462a      	mov	r2, r5
 800b6da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b6de:	f7f5 f9fd 	bl	8000adc <__aeabi_dcmplt>
 800b6e2:	bb38      	cbnz	r0, 800b734 <_dtoa_r+0x48c>
 800b6e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b6e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b6ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f2c0 8157 	blt.w	800b9a2 <_dtoa_r+0x6fa>
 800b6f4:	2f0e      	cmp	r7, #14
 800b6f6:	f300 8154 	bgt.w	800b9a2 <_dtoa_r+0x6fa>
 800b6fa:	4b4b      	ldr	r3, [pc, #300]	@ (800b828 <_dtoa_r+0x580>)
 800b6fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b700:	ed93 7b00 	vldr	d7, [r3]
 800b704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b706:	2b00      	cmp	r3, #0
 800b708:	ed8d 7b00 	vstr	d7, [sp]
 800b70c:	f280 80e5 	bge.w	800b8da <_dtoa_r+0x632>
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	f300 80e1 	bgt.w	800b8da <_dtoa_r+0x632>
 800b718:	d10c      	bne.n	800b734 <_dtoa_r+0x48c>
 800b71a:	4b48      	ldr	r3, [pc, #288]	@ (800b83c <_dtoa_r+0x594>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	ec51 0b17 	vmov	r0, r1, d7
 800b722:	f7f4 ff69 	bl	80005f8 <__aeabi_dmul>
 800b726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b72a:	f7f5 f9eb 	bl	8000b04 <__aeabi_dcmpge>
 800b72e:	2800      	cmp	r0, #0
 800b730:	f000 8266 	beq.w	800bc00 <_dtoa_r+0x958>
 800b734:	2400      	movs	r4, #0
 800b736:	4625      	mov	r5, r4
 800b738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b73a:	4656      	mov	r6, sl
 800b73c:	ea6f 0803 	mvn.w	r8, r3
 800b740:	2700      	movs	r7, #0
 800b742:	4621      	mov	r1, r4
 800b744:	4648      	mov	r0, r9
 800b746:	f000 fcbf 	bl	800c0c8 <_Bfree>
 800b74a:	2d00      	cmp	r5, #0
 800b74c:	f000 80bd 	beq.w	800b8ca <_dtoa_r+0x622>
 800b750:	b12f      	cbz	r7, 800b75e <_dtoa_r+0x4b6>
 800b752:	42af      	cmp	r7, r5
 800b754:	d003      	beq.n	800b75e <_dtoa_r+0x4b6>
 800b756:	4639      	mov	r1, r7
 800b758:	4648      	mov	r0, r9
 800b75a:	f000 fcb5 	bl	800c0c8 <_Bfree>
 800b75e:	4629      	mov	r1, r5
 800b760:	4648      	mov	r0, r9
 800b762:	f000 fcb1 	bl	800c0c8 <_Bfree>
 800b766:	e0b0      	b.n	800b8ca <_dtoa_r+0x622>
 800b768:	07e2      	lsls	r2, r4, #31
 800b76a:	d505      	bpl.n	800b778 <_dtoa_r+0x4d0>
 800b76c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b770:	f7f4 ff42 	bl	80005f8 <__aeabi_dmul>
 800b774:	3601      	adds	r6, #1
 800b776:	2301      	movs	r3, #1
 800b778:	1064      	asrs	r4, r4, #1
 800b77a:	3508      	adds	r5, #8
 800b77c:	e762      	b.n	800b644 <_dtoa_r+0x39c>
 800b77e:	2602      	movs	r6, #2
 800b780:	e765      	b.n	800b64e <_dtoa_r+0x3a6>
 800b782:	9c03      	ldr	r4, [sp, #12]
 800b784:	46b8      	mov	r8, r7
 800b786:	e784      	b.n	800b692 <_dtoa_r+0x3ea>
 800b788:	4b27      	ldr	r3, [pc, #156]	@ (800b828 <_dtoa_r+0x580>)
 800b78a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b78c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b790:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b794:	4454      	add	r4, sl
 800b796:	2900      	cmp	r1, #0
 800b798:	d054      	beq.n	800b844 <_dtoa_r+0x59c>
 800b79a:	4929      	ldr	r1, [pc, #164]	@ (800b840 <_dtoa_r+0x598>)
 800b79c:	2000      	movs	r0, #0
 800b79e:	f7f5 f855 	bl	800084c <__aeabi_ddiv>
 800b7a2:	4633      	mov	r3, r6
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	f7f4 fd6f 	bl	8000288 <__aeabi_dsub>
 800b7aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7ae:	4656      	mov	r6, sl
 800b7b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7b4:	f7f5 f9d0 	bl	8000b58 <__aeabi_d2iz>
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	f7f4 feb3 	bl	8000524 <__aeabi_i2d>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7c6:	f7f4 fd5f 	bl	8000288 <__aeabi_dsub>
 800b7ca:	3530      	adds	r5, #48	@ 0x30
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7d4:	f806 5b01 	strb.w	r5, [r6], #1
 800b7d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7dc:	f7f5 f97e 	bl	8000adc <__aeabi_dcmplt>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d172      	bne.n	800b8ca <_dtoa_r+0x622>
 800b7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e8:	4911      	ldr	r1, [pc, #68]	@ (800b830 <_dtoa_r+0x588>)
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	f7f4 fd4c 	bl	8000288 <__aeabi_dsub>
 800b7f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7f4:	f7f5 f972 	bl	8000adc <__aeabi_dcmplt>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	f040 80b4 	bne.w	800b966 <_dtoa_r+0x6be>
 800b7fe:	42a6      	cmp	r6, r4
 800b800:	f43f af70 	beq.w	800b6e4 <_dtoa_r+0x43c>
 800b804:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b808:	4b0a      	ldr	r3, [pc, #40]	@ (800b834 <_dtoa_r+0x58c>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 fef4 	bl	80005f8 <__aeabi_dmul>
 800b810:	4b08      	ldr	r3, [pc, #32]	@ (800b834 <_dtoa_r+0x58c>)
 800b812:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b816:	2200      	movs	r2, #0
 800b818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b81c:	f7f4 feec 	bl	80005f8 <__aeabi_dmul>
 800b820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b824:	e7c4      	b.n	800b7b0 <_dtoa_r+0x508>
 800b826:	bf00      	nop
 800b828:	0800d118 	.word	0x0800d118
 800b82c:	0800d0f0 	.word	0x0800d0f0
 800b830:	3ff00000 	.word	0x3ff00000
 800b834:	40240000 	.word	0x40240000
 800b838:	401c0000 	.word	0x401c0000
 800b83c:	40140000 	.word	0x40140000
 800b840:	3fe00000 	.word	0x3fe00000
 800b844:	4631      	mov	r1, r6
 800b846:	4628      	mov	r0, r5
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b850:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b852:	4656      	mov	r6, sl
 800b854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b858:	f7f5 f97e 	bl	8000b58 <__aeabi_d2iz>
 800b85c:	4605      	mov	r5, r0
 800b85e:	f7f4 fe61 	bl	8000524 <__aeabi_i2d>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b86a:	f7f4 fd0d 	bl	8000288 <__aeabi_dsub>
 800b86e:	3530      	adds	r5, #48	@ 0x30
 800b870:	f806 5b01 	strb.w	r5, [r6], #1
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	42a6      	cmp	r6, r4
 800b87a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b87e:	f04f 0200 	mov.w	r2, #0
 800b882:	d124      	bne.n	800b8ce <_dtoa_r+0x626>
 800b884:	4baf      	ldr	r3, [pc, #700]	@ (800bb44 <_dtoa_r+0x89c>)
 800b886:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b88a:	f7f4 fcff 	bl	800028c <__adddf3>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b896:	f7f5 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d163      	bne.n	800b966 <_dtoa_r+0x6be>
 800b89e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b8a2:	49a8      	ldr	r1, [pc, #672]	@ (800bb44 <_dtoa_r+0x89c>)
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	f7f4 fcef 	bl	8000288 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8b2:	f7f5 f913 	bl	8000adc <__aeabi_dcmplt>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	f43f af14 	beq.w	800b6e4 <_dtoa_r+0x43c>
 800b8bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b8be:	1e73      	subs	r3, r6, #1
 800b8c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8c6:	2b30      	cmp	r3, #48	@ 0x30
 800b8c8:	d0f8      	beq.n	800b8bc <_dtoa_r+0x614>
 800b8ca:	4647      	mov	r7, r8
 800b8cc:	e03b      	b.n	800b946 <_dtoa_r+0x69e>
 800b8ce:	4b9e      	ldr	r3, [pc, #632]	@ (800bb48 <_dtoa_r+0x8a0>)
 800b8d0:	f7f4 fe92 	bl	80005f8 <__aeabi_dmul>
 800b8d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8d8:	e7bc      	b.n	800b854 <_dtoa_r+0x5ac>
 800b8da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b8de:	4656      	mov	r6, sl
 800b8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f7f4 ffb0 	bl	800084c <__aeabi_ddiv>
 800b8ec:	f7f5 f934 	bl	8000b58 <__aeabi_d2iz>
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	f7f4 fe17 	bl	8000524 <__aeabi_i2d>
 800b8f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8fa:	f7f4 fe7d 	bl	80005f8 <__aeabi_dmul>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b90a:	f7f4 fcbd 	bl	8000288 <__aeabi_dsub>
 800b90e:	f806 4b01 	strb.w	r4, [r6], #1
 800b912:	9d03      	ldr	r5, [sp, #12]
 800b914:	eba6 040a 	sub.w	r4, r6, sl
 800b918:	42a5      	cmp	r5, r4
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	d133      	bne.n	800b988 <_dtoa_r+0x6e0>
 800b920:	f7f4 fcb4 	bl	800028c <__adddf3>
 800b924:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	f7f5 f8f4 	bl	8000b18 <__aeabi_dcmpgt>
 800b930:	b9c0      	cbnz	r0, 800b964 <_dtoa_r+0x6bc>
 800b932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b936:	4620      	mov	r0, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	f7f5 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b93e:	b110      	cbz	r0, 800b946 <_dtoa_r+0x69e>
 800b940:	f018 0f01 	tst.w	r8, #1
 800b944:	d10e      	bne.n	800b964 <_dtoa_r+0x6bc>
 800b946:	9902      	ldr	r1, [sp, #8]
 800b948:	4648      	mov	r0, r9
 800b94a:	f000 fbbd 	bl	800c0c8 <_Bfree>
 800b94e:	2300      	movs	r3, #0
 800b950:	7033      	strb	r3, [r6, #0]
 800b952:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b954:	3701      	adds	r7, #1
 800b956:	601f      	str	r7, [r3, #0]
 800b958:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 824b 	beq.w	800bdf6 <_dtoa_r+0xb4e>
 800b960:	601e      	str	r6, [r3, #0]
 800b962:	e248      	b.n	800bdf6 <_dtoa_r+0xb4e>
 800b964:	46b8      	mov	r8, r7
 800b966:	4633      	mov	r3, r6
 800b968:	461e      	mov	r6, r3
 800b96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b96e:	2a39      	cmp	r2, #57	@ 0x39
 800b970:	d106      	bne.n	800b980 <_dtoa_r+0x6d8>
 800b972:	459a      	cmp	sl, r3
 800b974:	d1f8      	bne.n	800b968 <_dtoa_r+0x6c0>
 800b976:	2230      	movs	r2, #48	@ 0x30
 800b978:	f108 0801 	add.w	r8, r8, #1
 800b97c:	f88a 2000 	strb.w	r2, [sl]
 800b980:	781a      	ldrb	r2, [r3, #0]
 800b982:	3201      	adds	r2, #1
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	e7a0      	b.n	800b8ca <_dtoa_r+0x622>
 800b988:	4b6f      	ldr	r3, [pc, #444]	@ (800bb48 <_dtoa_r+0x8a0>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	f7f4 fe34 	bl	80005f8 <__aeabi_dmul>
 800b990:	2200      	movs	r2, #0
 800b992:	2300      	movs	r3, #0
 800b994:	4604      	mov	r4, r0
 800b996:	460d      	mov	r5, r1
 800b998:	f7f5 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d09f      	beq.n	800b8e0 <_dtoa_r+0x638>
 800b9a0:	e7d1      	b.n	800b946 <_dtoa_r+0x69e>
 800b9a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9a4:	2a00      	cmp	r2, #0
 800b9a6:	f000 80ea 	beq.w	800bb7e <_dtoa_r+0x8d6>
 800b9aa:	9a07      	ldr	r2, [sp, #28]
 800b9ac:	2a01      	cmp	r2, #1
 800b9ae:	f300 80cd 	bgt.w	800bb4c <_dtoa_r+0x8a4>
 800b9b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	f000 80c1 	beq.w	800bb3c <_dtoa_r+0x894>
 800b9ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b9be:	9c08      	ldr	r4, [sp, #32]
 800b9c0:	9e00      	ldr	r6, [sp, #0]
 800b9c2:	9a00      	ldr	r2, [sp, #0]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	9200      	str	r2, [sp, #0]
 800b9c8:	9a06      	ldr	r2, [sp, #24]
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	441a      	add	r2, r3
 800b9ce:	4648      	mov	r0, r9
 800b9d0:	9206      	str	r2, [sp, #24]
 800b9d2:	f000 fc2d 	bl	800c230 <__i2b>
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	b166      	cbz	r6, 800b9f4 <_dtoa_r+0x74c>
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dd09      	ble.n	800b9f4 <_dtoa_r+0x74c>
 800b9e0:	42b3      	cmp	r3, r6
 800b9e2:	9a00      	ldr	r2, [sp, #0]
 800b9e4:	bfa8      	it	ge
 800b9e6:	4633      	movge	r3, r6
 800b9e8:	1ad2      	subs	r2, r2, r3
 800b9ea:	9200      	str	r2, [sp, #0]
 800b9ec:	9a06      	ldr	r2, [sp, #24]
 800b9ee:	1af6      	subs	r6, r6, r3
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	9306      	str	r3, [sp, #24]
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	b30b      	cbz	r3, 800ba3c <_dtoa_r+0x794>
 800b9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 80c6 	beq.w	800bb8c <_dtoa_r+0x8e4>
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	f000 80c0 	beq.w	800bb86 <_dtoa_r+0x8de>
 800ba06:	4629      	mov	r1, r5
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4648      	mov	r0, r9
 800ba0c:	f000 fcc8 	bl	800c3a0 <__pow5mult>
 800ba10:	9a02      	ldr	r2, [sp, #8]
 800ba12:	4601      	mov	r1, r0
 800ba14:	4605      	mov	r5, r0
 800ba16:	4648      	mov	r0, r9
 800ba18:	f000 fc20 	bl	800c25c <__multiply>
 800ba1c:	9902      	ldr	r1, [sp, #8]
 800ba1e:	4680      	mov	r8, r0
 800ba20:	4648      	mov	r0, r9
 800ba22:	f000 fb51 	bl	800c0c8 <_Bfree>
 800ba26:	9b08      	ldr	r3, [sp, #32]
 800ba28:	1b1b      	subs	r3, r3, r4
 800ba2a:	9308      	str	r3, [sp, #32]
 800ba2c:	f000 80b1 	beq.w	800bb92 <_dtoa_r+0x8ea>
 800ba30:	9a08      	ldr	r2, [sp, #32]
 800ba32:	4641      	mov	r1, r8
 800ba34:	4648      	mov	r0, r9
 800ba36:	f000 fcb3 	bl	800c3a0 <__pow5mult>
 800ba3a:	9002      	str	r0, [sp, #8]
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	4648      	mov	r0, r9
 800ba40:	f000 fbf6 	bl	800c230 <__i2b>
 800ba44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba46:	4604      	mov	r4, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 81d8 	beq.w	800bdfe <_dtoa_r+0xb56>
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4601      	mov	r1, r0
 800ba52:	4648      	mov	r0, r9
 800ba54:	f000 fca4 	bl	800c3a0 <__pow5mult>
 800ba58:	9b07      	ldr	r3, [sp, #28]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	f300 809f 	bgt.w	800bba0 <_dtoa_r+0x8f8>
 800ba62:	9b04      	ldr	r3, [sp, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f040 8097 	bne.w	800bb98 <_dtoa_r+0x8f0>
 800ba6a:	9b05      	ldr	r3, [sp, #20]
 800ba6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f040 8093 	bne.w	800bb9c <_dtoa_r+0x8f4>
 800ba76:	9b05      	ldr	r3, [sp, #20]
 800ba78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba7c:	0d1b      	lsrs	r3, r3, #20
 800ba7e:	051b      	lsls	r3, r3, #20
 800ba80:	b133      	cbz	r3, 800ba90 <_dtoa_r+0x7e8>
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	3301      	adds	r3, #1
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	9b06      	ldr	r3, [sp, #24]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	9306      	str	r3, [sp, #24]
 800ba8e:	2301      	movs	r3, #1
 800ba90:	9308      	str	r3, [sp, #32]
 800ba92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 81b8 	beq.w	800be0a <_dtoa_r+0xb62>
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baa0:	6918      	ldr	r0, [r3, #16]
 800baa2:	f000 fb79 	bl	800c198 <__hi0bits>
 800baa6:	f1c0 0020 	rsb	r0, r0, #32
 800baaa:	9b06      	ldr	r3, [sp, #24]
 800baac:	4418      	add	r0, r3
 800baae:	f010 001f 	ands.w	r0, r0, #31
 800bab2:	f000 8082 	beq.w	800bbba <_dtoa_r+0x912>
 800bab6:	f1c0 0320 	rsb	r3, r0, #32
 800baba:	2b04      	cmp	r3, #4
 800babc:	dd73      	ble.n	800bba6 <_dtoa_r+0x8fe>
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	f1c0 001c 	rsb	r0, r0, #28
 800bac4:	4403      	add	r3, r0
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	9b06      	ldr	r3, [sp, #24]
 800baca:	4403      	add	r3, r0
 800bacc:	4406      	add	r6, r0
 800bace:	9306      	str	r3, [sp, #24]
 800bad0:	9b00      	ldr	r3, [sp, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd05      	ble.n	800bae2 <_dtoa_r+0x83a>
 800bad6:	9902      	ldr	r1, [sp, #8]
 800bad8:	461a      	mov	r2, r3
 800bada:	4648      	mov	r0, r9
 800badc:	f000 fcba 	bl	800c454 <__lshift>
 800bae0:	9002      	str	r0, [sp, #8]
 800bae2:	9b06      	ldr	r3, [sp, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd05      	ble.n	800baf4 <_dtoa_r+0x84c>
 800bae8:	4621      	mov	r1, r4
 800baea:	461a      	mov	r2, r3
 800baec:	4648      	mov	r0, r9
 800baee:	f000 fcb1 	bl	800c454 <__lshift>
 800baf2:	4604      	mov	r4, r0
 800baf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d061      	beq.n	800bbbe <_dtoa_r+0x916>
 800bafa:	9802      	ldr	r0, [sp, #8]
 800bafc:	4621      	mov	r1, r4
 800bafe:	f000 fd15 	bl	800c52c <__mcmp>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	da5b      	bge.n	800bbbe <_dtoa_r+0x916>
 800bb06:	2300      	movs	r3, #0
 800bb08:	9902      	ldr	r1, [sp, #8]
 800bb0a:	220a      	movs	r2, #10
 800bb0c:	4648      	mov	r0, r9
 800bb0e:	f000 fafd 	bl	800c10c <__multadd>
 800bb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb14:	9002      	str	r0, [sp, #8]
 800bb16:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 8177 	beq.w	800be0e <_dtoa_r+0xb66>
 800bb20:	4629      	mov	r1, r5
 800bb22:	2300      	movs	r3, #0
 800bb24:	220a      	movs	r2, #10
 800bb26:	4648      	mov	r0, r9
 800bb28:	f000 faf0 	bl	800c10c <__multadd>
 800bb2c:	f1bb 0f00 	cmp.w	fp, #0
 800bb30:	4605      	mov	r5, r0
 800bb32:	dc6f      	bgt.n	800bc14 <_dtoa_r+0x96c>
 800bb34:	9b07      	ldr	r3, [sp, #28]
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	dc49      	bgt.n	800bbce <_dtoa_r+0x926>
 800bb3a:	e06b      	b.n	800bc14 <_dtoa_r+0x96c>
 800bb3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb42:	e73c      	b.n	800b9be <_dtoa_r+0x716>
 800bb44:	3fe00000 	.word	0x3fe00000
 800bb48:	40240000 	.word	0x40240000
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1e5c      	subs	r4, r3, #1
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	42a3      	cmp	r3, r4
 800bb54:	db09      	blt.n	800bb6a <_dtoa_r+0x8c2>
 800bb56:	1b1c      	subs	r4, r3, r4
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f6bf af30 	bge.w	800b9c0 <_dtoa_r+0x718>
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	9a03      	ldr	r2, [sp, #12]
 800bb64:	1a9e      	subs	r6, r3, r2
 800bb66:	2300      	movs	r3, #0
 800bb68:	e72b      	b.n	800b9c2 <_dtoa_r+0x71a>
 800bb6a:	9b08      	ldr	r3, [sp, #32]
 800bb6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb6e:	9408      	str	r4, [sp, #32]
 800bb70:	1ae3      	subs	r3, r4, r3
 800bb72:	441a      	add	r2, r3
 800bb74:	9e00      	ldr	r6, [sp, #0]
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	920d      	str	r2, [sp, #52]	@ 0x34
 800bb7a:	2400      	movs	r4, #0
 800bb7c:	e721      	b.n	800b9c2 <_dtoa_r+0x71a>
 800bb7e:	9c08      	ldr	r4, [sp, #32]
 800bb80:	9e00      	ldr	r6, [sp, #0]
 800bb82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bb84:	e728      	b.n	800b9d8 <_dtoa_r+0x730>
 800bb86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bb8a:	e751      	b.n	800ba30 <_dtoa_r+0x788>
 800bb8c:	9a08      	ldr	r2, [sp, #32]
 800bb8e:	9902      	ldr	r1, [sp, #8]
 800bb90:	e750      	b.n	800ba34 <_dtoa_r+0x78c>
 800bb92:	f8cd 8008 	str.w	r8, [sp, #8]
 800bb96:	e751      	b.n	800ba3c <_dtoa_r+0x794>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e779      	b.n	800ba90 <_dtoa_r+0x7e8>
 800bb9c:	9b04      	ldr	r3, [sp, #16]
 800bb9e:	e777      	b.n	800ba90 <_dtoa_r+0x7e8>
 800bba0:	2300      	movs	r3, #0
 800bba2:	9308      	str	r3, [sp, #32]
 800bba4:	e779      	b.n	800ba9a <_dtoa_r+0x7f2>
 800bba6:	d093      	beq.n	800bad0 <_dtoa_r+0x828>
 800bba8:	9a00      	ldr	r2, [sp, #0]
 800bbaa:	331c      	adds	r3, #28
 800bbac:	441a      	add	r2, r3
 800bbae:	9200      	str	r2, [sp, #0]
 800bbb0:	9a06      	ldr	r2, [sp, #24]
 800bbb2:	441a      	add	r2, r3
 800bbb4:	441e      	add	r6, r3
 800bbb6:	9206      	str	r2, [sp, #24]
 800bbb8:	e78a      	b.n	800bad0 <_dtoa_r+0x828>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	e7f4      	b.n	800bba8 <_dtoa_r+0x900>
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	46b8      	mov	r8, r7
 800bbc4:	dc20      	bgt.n	800bc08 <_dtoa_r+0x960>
 800bbc6:	469b      	mov	fp, r3
 800bbc8:	9b07      	ldr	r3, [sp, #28]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	dd1e      	ble.n	800bc0c <_dtoa_r+0x964>
 800bbce:	f1bb 0f00 	cmp.w	fp, #0
 800bbd2:	f47f adb1 	bne.w	800b738 <_dtoa_r+0x490>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	465b      	mov	r3, fp
 800bbda:	2205      	movs	r2, #5
 800bbdc:	4648      	mov	r0, r9
 800bbde:	f000 fa95 	bl	800c10c <__multadd>
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	9802      	ldr	r0, [sp, #8]
 800bbe8:	f000 fca0 	bl	800c52c <__mcmp>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	f77f ada3 	ble.w	800b738 <_dtoa_r+0x490>
 800bbf2:	4656      	mov	r6, sl
 800bbf4:	2331      	movs	r3, #49	@ 0x31
 800bbf6:	f806 3b01 	strb.w	r3, [r6], #1
 800bbfa:	f108 0801 	add.w	r8, r8, #1
 800bbfe:	e59f      	b.n	800b740 <_dtoa_r+0x498>
 800bc00:	9c03      	ldr	r4, [sp, #12]
 800bc02:	46b8      	mov	r8, r7
 800bc04:	4625      	mov	r5, r4
 800bc06:	e7f4      	b.n	800bbf2 <_dtoa_r+0x94a>
 800bc08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bc0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 8101 	beq.w	800be16 <_dtoa_r+0xb6e>
 800bc14:	2e00      	cmp	r6, #0
 800bc16:	dd05      	ble.n	800bc24 <_dtoa_r+0x97c>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	4648      	mov	r0, r9
 800bc1e:	f000 fc19 	bl	800c454 <__lshift>
 800bc22:	4605      	mov	r5, r0
 800bc24:	9b08      	ldr	r3, [sp, #32]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d05c      	beq.n	800bce4 <_dtoa_r+0xa3c>
 800bc2a:	6869      	ldr	r1, [r5, #4]
 800bc2c:	4648      	mov	r0, r9
 800bc2e:	f000 fa0b 	bl	800c048 <_Balloc>
 800bc32:	4606      	mov	r6, r0
 800bc34:	b928      	cbnz	r0, 800bc42 <_dtoa_r+0x99a>
 800bc36:	4b82      	ldr	r3, [pc, #520]	@ (800be40 <_dtoa_r+0xb98>)
 800bc38:	4602      	mov	r2, r0
 800bc3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc3e:	f7ff bb4a 	b.w	800b2d6 <_dtoa_r+0x2e>
 800bc42:	692a      	ldr	r2, [r5, #16]
 800bc44:	3202      	adds	r2, #2
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	f105 010c 	add.w	r1, r5, #12
 800bc4c:	300c      	adds	r0, #12
 800bc4e:	f001 f807 	bl	800cc60 <memcpy>
 800bc52:	2201      	movs	r2, #1
 800bc54:	4631      	mov	r1, r6
 800bc56:	4648      	mov	r0, r9
 800bc58:	f000 fbfc 	bl	800c454 <__lshift>
 800bc5c:	f10a 0301 	add.w	r3, sl, #1
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	eb0a 030b 	add.w	r3, sl, fp
 800bc66:	9308      	str	r3, [sp, #32]
 800bc68:	9b04      	ldr	r3, [sp, #16]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	462f      	mov	r7, r5
 800bc70:	9306      	str	r3, [sp, #24]
 800bc72:	4605      	mov	r5, r0
 800bc74:	9b00      	ldr	r3, [sp, #0]
 800bc76:	9802      	ldr	r0, [sp, #8]
 800bc78:	4621      	mov	r1, r4
 800bc7a:	f103 3bff 	add.w	fp, r3, #4294967295
 800bc7e:	f7ff fa88 	bl	800b192 <quorem>
 800bc82:	4603      	mov	r3, r0
 800bc84:	3330      	adds	r3, #48	@ 0x30
 800bc86:	9003      	str	r0, [sp, #12]
 800bc88:	4639      	mov	r1, r7
 800bc8a:	9802      	ldr	r0, [sp, #8]
 800bc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8e:	f000 fc4d 	bl	800c52c <__mcmp>
 800bc92:	462a      	mov	r2, r5
 800bc94:	9004      	str	r0, [sp, #16]
 800bc96:	4621      	mov	r1, r4
 800bc98:	4648      	mov	r0, r9
 800bc9a:	f000 fc63 	bl	800c564 <__mdiff>
 800bc9e:	68c2      	ldr	r2, [r0, #12]
 800bca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca2:	4606      	mov	r6, r0
 800bca4:	bb02      	cbnz	r2, 800bce8 <_dtoa_r+0xa40>
 800bca6:	4601      	mov	r1, r0
 800bca8:	9802      	ldr	r0, [sp, #8]
 800bcaa:	f000 fc3f 	bl	800c52c <__mcmp>
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4648      	mov	r0, r9
 800bcb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bcb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcba:	f000 fa05 	bl	800c0c8 <_Bfree>
 800bcbe:	9b07      	ldr	r3, [sp, #28]
 800bcc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bcc2:	9e00      	ldr	r6, [sp, #0]
 800bcc4:	ea42 0103 	orr.w	r1, r2, r3
 800bcc8:	9b06      	ldr	r3, [sp, #24]
 800bcca:	4319      	orrs	r1, r3
 800bccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcce:	d10d      	bne.n	800bcec <_dtoa_r+0xa44>
 800bcd0:	2b39      	cmp	r3, #57	@ 0x39
 800bcd2:	d027      	beq.n	800bd24 <_dtoa_r+0xa7c>
 800bcd4:	9a04      	ldr	r2, [sp, #16]
 800bcd6:	2a00      	cmp	r2, #0
 800bcd8:	dd01      	ble.n	800bcde <_dtoa_r+0xa36>
 800bcda:	9b03      	ldr	r3, [sp, #12]
 800bcdc:	3331      	adds	r3, #49	@ 0x31
 800bcde:	f88b 3000 	strb.w	r3, [fp]
 800bce2:	e52e      	b.n	800b742 <_dtoa_r+0x49a>
 800bce4:	4628      	mov	r0, r5
 800bce6:	e7b9      	b.n	800bc5c <_dtoa_r+0x9b4>
 800bce8:	2201      	movs	r2, #1
 800bcea:	e7e2      	b.n	800bcb2 <_dtoa_r+0xa0a>
 800bcec:	9904      	ldr	r1, [sp, #16]
 800bcee:	2900      	cmp	r1, #0
 800bcf0:	db04      	blt.n	800bcfc <_dtoa_r+0xa54>
 800bcf2:	9807      	ldr	r0, [sp, #28]
 800bcf4:	4301      	orrs	r1, r0
 800bcf6:	9806      	ldr	r0, [sp, #24]
 800bcf8:	4301      	orrs	r1, r0
 800bcfa:	d120      	bne.n	800bd3e <_dtoa_r+0xa96>
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	ddee      	ble.n	800bcde <_dtoa_r+0xa36>
 800bd00:	9902      	ldr	r1, [sp, #8]
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	2201      	movs	r2, #1
 800bd06:	4648      	mov	r0, r9
 800bd08:	f000 fba4 	bl	800c454 <__lshift>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	9002      	str	r0, [sp, #8]
 800bd10:	f000 fc0c 	bl	800c52c <__mcmp>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	dc02      	bgt.n	800bd20 <_dtoa_r+0xa78>
 800bd1a:	d1e0      	bne.n	800bcde <_dtoa_r+0xa36>
 800bd1c:	07da      	lsls	r2, r3, #31
 800bd1e:	d5de      	bpl.n	800bcde <_dtoa_r+0xa36>
 800bd20:	2b39      	cmp	r3, #57	@ 0x39
 800bd22:	d1da      	bne.n	800bcda <_dtoa_r+0xa32>
 800bd24:	2339      	movs	r3, #57	@ 0x39
 800bd26:	f88b 3000 	strb.w	r3, [fp]
 800bd2a:	4633      	mov	r3, r6
 800bd2c:	461e      	mov	r6, r3
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd34:	2a39      	cmp	r2, #57	@ 0x39
 800bd36:	d04e      	beq.n	800bdd6 <_dtoa_r+0xb2e>
 800bd38:	3201      	adds	r2, #1
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	e501      	b.n	800b742 <_dtoa_r+0x49a>
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	dd03      	ble.n	800bd4a <_dtoa_r+0xaa2>
 800bd42:	2b39      	cmp	r3, #57	@ 0x39
 800bd44:	d0ee      	beq.n	800bd24 <_dtoa_r+0xa7c>
 800bd46:	3301      	adds	r3, #1
 800bd48:	e7c9      	b.n	800bcde <_dtoa_r+0xa36>
 800bd4a:	9a00      	ldr	r2, [sp, #0]
 800bd4c:	9908      	ldr	r1, [sp, #32]
 800bd4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd52:	428a      	cmp	r2, r1
 800bd54:	d028      	beq.n	800bda8 <_dtoa_r+0xb00>
 800bd56:	9902      	ldr	r1, [sp, #8]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	220a      	movs	r2, #10
 800bd5c:	4648      	mov	r0, r9
 800bd5e:	f000 f9d5 	bl	800c10c <__multadd>
 800bd62:	42af      	cmp	r7, r5
 800bd64:	9002      	str	r0, [sp, #8]
 800bd66:	f04f 0300 	mov.w	r3, #0
 800bd6a:	f04f 020a 	mov.w	r2, #10
 800bd6e:	4639      	mov	r1, r7
 800bd70:	4648      	mov	r0, r9
 800bd72:	d107      	bne.n	800bd84 <_dtoa_r+0xadc>
 800bd74:	f000 f9ca 	bl	800c10c <__multadd>
 800bd78:	4607      	mov	r7, r0
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	9b00      	ldr	r3, [sp, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	e777      	b.n	800bc74 <_dtoa_r+0x9cc>
 800bd84:	f000 f9c2 	bl	800c10c <__multadd>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4607      	mov	r7, r0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	220a      	movs	r2, #10
 800bd90:	4648      	mov	r0, r9
 800bd92:	f000 f9bb 	bl	800c10c <__multadd>
 800bd96:	4605      	mov	r5, r0
 800bd98:	e7f0      	b.n	800bd7c <_dtoa_r+0xad4>
 800bd9a:	f1bb 0f00 	cmp.w	fp, #0
 800bd9e:	bfcc      	ite	gt
 800bda0:	465e      	movgt	r6, fp
 800bda2:	2601      	movle	r6, #1
 800bda4:	4456      	add	r6, sl
 800bda6:	2700      	movs	r7, #0
 800bda8:	9902      	ldr	r1, [sp, #8]
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2201      	movs	r2, #1
 800bdae:	4648      	mov	r0, r9
 800bdb0:	f000 fb50 	bl	800c454 <__lshift>
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	9002      	str	r0, [sp, #8]
 800bdb8:	f000 fbb8 	bl	800c52c <__mcmp>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	dcb4      	bgt.n	800bd2a <_dtoa_r+0xa82>
 800bdc0:	d102      	bne.n	800bdc8 <_dtoa_r+0xb20>
 800bdc2:	9b00      	ldr	r3, [sp, #0]
 800bdc4:	07db      	lsls	r3, r3, #31
 800bdc6:	d4b0      	bmi.n	800bd2a <_dtoa_r+0xa82>
 800bdc8:	4633      	mov	r3, r6
 800bdca:	461e      	mov	r6, r3
 800bdcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdd0:	2a30      	cmp	r2, #48	@ 0x30
 800bdd2:	d0fa      	beq.n	800bdca <_dtoa_r+0xb22>
 800bdd4:	e4b5      	b.n	800b742 <_dtoa_r+0x49a>
 800bdd6:	459a      	cmp	sl, r3
 800bdd8:	d1a8      	bne.n	800bd2c <_dtoa_r+0xa84>
 800bdda:	2331      	movs	r3, #49	@ 0x31
 800bddc:	f108 0801 	add.w	r8, r8, #1
 800bde0:	f88a 3000 	strb.w	r3, [sl]
 800bde4:	e4ad      	b.n	800b742 <_dtoa_r+0x49a>
 800bde6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bde8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800be44 <_dtoa_r+0xb9c>
 800bdec:	b11b      	cbz	r3, 800bdf6 <_dtoa_r+0xb4e>
 800bdee:	f10a 0308 	add.w	r3, sl, #8
 800bdf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	4650      	mov	r0, sl
 800bdf8:	b017      	add	sp, #92	@ 0x5c
 800bdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfe:	9b07      	ldr	r3, [sp, #28]
 800be00:	2b01      	cmp	r3, #1
 800be02:	f77f ae2e 	ble.w	800ba62 <_dtoa_r+0x7ba>
 800be06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be08:	9308      	str	r3, [sp, #32]
 800be0a:	2001      	movs	r0, #1
 800be0c:	e64d      	b.n	800baaa <_dtoa_r+0x802>
 800be0e:	f1bb 0f00 	cmp.w	fp, #0
 800be12:	f77f aed9 	ble.w	800bbc8 <_dtoa_r+0x920>
 800be16:	4656      	mov	r6, sl
 800be18:	9802      	ldr	r0, [sp, #8]
 800be1a:	4621      	mov	r1, r4
 800be1c:	f7ff f9b9 	bl	800b192 <quorem>
 800be20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800be24:	f806 3b01 	strb.w	r3, [r6], #1
 800be28:	eba6 020a 	sub.w	r2, r6, sl
 800be2c:	4593      	cmp	fp, r2
 800be2e:	ddb4      	ble.n	800bd9a <_dtoa_r+0xaf2>
 800be30:	9902      	ldr	r1, [sp, #8]
 800be32:	2300      	movs	r3, #0
 800be34:	220a      	movs	r2, #10
 800be36:	4648      	mov	r0, r9
 800be38:	f000 f968 	bl	800c10c <__multadd>
 800be3c:	9002      	str	r0, [sp, #8]
 800be3e:	e7eb      	b.n	800be18 <_dtoa_r+0xb70>
 800be40:	0800d01c 	.word	0x0800d01c
 800be44:	0800cfa0 	.word	0x0800cfa0

0800be48 <_free_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4605      	mov	r5, r0
 800be4c:	2900      	cmp	r1, #0
 800be4e:	d041      	beq.n	800bed4 <_free_r+0x8c>
 800be50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be54:	1f0c      	subs	r4, r1, #4
 800be56:	2b00      	cmp	r3, #0
 800be58:	bfb8      	it	lt
 800be5a:	18e4      	addlt	r4, r4, r3
 800be5c:	f000 f8e8 	bl	800c030 <__malloc_lock>
 800be60:	4a1d      	ldr	r2, [pc, #116]	@ (800bed8 <_free_r+0x90>)
 800be62:	6813      	ldr	r3, [r2, #0]
 800be64:	b933      	cbnz	r3, 800be74 <_free_r+0x2c>
 800be66:	6063      	str	r3, [r4, #4]
 800be68:	6014      	str	r4, [r2, #0]
 800be6a:	4628      	mov	r0, r5
 800be6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be70:	f000 b8e4 	b.w	800c03c <__malloc_unlock>
 800be74:	42a3      	cmp	r3, r4
 800be76:	d908      	bls.n	800be8a <_free_r+0x42>
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	1821      	adds	r1, r4, r0
 800be7c:	428b      	cmp	r3, r1
 800be7e:	bf01      	itttt	eq
 800be80:	6819      	ldreq	r1, [r3, #0]
 800be82:	685b      	ldreq	r3, [r3, #4]
 800be84:	1809      	addeq	r1, r1, r0
 800be86:	6021      	streq	r1, [r4, #0]
 800be88:	e7ed      	b.n	800be66 <_free_r+0x1e>
 800be8a:	461a      	mov	r2, r3
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	b10b      	cbz	r3, 800be94 <_free_r+0x4c>
 800be90:	42a3      	cmp	r3, r4
 800be92:	d9fa      	bls.n	800be8a <_free_r+0x42>
 800be94:	6811      	ldr	r1, [r2, #0]
 800be96:	1850      	adds	r0, r2, r1
 800be98:	42a0      	cmp	r0, r4
 800be9a:	d10b      	bne.n	800beb4 <_free_r+0x6c>
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	4401      	add	r1, r0
 800bea0:	1850      	adds	r0, r2, r1
 800bea2:	4283      	cmp	r3, r0
 800bea4:	6011      	str	r1, [r2, #0]
 800bea6:	d1e0      	bne.n	800be6a <_free_r+0x22>
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	6053      	str	r3, [r2, #4]
 800beae:	4408      	add	r0, r1
 800beb0:	6010      	str	r0, [r2, #0]
 800beb2:	e7da      	b.n	800be6a <_free_r+0x22>
 800beb4:	d902      	bls.n	800bebc <_free_r+0x74>
 800beb6:	230c      	movs	r3, #12
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	e7d6      	b.n	800be6a <_free_r+0x22>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	1821      	adds	r1, r4, r0
 800bec0:	428b      	cmp	r3, r1
 800bec2:	bf04      	itt	eq
 800bec4:	6819      	ldreq	r1, [r3, #0]
 800bec6:	685b      	ldreq	r3, [r3, #4]
 800bec8:	6063      	str	r3, [r4, #4]
 800beca:	bf04      	itt	eq
 800becc:	1809      	addeq	r1, r1, r0
 800bece:	6021      	streq	r1, [r4, #0]
 800bed0:	6054      	str	r4, [r2, #4]
 800bed2:	e7ca      	b.n	800be6a <_free_r+0x22>
 800bed4:	bd38      	pop	{r3, r4, r5, pc}
 800bed6:	bf00      	nop
 800bed8:	2000232c 	.word	0x2000232c

0800bedc <malloc>:
 800bedc:	4b02      	ldr	r3, [pc, #8]	@ (800bee8 <malloc+0xc>)
 800bede:	4601      	mov	r1, r0
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	f000 b825 	b.w	800bf30 <_malloc_r>
 800bee6:	bf00      	nop
 800bee8:	20000114 	.word	0x20000114

0800beec <sbrk_aligned>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	4e0f      	ldr	r6, [pc, #60]	@ (800bf2c <sbrk_aligned+0x40>)
 800bef0:	460c      	mov	r4, r1
 800bef2:	6831      	ldr	r1, [r6, #0]
 800bef4:	4605      	mov	r5, r0
 800bef6:	b911      	cbnz	r1, 800befe <sbrk_aligned+0x12>
 800bef8:	f000 fea2 	bl	800cc40 <_sbrk_r>
 800befc:	6030      	str	r0, [r6, #0]
 800befe:	4621      	mov	r1, r4
 800bf00:	4628      	mov	r0, r5
 800bf02:	f000 fe9d 	bl	800cc40 <_sbrk_r>
 800bf06:	1c43      	adds	r3, r0, #1
 800bf08:	d103      	bne.n	800bf12 <sbrk_aligned+0x26>
 800bf0a:	f04f 34ff 	mov.w	r4, #4294967295
 800bf0e:	4620      	mov	r0, r4
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	1cc4      	adds	r4, r0, #3
 800bf14:	f024 0403 	bic.w	r4, r4, #3
 800bf18:	42a0      	cmp	r0, r4
 800bf1a:	d0f8      	beq.n	800bf0e <sbrk_aligned+0x22>
 800bf1c:	1a21      	subs	r1, r4, r0
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 fe8e 	bl	800cc40 <_sbrk_r>
 800bf24:	3001      	adds	r0, #1
 800bf26:	d1f2      	bne.n	800bf0e <sbrk_aligned+0x22>
 800bf28:	e7ef      	b.n	800bf0a <sbrk_aligned+0x1e>
 800bf2a:	bf00      	nop
 800bf2c:	20002328 	.word	0x20002328

0800bf30 <_malloc_r>:
 800bf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf34:	1ccd      	adds	r5, r1, #3
 800bf36:	f025 0503 	bic.w	r5, r5, #3
 800bf3a:	3508      	adds	r5, #8
 800bf3c:	2d0c      	cmp	r5, #12
 800bf3e:	bf38      	it	cc
 800bf40:	250c      	movcc	r5, #12
 800bf42:	2d00      	cmp	r5, #0
 800bf44:	4606      	mov	r6, r0
 800bf46:	db01      	blt.n	800bf4c <_malloc_r+0x1c>
 800bf48:	42a9      	cmp	r1, r5
 800bf4a:	d904      	bls.n	800bf56 <_malloc_r+0x26>
 800bf4c:	230c      	movs	r3, #12
 800bf4e:	6033      	str	r3, [r6, #0]
 800bf50:	2000      	movs	r0, #0
 800bf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c02c <_malloc_r+0xfc>
 800bf5a:	f000 f869 	bl	800c030 <__malloc_lock>
 800bf5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf62:	461c      	mov	r4, r3
 800bf64:	bb44      	cbnz	r4, 800bfb8 <_malloc_r+0x88>
 800bf66:	4629      	mov	r1, r5
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff ffbf 	bl	800beec <sbrk_aligned>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	4604      	mov	r4, r0
 800bf72:	d158      	bne.n	800c026 <_malloc_r+0xf6>
 800bf74:	f8d8 4000 	ldr.w	r4, [r8]
 800bf78:	4627      	mov	r7, r4
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	d143      	bne.n	800c006 <_malloc_r+0xd6>
 800bf7e:	2c00      	cmp	r4, #0
 800bf80:	d04b      	beq.n	800c01a <_malloc_r+0xea>
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	4639      	mov	r1, r7
 800bf86:	4630      	mov	r0, r6
 800bf88:	eb04 0903 	add.w	r9, r4, r3
 800bf8c:	f000 fe58 	bl	800cc40 <_sbrk_r>
 800bf90:	4581      	cmp	r9, r0
 800bf92:	d142      	bne.n	800c01a <_malloc_r+0xea>
 800bf94:	6821      	ldr	r1, [r4, #0]
 800bf96:	1a6d      	subs	r5, r5, r1
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f7ff ffa6 	bl	800beec <sbrk_aligned>
 800bfa0:	3001      	adds	r0, #1
 800bfa2:	d03a      	beq.n	800c01a <_malloc_r+0xea>
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	442b      	add	r3, r5
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bfae:	685a      	ldr	r2, [r3, #4]
 800bfb0:	bb62      	cbnz	r2, 800c00c <_malloc_r+0xdc>
 800bfb2:	f8c8 7000 	str.w	r7, [r8]
 800bfb6:	e00f      	b.n	800bfd8 <_malloc_r+0xa8>
 800bfb8:	6822      	ldr	r2, [r4, #0]
 800bfba:	1b52      	subs	r2, r2, r5
 800bfbc:	d420      	bmi.n	800c000 <_malloc_r+0xd0>
 800bfbe:	2a0b      	cmp	r2, #11
 800bfc0:	d917      	bls.n	800bff2 <_malloc_r+0xc2>
 800bfc2:	1961      	adds	r1, r4, r5
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	6025      	str	r5, [r4, #0]
 800bfc8:	bf18      	it	ne
 800bfca:	6059      	strne	r1, [r3, #4]
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	bf08      	it	eq
 800bfd0:	f8c8 1000 	streq.w	r1, [r8]
 800bfd4:	5162      	str	r2, [r4, r5]
 800bfd6:	604b      	str	r3, [r1, #4]
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f000 f82f 	bl	800c03c <__malloc_unlock>
 800bfde:	f104 000b 	add.w	r0, r4, #11
 800bfe2:	1d23      	adds	r3, r4, #4
 800bfe4:	f020 0007 	bic.w	r0, r0, #7
 800bfe8:	1ac2      	subs	r2, r0, r3
 800bfea:	bf1c      	itt	ne
 800bfec:	1a1b      	subne	r3, r3, r0
 800bfee:	50a3      	strne	r3, [r4, r2]
 800bff0:	e7af      	b.n	800bf52 <_malloc_r+0x22>
 800bff2:	6862      	ldr	r2, [r4, #4]
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	bf0c      	ite	eq
 800bff8:	f8c8 2000 	streq.w	r2, [r8]
 800bffc:	605a      	strne	r2, [r3, #4]
 800bffe:	e7eb      	b.n	800bfd8 <_malloc_r+0xa8>
 800c000:	4623      	mov	r3, r4
 800c002:	6864      	ldr	r4, [r4, #4]
 800c004:	e7ae      	b.n	800bf64 <_malloc_r+0x34>
 800c006:	463c      	mov	r4, r7
 800c008:	687f      	ldr	r7, [r7, #4]
 800c00a:	e7b6      	b.n	800bf7a <_malloc_r+0x4a>
 800c00c:	461a      	mov	r2, r3
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	42a3      	cmp	r3, r4
 800c012:	d1fb      	bne.n	800c00c <_malloc_r+0xdc>
 800c014:	2300      	movs	r3, #0
 800c016:	6053      	str	r3, [r2, #4]
 800c018:	e7de      	b.n	800bfd8 <_malloc_r+0xa8>
 800c01a:	230c      	movs	r3, #12
 800c01c:	6033      	str	r3, [r6, #0]
 800c01e:	4630      	mov	r0, r6
 800c020:	f000 f80c 	bl	800c03c <__malloc_unlock>
 800c024:	e794      	b.n	800bf50 <_malloc_r+0x20>
 800c026:	6005      	str	r5, [r0, #0]
 800c028:	e7d6      	b.n	800bfd8 <_malloc_r+0xa8>
 800c02a:	bf00      	nop
 800c02c:	2000232c 	.word	0x2000232c

0800c030 <__malloc_lock>:
 800c030:	4801      	ldr	r0, [pc, #4]	@ (800c038 <__malloc_lock+0x8>)
 800c032:	f7ff b8ac 	b.w	800b18e <__retarget_lock_acquire_recursive>
 800c036:	bf00      	nop
 800c038:	20002324 	.word	0x20002324

0800c03c <__malloc_unlock>:
 800c03c:	4801      	ldr	r0, [pc, #4]	@ (800c044 <__malloc_unlock+0x8>)
 800c03e:	f7ff b8a7 	b.w	800b190 <__retarget_lock_release_recursive>
 800c042:	bf00      	nop
 800c044:	20002324 	.word	0x20002324

0800c048 <_Balloc>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	69c6      	ldr	r6, [r0, #28]
 800c04c:	4604      	mov	r4, r0
 800c04e:	460d      	mov	r5, r1
 800c050:	b976      	cbnz	r6, 800c070 <_Balloc+0x28>
 800c052:	2010      	movs	r0, #16
 800c054:	f7ff ff42 	bl	800bedc <malloc>
 800c058:	4602      	mov	r2, r0
 800c05a:	61e0      	str	r0, [r4, #28]
 800c05c:	b920      	cbnz	r0, 800c068 <_Balloc+0x20>
 800c05e:	4b18      	ldr	r3, [pc, #96]	@ (800c0c0 <_Balloc+0x78>)
 800c060:	4818      	ldr	r0, [pc, #96]	@ (800c0c4 <_Balloc+0x7c>)
 800c062:	216b      	movs	r1, #107	@ 0x6b
 800c064:	f000 fe0a 	bl	800cc7c <__assert_func>
 800c068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c06c:	6006      	str	r6, [r0, #0]
 800c06e:	60c6      	str	r6, [r0, #12]
 800c070:	69e6      	ldr	r6, [r4, #28]
 800c072:	68f3      	ldr	r3, [r6, #12]
 800c074:	b183      	cbz	r3, 800c098 <_Balloc+0x50>
 800c076:	69e3      	ldr	r3, [r4, #28]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c07e:	b9b8      	cbnz	r0, 800c0b0 <_Balloc+0x68>
 800c080:	2101      	movs	r1, #1
 800c082:	fa01 f605 	lsl.w	r6, r1, r5
 800c086:	1d72      	adds	r2, r6, #5
 800c088:	0092      	lsls	r2, r2, #2
 800c08a:	4620      	mov	r0, r4
 800c08c:	f000 fe14 	bl	800ccb8 <_calloc_r>
 800c090:	b160      	cbz	r0, 800c0ac <_Balloc+0x64>
 800c092:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c096:	e00e      	b.n	800c0b6 <_Balloc+0x6e>
 800c098:	2221      	movs	r2, #33	@ 0x21
 800c09a:	2104      	movs	r1, #4
 800c09c:	4620      	mov	r0, r4
 800c09e:	f000 fe0b 	bl	800ccb8 <_calloc_r>
 800c0a2:	69e3      	ldr	r3, [r4, #28]
 800c0a4:	60f0      	str	r0, [r6, #12]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e4      	bne.n	800c076 <_Balloc+0x2e>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	6802      	ldr	r2, [r0, #0]
 800c0b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0bc:	e7f7      	b.n	800c0ae <_Balloc+0x66>
 800c0be:	bf00      	nop
 800c0c0:	0800cfad 	.word	0x0800cfad
 800c0c4:	0800d02d 	.word	0x0800d02d

0800c0c8 <_Bfree>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	69c6      	ldr	r6, [r0, #28]
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	b976      	cbnz	r6, 800c0f0 <_Bfree+0x28>
 800c0d2:	2010      	movs	r0, #16
 800c0d4:	f7ff ff02 	bl	800bedc <malloc>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	61e8      	str	r0, [r5, #28]
 800c0dc:	b920      	cbnz	r0, 800c0e8 <_Bfree+0x20>
 800c0de:	4b09      	ldr	r3, [pc, #36]	@ (800c104 <_Bfree+0x3c>)
 800c0e0:	4809      	ldr	r0, [pc, #36]	@ (800c108 <_Bfree+0x40>)
 800c0e2:	218f      	movs	r1, #143	@ 0x8f
 800c0e4:	f000 fdca 	bl	800cc7c <__assert_func>
 800c0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0ec:	6006      	str	r6, [r0, #0]
 800c0ee:	60c6      	str	r6, [r0, #12]
 800c0f0:	b13c      	cbz	r4, 800c102 <_Bfree+0x3a>
 800c0f2:	69eb      	ldr	r3, [r5, #28]
 800c0f4:	6862      	ldr	r2, [r4, #4]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0fc:	6021      	str	r1, [r4, #0]
 800c0fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	0800cfad 	.word	0x0800cfad
 800c108:	0800d02d 	.word	0x0800d02d

0800c10c <__multadd>:
 800c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c110:	690d      	ldr	r5, [r1, #16]
 800c112:	4607      	mov	r7, r0
 800c114:	460c      	mov	r4, r1
 800c116:	461e      	mov	r6, r3
 800c118:	f101 0c14 	add.w	ip, r1, #20
 800c11c:	2000      	movs	r0, #0
 800c11e:	f8dc 3000 	ldr.w	r3, [ip]
 800c122:	b299      	uxth	r1, r3
 800c124:	fb02 6101 	mla	r1, r2, r1, r6
 800c128:	0c1e      	lsrs	r6, r3, #16
 800c12a:	0c0b      	lsrs	r3, r1, #16
 800c12c:	fb02 3306 	mla	r3, r2, r6, r3
 800c130:	b289      	uxth	r1, r1
 800c132:	3001      	adds	r0, #1
 800c134:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c138:	4285      	cmp	r5, r0
 800c13a:	f84c 1b04 	str.w	r1, [ip], #4
 800c13e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c142:	dcec      	bgt.n	800c11e <__multadd+0x12>
 800c144:	b30e      	cbz	r6, 800c18a <__multadd+0x7e>
 800c146:	68a3      	ldr	r3, [r4, #8]
 800c148:	42ab      	cmp	r3, r5
 800c14a:	dc19      	bgt.n	800c180 <__multadd+0x74>
 800c14c:	6861      	ldr	r1, [r4, #4]
 800c14e:	4638      	mov	r0, r7
 800c150:	3101      	adds	r1, #1
 800c152:	f7ff ff79 	bl	800c048 <_Balloc>
 800c156:	4680      	mov	r8, r0
 800c158:	b928      	cbnz	r0, 800c166 <__multadd+0x5a>
 800c15a:	4602      	mov	r2, r0
 800c15c:	4b0c      	ldr	r3, [pc, #48]	@ (800c190 <__multadd+0x84>)
 800c15e:	480d      	ldr	r0, [pc, #52]	@ (800c194 <__multadd+0x88>)
 800c160:	21ba      	movs	r1, #186	@ 0xba
 800c162:	f000 fd8b 	bl	800cc7c <__assert_func>
 800c166:	6922      	ldr	r2, [r4, #16]
 800c168:	3202      	adds	r2, #2
 800c16a:	f104 010c 	add.w	r1, r4, #12
 800c16e:	0092      	lsls	r2, r2, #2
 800c170:	300c      	adds	r0, #12
 800c172:	f000 fd75 	bl	800cc60 <memcpy>
 800c176:	4621      	mov	r1, r4
 800c178:	4638      	mov	r0, r7
 800c17a:	f7ff ffa5 	bl	800c0c8 <_Bfree>
 800c17e:	4644      	mov	r4, r8
 800c180:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c184:	3501      	adds	r5, #1
 800c186:	615e      	str	r6, [r3, #20]
 800c188:	6125      	str	r5, [r4, #16]
 800c18a:	4620      	mov	r0, r4
 800c18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c190:	0800d01c 	.word	0x0800d01c
 800c194:	0800d02d 	.word	0x0800d02d

0800c198 <__hi0bits>:
 800c198:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c19c:	4603      	mov	r3, r0
 800c19e:	bf36      	itet	cc
 800c1a0:	0403      	lslcc	r3, r0, #16
 800c1a2:	2000      	movcs	r0, #0
 800c1a4:	2010      	movcc	r0, #16
 800c1a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1aa:	bf3c      	itt	cc
 800c1ac:	021b      	lslcc	r3, r3, #8
 800c1ae:	3008      	addcc	r0, #8
 800c1b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1b4:	bf3c      	itt	cc
 800c1b6:	011b      	lslcc	r3, r3, #4
 800c1b8:	3004      	addcc	r0, #4
 800c1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1be:	bf3c      	itt	cc
 800c1c0:	009b      	lslcc	r3, r3, #2
 800c1c2:	3002      	addcc	r0, #2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	db05      	blt.n	800c1d4 <__hi0bits+0x3c>
 800c1c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1cc:	f100 0001 	add.w	r0, r0, #1
 800c1d0:	bf08      	it	eq
 800c1d2:	2020      	moveq	r0, #32
 800c1d4:	4770      	bx	lr

0800c1d6 <__lo0bits>:
 800c1d6:	6803      	ldr	r3, [r0, #0]
 800c1d8:	4602      	mov	r2, r0
 800c1da:	f013 0007 	ands.w	r0, r3, #7
 800c1de:	d00b      	beq.n	800c1f8 <__lo0bits+0x22>
 800c1e0:	07d9      	lsls	r1, r3, #31
 800c1e2:	d421      	bmi.n	800c228 <__lo0bits+0x52>
 800c1e4:	0798      	lsls	r0, r3, #30
 800c1e6:	bf49      	itett	mi
 800c1e8:	085b      	lsrmi	r3, r3, #1
 800c1ea:	089b      	lsrpl	r3, r3, #2
 800c1ec:	2001      	movmi	r0, #1
 800c1ee:	6013      	strmi	r3, [r2, #0]
 800c1f0:	bf5c      	itt	pl
 800c1f2:	6013      	strpl	r3, [r2, #0]
 800c1f4:	2002      	movpl	r0, #2
 800c1f6:	4770      	bx	lr
 800c1f8:	b299      	uxth	r1, r3
 800c1fa:	b909      	cbnz	r1, 800c200 <__lo0bits+0x2a>
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	2010      	movs	r0, #16
 800c200:	b2d9      	uxtb	r1, r3
 800c202:	b909      	cbnz	r1, 800c208 <__lo0bits+0x32>
 800c204:	3008      	adds	r0, #8
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	0719      	lsls	r1, r3, #28
 800c20a:	bf04      	itt	eq
 800c20c:	091b      	lsreq	r3, r3, #4
 800c20e:	3004      	addeq	r0, #4
 800c210:	0799      	lsls	r1, r3, #30
 800c212:	bf04      	itt	eq
 800c214:	089b      	lsreq	r3, r3, #2
 800c216:	3002      	addeq	r0, #2
 800c218:	07d9      	lsls	r1, r3, #31
 800c21a:	d403      	bmi.n	800c224 <__lo0bits+0x4e>
 800c21c:	085b      	lsrs	r3, r3, #1
 800c21e:	f100 0001 	add.w	r0, r0, #1
 800c222:	d003      	beq.n	800c22c <__lo0bits+0x56>
 800c224:	6013      	str	r3, [r2, #0]
 800c226:	4770      	bx	lr
 800c228:	2000      	movs	r0, #0
 800c22a:	4770      	bx	lr
 800c22c:	2020      	movs	r0, #32
 800c22e:	4770      	bx	lr

0800c230 <__i2b>:
 800c230:	b510      	push	{r4, lr}
 800c232:	460c      	mov	r4, r1
 800c234:	2101      	movs	r1, #1
 800c236:	f7ff ff07 	bl	800c048 <_Balloc>
 800c23a:	4602      	mov	r2, r0
 800c23c:	b928      	cbnz	r0, 800c24a <__i2b+0x1a>
 800c23e:	4b05      	ldr	r3, [pc, #20]	@ (800c254 <__i2b+0x24>)
 800c240:	4805      	ldr	r0, [pc, #20]	@ (800c258 <__i2b+0x28>)
 800c242:	f240 1145 	movw	r1, #325	@ 0x145
 800c246:	f000 fd19 	bl	800cc7c <__assert_func>
 800c24a:	2301      	movs	r3, #1
 800c24c:	6144      	str	r4, [r0, #20]
 800c24e:	6103      	str	r3, [r0, #16]
 800c250:	bd10      	pop	{r4, pc}
 800c252:	bf00      	nop
 800c254:	0800d01c 	.word	0x0800d01c
 800c258:	0800d02d 	.word	0x0800d02d

0800c25c <__multiply>:
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	4617      	mov	r7, r2
 800c262:	690a      	ldr	r2, [r1, #16]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	429a      	cmp	r2, r3
 800c268:	bfa8      	it	ge
 800c26a:	463b      	movge	r3, r7
 800c26c:	4689      	mov	r9, r1
 800c26e:	bfa4      	itt	ge
 800c270:	460f      	movge	r7, r1
 800c272:	4699      	movge	r9, r3
 800c274:	693d      	ldr	r5, [r7, #16]
 800c276:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	eb05 060a 	add.w	r6, r5, sl
 800c282:	42b3      	cmp	r3, r6
 800c284:	b085      	sub	sp, #20
 800c286:	bfb8      	it	lt
 800c288:	3101      	addlt	r1, #1
 800c28a:	f7ff fedd 	bl	800c048 <_Balloc>
 800c28e:	b930      	cbnz	r0, 800c29e <__multiply+0x42>
 800c290:	4602      	mov	r2, r0
 800c292:	4b41      	ldr	r3, [pc, #260]	@ (800c398 <__multiply+0x13c>)
 800c294:	4841      	ldr	r0, [pc, #260]	@ (800c39c <__multiply+0x140>)
 800c296:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c29a:	f000 fcef 	bl	800cc7c <__assert_func>
 800c29e:	f100 0414 	add.w	r4, r0, #20
 800c2a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c2a6:	4623      	mov	r3, r4
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4573      	cmp	r3, lr
 800c2ac:	d320      	bcc.n	800c2f0 <__multiply+0x94>
 800c2ae:	f107 0814 	add.w	r8, r7, #20
 800c2b2:	f109 0114 	add.w	r1, r9, #20
 800c2b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c2ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c2be:	9302      	str	r3, [sp, #8]
 800c2c0:	1beb      	subs	r3, r5, r7
 800c2c2:	3b15      	subs	r3, #21
 800c2c4:	f023 0303 	bic.w	r3, r3, #3
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	3715      	adds	r7, #21
 800c2cc:	42bd      	cmp	r5, r7
 800c2ce:	bf38      	it	cc
 800c2d0:	2304      	movcc	r3, #4
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	9b02      	ldr	r3, [sp, #8]
 800c2d6:	9103      	str	r1, [sp, #12]
 800c2d8:	428b      	cmp	r3, r1
 800c2da:	d80c      	bhi.n	800c2f6 <__multiply+0x9a>
 800c2dc:	2e00      	cmp	r6, #0
 800c2de:	dd03      	ble.n	800c2e8 <__multiply+0x8c>
 800c2e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d055      	beq.n	800c394 <__multiply+0x138>
 800c2e8:	6106      	str	r6, [r0, #16]
 800c2ea:	b005      	add	sp, #20
 800c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f0:	f843 2b04 	str.w	r2, [r3], #4
 800c2f4:	e7d9      	b.n	800c2aa <__multiply+0x4e>
 800c2f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2fa:	f1ba 0f00 	cmp.w	sl, #0
 800c2fe:	d01f      	beq.n	800c340 <__multiply+0xe4>
 800c300:	46c4      	mov	ip, r8
 800c302:	46a1      	mov	r9, r4
 800c304:	2700      	movs	r7, #0
 800c306:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c30a:	f8d9 3000 	ldr.w	r3, [r9]
 800c30e:	fa1f fb82 	uxth.w	fp, r2
 800c312:	b29b      	uxth	r3, r3
 800c314:	fb0a 330b 	mla	r3, sl, fp, r3
 800c318:	443b      	add	r3, r7
 800c31a:	f8d9 7000 	ldr.w	r7, [r9]
 800c31e:	0c12      	lsrs	r2, r2, #16
 800c320:	0c3f      	lsrs	r7, r7, #16
 800c322:	fb0a 7202 	mla	r2, sl, r2, r7
 800c326:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c330:	4565      	cmp	r5, ip
 800c332:	f849 3b04 	str.w	r3, [r9], #4
 800c336:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c33a:	d8e4      	bhi.n	800c306 <__multiply+0xaa>
 800c33c:	9b01      	ldr	r3, [sp, #4]
 800c33e:	50e7      	str	r7, [r4, r3]
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c346:	3104      	adds	r1, #4
 800c348:	f1b9 0f00 	cmp.w	r9, #0
 800c34c:	d020      	beq.n	800c390 <__multiply+0x134>
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	4647      	mov	r7, r8
 800c352:	46a4      	mov	ip, r4
 800c354:	f04f 0a00 	mov.w	sl, #0
 800c358:	f8b7 b000 	ldrh.w	fp, [r7]
 800c35c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c360:	fb09 220b 	mla	r2, r9, fp, r2
 800c364:	4452      	add	r2, sl
 800c366:	b29b      	uxth	r3, r3
 800c368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c36c:	f84c 3b04 	str.w	r3, [ip], #4
 800c370:	f857 3b04 	ldr.w	r3, [r7], #4
 800c374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c378:	f8bc 3000 	ldrh.w	r3, [ip]
 800c37c:	fb09 330a 	mla	r3, r9, sl, r3
 800c380:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c384:	42bd      	cmp	r5, r7
 800c386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c38a:	d8e5      	bhi.n	800c358 <__multiply+0xfc>
 800c38c:	9a01      	ldr	r2, [sp, #4]
 800c38e:	50a3      	str	r3, [r4, r2]
 800c390:	3404      	adds	r4, #4
 800c392:	e79f      	b.n	800c2d4 <__multiply+0x78>
 800c394:	3e01      	subs	r6, #1
 800c396:	e7a1      	b.n	800c2dc <__multiply+0x80>
 800c398:	0800d01c 	.word	0x0800d01c
 800c39c:	0800d02d 	.word	0x0800d02d

0800c3a0 <__pow5mult>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	4615      	mov	r5, r2
 800c3a6:	f012 0203 	ands.w	r2, r2, #3
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	d007      	beq.n	800c3c0 <__pow5mult+0x20>
 800c3b0:	4c25      	ldr	r4, [pc, #148]	@ (800c448 <__pow5mult+0xa8>)
 800c3b2:	3a01      	subs	r2, #1
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ba:	f7ff fea7 	bl	800c10c <__multadd>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	10ad      	asrs	r5, r5, #2
 800c3c2:	d03d      	beq.n	800c440 <__pow5mult+0xa0>
 800c3c4:	69fc      	ldr	r4, [r7, #28]
 800c3c6:	b97c      	cbnz	r4, 800c3e8 <__pow5mult+0x48>
 800c3c8:	2010      	movs	r0, #16
 800c3ca:	f7ff fd87 	bl	800bedc <malloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	61f8      	str	r0, [r7, #28]
 800c3d2:	b928      	cbnz	r0, 800c3e0 <__pow5mult+0x40>
 800c3d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c44c <__pow5mult+0xac>)
 800c3d6:	481e      	ldr	r0, [pc, #120]	@ (800c450 <__pow5mult+0xb0>)
 800c3d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3dc:	f000 fc4e 	bl	800cc7c <__assert_func>
 800c3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3e4:	6004      	str	r4, [r0, #0]
 800c3e6:	60c4      	str	r4, [r0, #12]
 800c3e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3f0:	b94c      	cbnz	r4, 800c406 <__pow5mult+0x66>
 800c3f2:	f240 2171 	movw	r1, #625	@ 0x271
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f7ff ff1a 	bl	800c230 <__i2b>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c402:	4604      	mov	r4, r0
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	f04f 0900 	mov.w	r9, #0
 800c40a:	07eb      	lsls	r3, r5, #31
 800c40c:	d50a      	bpl.n	800c424 <__pow5mult+0x84>
 800c40e:	4631      	mov	r1, r6
 800c410:	4622      	mov	r2, r4
 800c412:	4638      	mov	r0, r7
 800c414:	f7ff ff22 	bl	800c25c <__multiply>
 800c418:	4631      	mov	r1, r6
 800c41a:	4680      	mov	r8, r0
 800c41c:	4638      	mov	r0, r7
 800c41e:	f7ff fe53 	bl	800c0c8 <_Bfree>
 800c422:	4646      	mov	r6, r8
 800c424:	106d      	asrs	r5, r5, #1
 800c426:	d00b      	beq.n	800c440 <__pow5mult+0xa0>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	b938      	cbnz	r0, 800c43c <__pow5mult+0x9c>
 800c42c:	4622      	mov	r2, r4
 800c42e:	4621      	mov	r1, r4
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ff13 	bl	800c25c <__multiply>
 800c436:	6020      	str	r0, [r4, #0]
 800c438:	f8c0 9000 	str.w	r9, [r0]
 800c43c:	4604      	mov	r4, r0
 800c43e:	e7e4      	b.n	800c40a <__pow5mult+0x6a>
 800c440:	4630      	mov	r0, r6
 800c442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c446:	bf00      	nop
 800c448:	0800d0e0 	.word	0x0800d0e0
 800c44c:	0800cfad 	.word	0x0800cfad
 800c450:	0800d02d 	.word	0x0800d02d

0800c454 <__lshift>:
 800c454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c458:	460c      	mov	r4, r1
 800c45a:	6849      	ldr	r1, [r1, #4]
 800c45c:	6923      	ldr	r3, [r4, #16]
 800c45e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	4607      	mov	r7, r0
 800c466:	4691      	mov	r9, r2
 800c468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c46c:	f108 0601 	add.w	r6, r8, #1
 800c470:	42b3      	cmp	r3, r6
 800c472:	db0b      	blt.n	800c48c <__lshift+0x38>
 800c474:	4638      	mov	r0, r7
 800c476:	f7ff fde7 	bl	800c048 <_Balloc>
 800c47a:	4605      	mov	r5, r0
 800c47c:	b948      	cbnz	r0, 800c492 <__lshift+0x3e>
 800c47e:	4602      	mov	r2, r0
 800c480:	4b28      	ldr	r3, [pc, #160]	@ (800c524 <__lshift+0xd0>)
 800c482:	4829      	ldr	r0, [pc, #164]	@ (800c528 <__lshift+0xd4>)
 800c484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c488:	f000 fbf8 	bl	800cc7c <__assert_func>
 800c48c:	3101      	adds	r1, #1
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	e7ee      	b.n	800c470 <__lshift+0x1c>
 800c492:	2300      	movs	r3, #0
 800c494:	f100 0114 	add.w	r1, r0, #20
 800c498:	f100 0210 	add.w	r2, r0, #16
 800c49c:	4618      	mov	r0, r3
 800c49e:	4553      	cmp	r3, sl
 800c4a0:	db33      	blt.n	800c50a <__lshift+0xb6>
 800c4a2:	6920      	ldr	r0, [r4, #16]
 800c4a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4a8:	f104 0314 	add.w	r3, r4, #20
 800c4ac:	f019 091f 	ands.w	r9, r9, #31
 800c4b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4b8:	d02b      	beq.n	800c512 <__lshift+0xbe>
 800c4ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c4be:	468a      	mov	sl, r1
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c4c8:	4310      	orrs	r0, r2
 800c4ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d2:	459c      	cmp	ip, r3
 800c4d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4d8:	d8f3      	bhi.n	800c4c2 <__lshift+0x6e>
 800c4da:	ebac 0304 	sub.w	r3, ip, r4
 800c4de:	3b15      	subs	r3, #21
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	f104 0015 	add.w	r0, r4, #21
 800c4ea:	4560      	cmp	r0, ip
 800c4ec:	bf88      	it	hi
 800c4ee:	2304      	movhi	r3, #4
 800c4f0:	50ca      	str	r2, [r1, r3]
 800c4f2:	b10a      	cbz	r2, 800c4f8 <__lshift+0xa4>
 800c4f4:	f108 0602 	add.w	r6, r8, #2
 800c4f8:	3e01      	subs	r6, #1
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	612e      	str	r6, [r5, #16]
 800c4fe:	4621      	mov	r1, r4
 800c500:	f7ff fde2 	bl	800c0c8 <_Bfree>
 800c504:	4628      	mov	r0, r5
 800c506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c50e:	3301      	adds	r3, #1
 800c510:	e7c5      	b.n	800c49e <__lshift+0x4a>
 800c512:	3904      	subs	r1, #4
 800c514:	f853 2b04 	ldr.w	r2, [r3], #4
 800c518:	f841 2f04 	str.w	r2, [r1, #4]!
 800c51c:	459c      	cmp	ip, r3
 800c51e:	d8f9      	bhi.n	800c514 <__lshift+0xc0>
 800c520:	e7ea      	b.n	800c4f8 <__lshift+0xa4>
 800c522:	bf00      	nop
 800c524:	0800d01c 	.word	0x0800d01c
 800c528:	0800d02d 	.word	0x0800d02d

0800c52c <__mcmp>:
 800c52c:	690a      	ldr	r2, [r1, #16]
 800c52e:	4603      	mov	r3, r0
 800c530:	6900      	ldr	r0, [r0, #16]
 800c532:	1a80      	subs	r0, r0, r2
 800c534:	b530      	push	{r4, r5, lr}
 800c536:	d10e      	bne.n	800c556 <__mcmp+0x2a>
 800c538:	3314      	adds	r3, #20
 800c53a:	3114      	adds	r1, #20
 800c53c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c54c:	4295      	cmp	r5, r2
 800c54e:	d003      	beq.n	800c558 <__mcmp+0x2c>
 800c550:	d205      	bcs.n	800c55e <__mcmp+0x32>
 800c552:	f04f 30ff 	mov.w	r0, #4294967295
 800c556:	bd30      	pop	{r4, r5, pc}
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d3f3      	bcc.n	800c544 <__mcmp+0x18>
 800c55c:	e7fb      	b.n	800c556 <__mcmp+0x2a>
 800c55e:	2001      	movs	r0, #1
 800c560:	e7f9      	b.n	800c556 <__mcmp+0x2a>
	...

0800c564 <__mdiff>:
 800c564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	4689      	mov	r9, r1
 800c56a:	4606      	mov	r6, r0
 800c56c:	4611      	mov	r1, r2
 800c56e:	4648      	mov	r0, r9
 800c570:	4614      	mov	r4, r2
 800c572:	f7ff ffdb 	bl	800c52c <__mcmp>
 800c576:	1e05      	subs	r5, r0, #0
 800c578:	d112      	bne.n	800c5a0 <__mdiff+0x3c>
 800c57a:	4629      	mov	r1, r5
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff fd63 	bl	800c048 <_Balloc>
 800c582:	4602      	mov	r2, r0
 800c584:	b928      	cbnz	r0, 800c592 <__mdiff+0x2e>
 800c586:	4b3f      	ldr	r3, [pc, #252]	@ (800c684 <__mdiff+0x120>)
 800c588:	f240 2137 	movw	r1, #567	@ 0x237
 800c58c:	483e      	ldr	r0, [pc, #248]	@ (800c688 <__mdiff+0x124>)
 800c58e:	f000 fb75 	bl	800cc7c <__assert_func>
 800c592:	2301      	movs	r3, #1
 800c594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c598:	4610      	mov	r0, r2
 800c59a:	b003      	add	sp, #12
 800c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	bfbc      	itt	lt
 800c5a2:	464b      	movlt	r3, r9
 800c5a4:	46a1      	movlt	r9, r4
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5ac:	bfba      	itte	lt
 800c5ae:	461c      	movlt	r4, r3
 800c5b0:	2501      	movlt	r5, #1
 800c5b2:	2500      	movge	r5, #0
 800c5b4:	f7ff fd48 	bl	800c048 <_Balloc>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	b918      	cbnz	r0, 800c5c4 <__mdiff+0x60>
 800c5bc:	4b31      	ldr	r3, [pc, #196]	@ (800c684 <__mdiff+0x120>)
 800c5be:	f240 2145 	movw	r1, #581	@ 0x245
 800c5c2:	e7e3      	b.n	800c58c <__mdiff+0x28>
 800c5c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5c8:	6926      	ldr	r6, [r4, #16]
 800c5ca:	60c5      	str	r5, [r0, #12]
 800c5cc:	f109 0310 	add.w	r3, r9, #16
 800c5d0:	f109 0514 	add.w	r5, r9, #20
 800c5d4:	f104 0e14 	add.w	lr, r4, #20
 800c5d8:	f100 0b14 	add.w	fp, r0, #20
 800c5dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	46d9      	mov	r9, fp
 800c5e8:	f04f 0c00 	mov.w	ip, #0
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	fa1f f38a 	uxth.w	r3, sl
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	b283      	uxth	r3, r0
 800c600:	1acb      	subs	r3, r1, r3
 800c602:	0c00      	lsrs	r0, r0, #16
 800c604:	4463      	add	r3, ip
 800c606:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c60a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c60e:	b29b      	uxth	r3, r3
 800c610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c614:	4576      	cmp	r6, lr
 800c616:	f849 3b04 	str.w	r3, [r9], #4
 800c61a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c61e:	d8e5      	bhi.n	800c5ec <__mdiff+0x88>
 800c620:	1b33      	subs	r3, r6, r4
 800c622:	3b15      	subs	r3, #21
 800c624:	f023 0303 	bic.w	r3, r3, #3
 800c628:	3415      	adds	r4, #21
 800c62a:	3304      	adds	r3, #4
 800c62c:	42a6      	cmp	r6, r4
 800c62e:	bf38      	it	cc
 800c630:	2304      	movcc	r3, #4
 800c632:	441d      	add	r5, r3
 800c634:	445b      	add	r3, fp
 800c636:	461e      	mov	r6, r3
 800c638:	462c      	mov	r4, r5
 800c63a:	4544      	cmp	r4, r8
 800c63c:	d30e      	bcc.n	800c65c <__mdiff+0xf8>
 800c63e:	f108 0103 	add.w	r1, r8, #3
 800c642:	1b49      	subs	r1, r1, r5
 800c644:	f021 0103 	bic.w	r1, r1, #3
 800c648:	3d03      	subs	r5, #3
 800c64a:	45a8      	cmp	r8, r5
 800c64c:	bf38      	it	cc
 800c64e:	2100      	movcc	r1, #0
 800c650:	440b      	add	r3, r1
 800c652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c656:	b191      	cbz	r1, 800c67e <__mdiff+0x11a>
 800c658:	6117      	str	r7, [r2, #16]
 800c65a:	e79d      	b.n	800c598 <__mdiff+0x34>
 800c65c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c660:	46e6      	mov	lr, ip
 800c662:	0c08      	lsrs	r0, r1, #16
 800c664:	fa1c fc81 	uxtah	ip, ip, r1
 800c668:	4471      	add	r1, lr
 800c66a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c66e:	b289      	uxth	r1, r1
 800c670:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c674:	f846 1b04 	str.w	r1, [r6], #4
 800c678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c67c:	e7dd      	b.n	800c63a <__mdiff+0xd6>
 800c67e:	3f01      	subs	r7, #1
 800c680:	e7e7      	b.n	800c652 <__mdiff+0xee>
 800c682:	bf00      	nop
 800c684:	0800d01c 	.word	0x0800d01c
 800c688:	0800d02d 	.word	0x0800d02d

0800c68c <__d2b>:
 800c68c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c690:	460f      	mov	r7, r1
 800c692:	2101      	movs	r1, #1
 800c694:	ec59 8b10 	vmov	r8, r9, d0
 800c698:	4616      	mov	r6, r2
 800c69a:	f7ff fcd5 	bl	800c048 <_Balloc>
 800c69e:	4604      	mov	r4, r0
 800c6a0:	b930      	cbnz	r0, 800c6b0 <__d2b+0x24>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4b23      	ldr	r3, [pc, #140]	@ (800c734 <__d2b+0xa8>)
 800c6a6:	4824      	ldr	r0, [pc, #144]	@ (800c738 <__d2b+0xac>)
 800c6a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6ac:	f000 fae6 	bl	800cc7c <__assert_func>
 800c6b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6b8:	b10d      	cbz	r5, 800c6be <__d2b+0x32>
 800c6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	f1b8 0300 	subs.w	r3, r8, #0
 800c6c4:	d023      	beq.n	800c70e <__d2b+0x82>
 800c6c6:	4668      	mov	r0, sp
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	f7ff fd84 	bl	800c1d6 <__lo0bits>
 800c6ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6d2:	b1d0      	cbz	r0, 800c70a <__d2b+0x7e>
 800c6d4:	f1c0 0320 	rsb	r3, r0, #32
 800c6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6dc:	430b      	orrs	r3, r1
 800c6de:	40c2      	lsrs	r2, r0
 800c6e0:	6163      	str	r3, [r4, #20]
 800c6e2:	9201      	str	r2, [sp, #4]
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	61a3      	str	r3, [r4, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2201      	moveq	r2, #1
 800c6ee:	2202      	movne	r2, #2
 800c6f0:	6122      	str	r2, [r4, #16]
 800c6f2:	b1a5      	cbz	r5, 800c71e <__d2b+0x92>
 800c6f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6f8:	4405      	add	r5, r0
 800c6fa:	603d      	str	r5, [r7, #0]
 800c6fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c700:	6030      	str	r0, [r6, #0]
 800c702:	4620      	mov	r0, r4
 800c704:	b003      	add	sp, #12
 800c706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c70a:	6161      	str	r1, [r4, #20]
 800c70c:	e7ea      	b.n	800c6e4 <__d2b+0x58>
 800c70e:	a801      	add	r0, sp, #4
 800c710:	f7ff fd61 	bl	800c1d6 <__lo0bits>
 800c714:	9b01      	ldr	r3, [sp, #4]
 800c716:	6163      	str	r3, [r4, #20]
 800c718:	3020      	adds	r0, #32
 800c71a:	2201      	movs	r2, #1
 800c71c:	e7e8      	b.n	800c6f0 <__d2b+0x64>
 800c71e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c722:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c726:	6038      	str	r0, [r7, #0]
 800c728:	6918      	ldr	r0, [r3, #16]
 800c72a:	f7ff fd35 	bl	800c198 <__hi0bits>
 800c72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c732:	e7e5      	b.n	800c700 <__d2b+0x74>
 800c734:	0800d01c 	.word	0x0800d01c
 800c738:	0800d02d 	.word	0x0800d02d

0800c73c <__sfputc_r>:
 800c73c:	6893      	ldr	r3, [r2, #8]
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	b410      	push	{r4}
 800c744:	6093      	str	r3, [r2, #8]
 800c746:	da08      	bge.n	800c75a <__sfputc_r+0x1e>
 800c748:	6994      	ldr	r4, [r2, #24]
 800c74a:	42a3      	cmp	r3, r4
 800c74c:	db01      	blt.n	800c752 <__sfputc_r+0x16>
 800c74e:	290a      	cmp	r1, #10
 800c750:	d103      	bne.n	800c75a <__sfputc_r+0x1e>
 800c752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c756:	f000 b9df 	b.w	800cb18 <__swbuf_r>
 800c75a:	6813      	ldr	r3, [r2, #0]
 800c75c:	1c58      	adds	r0, r3, #1
 800c75e:	6010      	str	r0, [r2, #0]
 800c760:	7019      	strb	r1, [r3, #0]
 800c762:	4608      	mov	r0, r1
 800c764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <__sfputs_r>:
 800c76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76c:	4606      	mov	r6, r0
 800c76e:	460f      	mov	r7, r1
 800c770:	4614      	mov	r4, r2
 800c772:	18d5      	adds	r5, r2, r3
 800c774:	42ac      	cmp	r4, r5
 800c776:	d101      	bne.n	800c77c <__sfputs_r+0x12>
 800c778:	2000      	movs	r0, #0
 800c77a:	e007      	b.n	800c78c <__sfputs_r+0x22>
 800c77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c780:	463a      	mov	r2, r7
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff ffda 	bl	800c73c <__sfputc_r>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d1f3      	bne.n	800c774 <__sfputs_r+0xa>
 800c78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c790 <_vfiprintf_r>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	460d      	mov	r5, r1
 800c796:	b09d      	sub	sp, #116	@ 0x74
 800c798:	4614      	mov	r4, r2
 800c79a:	4698      	mov	r8, r3
 800c79c:	4606      	mov	r6, r0
 800c79e:	b118      	cbz	r0, 800c7a8 <_vfiprintf_r+0x18>
 800c7a0:	6a03      	ldr	r3, [r0, #32]
 800c7a2:	b90b      	cbnz	r3, 800c7a8 <_vfiprintf_r+0x18>
 800c7a4:	f7fe fbfc 	bl	800afa0 <__sinit>
 800c7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7aa:	07d9      	lsls	r1, r3, #31
 800c7ac:	d405      	bmi.n	800c7ba <_vfiprintf_r+0x2a>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d402      	bmi.n	800c7ba <_vfiprintf_r+0x2a>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7b6:	f7fe fcea 	bl	800b18e <__retarget_lock_acquire_recursive>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	071b      	lsls	r3, r3, #28
 800c7be:	d501      	bpl.n	800c7c4 <_vfiprintf_r+0x34>
 800c7c0:	692b      	ldr	r3, [r5, #16]
 800c7c2:	b99b      	cbnz	r3, 800c7ec <_vfiprintf_r+0x5c>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f000 f9e4 	bl	800cb94 <__swsetup_r>
 800c7cc:	b170      	cbz	r0, 800c7ec <_vfiprintf_r+0x5c>
 800c7ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7d0:	07dc      	lsls	r4, r3, #31
 800c7d2:	d504      	bpl.n	800c7de <_vfiprintf_r+0x4e>
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d8:	b01d      	add	sp, #116	@ 0x74
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	0598      	lsls	r0, r3, #22
 800c7e2:	d4f7      	bmi.n	800c7d4 <_vfiprintf_r+0x44>
 800c7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7e6:	f7fe fcd3 	bl	800b190 <__retarget_lock_release_recursive>
 800c7ea:	e7f3      	b.n	800c7d4 <_vfiprintf_r+0x44>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7fa:	2330      	movs	r3, #48	@ 0x30
 800c7fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9ac <_vfiprintf_r+0x21c>
 800c800:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c804:	f04f 0901 	mov.w	r9, #1
 800c808:	4623      	mov	r3, r4
 800c80a:	469a      	mov	sl, r3
 800c80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c810:	b10a      	cbz	r2, 800c816 <_vfiprintf_r+0x86>
 800c812:	2a25      	cmp	r2, #37	@ 0x25
 800c814:	d1f9      	bne.n	800c80a <_vfiprintf_r+0x7a>
 800c816:	ebba 0b04 	subs.w	fp, sl, r4
 800c81a:	d00b      	beq.n	800c834 <_vfiprintf_r+0xa4>
 800c81c:	465b      	mov	r3, fp
 800c81e:	4622      	mov	r2, r4
 800c820:	4629      	mov	r1, r5
 800c822:	4630      	mov	r0, r6
 800c824:	f7ff ffa1 	bl	800c76a <__sfputs_r>
 800c828:	3001      	adds	r0, #1
 800c82a:	f000 80a7 	beq.w	800c97c <_vfiprintf_r+0x1ec>
 800c82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c830:	445a      	add	r2, fp
 800c832:	9209      	str	r2, [sp, #36]	@ 0x24
 800c834:	f89a 3000 	ldrb.w	r3, [sl]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 809f 	beq.w	800c97c <_vfiprintf_r+0x1ec>
 800c83e:	2300      	movs	r3, #0
 800c840:	f04f 32ff 	mov.w	r2, #4294967295
 800c844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c848:	f10a 0a01 	add.w	sl, sl, #1
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	9307      	str	r3, [sp, #28]
 800c850:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c854:	931a      	str	r3, [sp, #104]	@ 0x68
 800c856:	4654      	mov	r4, sl
 800c858:	2205      	movs	r2, #5
 800c85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85e:	4853      	ldr	r0, [pc, #332]	@ (800c9ac <_vfiprintf_r+0x21c>)
 800c860:	f7f3 fcb6 	bl	80001d0 <memchr>
 800c864:	9a04      	ldr	r2, [sp, #16]
 800c866:	b9d8      	cbnz	r0, 800c8a0 <_vfiprintf_r+0x110>
 800c868:	06d1      	lsls	r1, r2, #27
 800c86a:	bf44      	itt	mi
 800c86c:	2320      	movmi	r3, #32
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c872:	0713      	lsls	r3, r2, #28
 800c874:	bf44      	itt	mi
 800c876:	232b      	movmi	r3, #43	@ 0x2b
 800c878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c87c:	f89a 3000 	ldrb.w	r3, [sl]
 800c880:	2b2a      	cmp	r3, #42	@ 0x2a
 800c882:	d015      	beq.n	800c8b0 <_vfiprintf_r+0x120>
 800c884:	9a07      	ldr	r2, [sp, #28]
 800c886:	4654      	mov	r4, sl
 800c888:	2000      	movs	r0, #0
 800c88a:	f04f 0c0a 	mov.w	ip, #10
 800c88e:	4621      	mov	r1, r4
 800c890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c894:	3b30      	subs	r3, #48	@ 0x30
 800c896:	2b09      	cmp	r3, #9
 800c898:	d94b      	bls.n	800c932 <_vfiprintf_r+0x1a2>
 800c89a:	b1b0      	cbz	r0, 800c8ca <_vfiprintf_r+0x13a>
 800c89c:	9207      	str	r2, [sp, #28]
 800c89e:	e014      	b.n	800c8ca <_vfiprintf_r+0x13a>
 800c8a0:	eba0 0308 	sub.w	r3, r0, r8
 800c8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	46a2      	mov	sl, r4
 800c8ae:	e7d2      	b.n	800c856 <_vfiprintf_r+0xc6>
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	1d19      	adds	r1, r3, #4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	9103      	str	r1, [sp, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bfbb      	ittet	lt
 800c8bc:	425b      	neglt	r3, r3
 800c8be:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c2:	9307      	strge	r3, [sp, #28]
 800c8c4:	9307      	strlt	r3, [sp, #28]
 800c8c6:	bfb8      	it	lt
 800c8c8:	9204      	strlt	r2, [sp, #16]
 800c8ca:	7823      	ldrb	r3, [r4, #0]
 800c8cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8ce:	d10a      	bne.n	800c8e6 <_vfiprintf_r+0x156>
 800c8d0:	7863      	ldrb	r3, [r4, #1]
 800c8d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8d4:	d132      	bne.n	800c93c <_vfiprintf_r+0x1ac>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	1d1a      	adds	r2, r3, #4
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	9203      	str	r2, [sp, #12]
 800c8de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8e2:	3402      	adds	r4, #2
 800c8e4:	9305      	str	r3, [sp, #20]
 800c8e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c9bc <_vfiprintf_r+0x22c>
 800c8ea:	7821      	ldrb	r1, [r4, #0]
 800c8ec:	2203      	movs	r2, #3
 800c8ee:	4650      	mov	r0, sl
 800c8f0:	f7f3 fc6e 	bl	80001d0 <memchr>
 800c8f4:	b138      	cbz	r0, 800c906 <_vfiprintf_r+0x176>
 800c8f6:	9b04      	ldr	r3, [sp, #16]
 800c8f8:	eba0 000a 	sub.w	r0, r0, sl
 800c8fc:	2240      	movs	r2, #64	@ 0x40
 800c8fe:	4082      	lsls	r2, r0
 800c900:	4313      	orrs	r3, r2
 800c902:	3401      	adds	r4, #1
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90a:	4829      	ldr	r0, [pc, #164]	@ (800c9b0 <_vfiprintf_r+0x220>)
 800c90c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c910:	2206      	movs	r2, #6
 800c912:	f7f3 fc5d 	bl	80001d0 <memchr>
 800c916:	2800      	cmp	r0, #0
 800c918:	d03f      	beq.n	800c99a <_vfiprintf_r+0x20a>
 800c91a:	4b26      	ldr	r3, [pc, #152]	@ (800c9b4 <_vfiprintf_r+0x224>)
 800c91c:	bb1b      	cbnz	r3, 800c966 <_vfiprintf_r+0x1d6>
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	3307      	adds	r3, #7
 800c922:	f023 0307 	bic.w	r3, r3, #7
 800c926:	3308      	adds	r3, #8
 800c928:	9303      	str	r3, [sp, #12]
 800c92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c92c:	443b      	add	r3, r7
 800c92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c930:	e76a      	b.n	800c808 <_vfiprintf_r+0x78>
 800c932:	fb0c 3202 	mla	r2, ip, r2, r3
 800c936:	460c      	mov	r4, r1
 800c938:	2001      	movs	r0, #1
 800c93a:	e7a8      	b.n	800c88e <_vfiprintf_r+0xfe>
 800c93c:	2300      	movs	r3, #0
 800c93e:	3401      	adds	r4, #1
 800c940:	9305      	str	r3, [sp, #20]
 800c942:	4619      	mov	r1, r3
 800c944:	f04f 0c0a 	mov.w	ip, #10
 800c948:	4620      	mov	r0, r4
 800c94a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c94e:	3a30      	subs	r2, #48	@ 0x30
 800c950:	2a09      	cmp	r2, #9
 800c952:	d903      	bls.n	800c95c <_vfiprintf_r+0x1cc>
 800c954:	2b00      	cmp	r3, #0
 800c956:	d0c6      	beq.n	800c8e6 <_vfiprintf_r+0x156>
 800c958:	9105      	str	r1, [sp, #20]
 800c95a:	e7c4      	b.n	800c8e6 <_vfiprintf_r+0x156>
 800c95c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c960:	4604      	mov	r4, r0
 800c962:	2301      	movs	r3, #1
 800c964:	e7f0      	b.n	800c948 <_vfiprintf_r+0x1b8>
 800c966:	ab03      	add	r3, sp, #12
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	462a      	mov	r2, r5
 800c96c:	4b12      	ldr	r3, [pc, #72]	@ (800c9b8 <_vfiprintf_r+0x228>)
 800c96e:	a904      	add	r1, sp, #16
 800c970:	4630      	mov	r0, r6
 800c972:	f7fd fed3 	bl	800a71c <_printf_float>
 800c976:	4607      	mov	r7, r0
 800c978:	1c78      	adds	r0, r7, #1
 800c97a:	d1d6      	bne.n	800c92a <_vfiprintf_r+0x19a>
 800c97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c97e:	07d9      	lsls	r1, r3, #31
 800c980:	d405      	bmi.n	800c98e <_vfiprintf_r+0x1fe>
 800c982:	89ab      	ldrh	r3, [r5, #12]
 800c984:	059a      	lsls	r2, r3, #22
 800c986:	d402      	bmi.n	800c98e <_vfiprintf_r+0x1fe>
 800c988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c98a:	f7fe fc01 	bl	800b190 <__retarget_lock_release_recursive>
 800c98e:	89ab      	ldrh	r3, [r5, #12]
 800c990:	065b      	lsls	r3, r3, #25
 800c992:	f53f af1f 	bmi.w	800c7d4 <_vfiprintf_r+0x44>
 800c996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c998:	e71e      	b.n	800c7d8 <_vfiprintf_r+0x48>
 800c99a:	ab03      	add	r3, sp, #12
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4b05      	ldr	r3, [pc, #20]	@ (800c9b8 <_vfiprintf_r+0x228>)
 800c9a2:	a904      	add	r1, sp, #16
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7fe f951 	bl	800ac4c <_printf_i>
 800c9aa:	e7e4      	b.n	800c976 <_vfiprintf_r+0x1e6>
 800c9ac:	0800d086 	.word	0x0800d086
 800c9b0:	0800d090 	.word	0x0800d090
 800c9b4:	0800a71d 	.word	0x0800a71d
 800c9b8:	0800c76b 	.word	0x0800c76b
 800c9bc:	0800d08c 	.word	0x0800d08c

0800c9c0 <__sflush_r>:
 800c9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c8:	0716      	lsls	r6, r2, #28
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	d454      	bmi.n	800ca7a <__sflush_r+0xba>
 800c9d0:	684b      	ldr	r3, [r1, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dc02      	bgt.n	800c9dc <__sflush_r+0x1c>
 800c9d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dd48      	ble.n	800ca6e <__sflush_r+0xae>
 800c9dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	d045      	beq.n	800ca6e <__sflush_r+0xae>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9e8:	682f      	ldr	r7, [r5, #0]
 800c9ea:	6a21      	ldr	r1, [r4, #32]
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	d030      	beq.n	800ca52 <__sflush_r+0x92>
 800c9f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	0759      	lsls	r1, r3, #29
 800c9f6:	d505      	bpl.n	800ca04 <__sflush_r+0x44>
 800c9f8:	6863      	ldr	r3, [r4, #4]
 800c9fa:	1ad2      	subs	r2, r2, r3
 800c9fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9fe:	b10b      	cbz	r3, 800ca04 <__sflush_r+0x44>
 800ca00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	2300      	movs	r3, #0
 800ca06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca08:	6a21      	ldr	r1, [r4, #32]
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	47b0      	blx	r6
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	d106      	bne.n	800ca22 <__sflush_r+0x62>
 800ca14:	6829      	ldr	r1, [r5, #0]
 800ca16:	291d      	cmp	r1, #29
 800ca18:	d82b      	bhi.n	800ca72 <__sflush_r+0xb2>
 800ca1a:	4a2a      	ldr	r2, [pc, #168]	@ (800cac4 <__sflush_r+0x104>)
 800ca1c:	40ca      	lsrs	r2, r1
 800ca1e:	07d6      	lsls	r6, r2, #31
 800ca20:	d527      	bpl.n	800ca72 <__sflush_r+0xb2>
 800ca22:	2200      	movs	r2, #0
 800ca24:	6062      	str	r2, [r4, #4]
 800ca26:	04d9      	lsls	r1, r3, #19
 800ca28:	6922      	ldr	r2, [r4, #16]
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	d504      	bpl.n	800ca38 <__sflush_r+0x78>
 800ca2e:	1c42      	adds	r2, r0, #1
 800ca30:	d101      	bne.n	800ca36 <__sflush_r+0x76>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	b903      	cbnz	r3, 800ca38 <__sflush_r+0x78>
 800ca36:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca3a:	602f      	str	r7, [r5, #0]
 800ca3c:	b1b9      	cbz	r1, 800ca6e <__sflush_r+0xae>
 800ca3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca42:	4299      	cmp	r1, r3
 800ca44:	d002      	beq.n	800ca4c <__sflush_r+0x8c>
 800ca46:	4628      	mov	r0, r5
 800ca48:	f7ff f9fe 	bl	800be48 <_free_r>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca50:	e00d      	b.n	800ca6e <__sflush_r+0xae>
 800ca52:	2301      	movs	r3, #1
 800ca54:	4628      	mov	r0, r5
 800ca56:	47b0      	blx	r6
 800ca58:	4602      	mov	r2, r0
 800ca5a:	1c50      	adds	r0, r2, #1
 800ca5c:	d1c9      	bne.n	800c9f2 <__sflush_r+0x32>
 800ca5e:	682b      	ldr	r3, [r5, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d0c6      	beq.n	800c9f2 <__sflush_r+0x32>
 800ca64:	2b1d      	cmp	r3, #29
 800ca66:	d001      	beq.n	800ca6c <__sflush_r+0xac>
 800ca68:	2b16      	cmp	r3, #22
 800ca6a:	d11e      	bne.n	800caaa <__sflush_r+0xea>
 800ca6c:	602f      	str	r7, [r5, #0]
 800ca6e:	2000      	movs	r0, #0
 800ca70:	e022      	b.n	800cab8 <__sflush_r+0xf8>
 800ca72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca76:	b21b      	sxth	r3, r3
 800ca78:	e01b      	b.n	800cab2 <__sflush_r+0xf2>
 800ca7a:	690f      	ldr	r7, [r1, #16]
 800ca7c:	2f00      	cmp	r7, #0
 800ca7e:	d0f6      	beq.n	800ca6e <__sflush_r+0xae>
 800ca80:	0793      	lsls	r3, r2, #30
 800ca82:	680e      	ldr	r6, [r1, #0]
 800ca84:	bf08      	it	eq
 800ca86:	694b      	ldreq	r3, [r1, #20]
 800ca88:	600f      	str	r7, [r1, #0]
 800ca8a:	bf18      	it	ne
 800ca8c:	2300      	movne	r3, #0
 800ca8e:	eba6 0807 	sub.w	r8, r6, r7
 800ca92:	608b      	str	r3, [r1, #8]
 800ca94:	f1b8 0f00 	cmp.w	r8, #0
 800ca98:	dde9      	ble.n	800ca6e <__sflush_r+0xae>
 800ca9a:	6a21      	ldr	r1, [r4, #32]
 800ca9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca9e:	4643      	mov	r3, r8
 800caa0:	463a      	mov	r2, r7
 800caa2:	4628      	mov	r0, r5
 800caa4:	47b0      	blx	r6
 800caa6:	2800      	cmp	r0, #0
 800caa8:	dc08      	bgt.n	800cabc <__sflush_r+0xfc>
 800caaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	f04f 30ff 	mov.w	r0, #4294967295
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	4407      	add	r7, r0
 800cabe:	eba8 0800 	sub.w	r8, r8, r0
 800cac2:	e7e7      	b.n	800ca94 <__sflush_r+0xd4>
 800cac4:	20400001 	.word	0x20400001

0800cac8 <_fflush_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	690b      	ldr	r3, [r1, #16]
 800cacc:	4605      	mov	r5, r0
 800cace:	460c      	mov	r4, r1
 800cad0:	b913      	cbnz	r3, 800cad8 <_fflush_r+0x10>
 800cad2:	2500      	movs	r5, #0
 800cad4:	4628      	mov	r0, r5
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	b118      	cbz	r0, 800cae2 <_fflush_r+0x1a>
 800cada:	6a03      	ldr	r3, [r0, #32]
 800cadc:	b90b      	cbnz	r3, 800cae2 <_fflush_r+0x1a>
 800cade:	f7fe fa5f 	bl	800afa0 <__sinit>
 800cae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d0f3      	beq.n	800cad2 <_fflush_r+0xa>
 800caea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800caec:	07d0      	lsls	r0, r2, #31
 800caee:	d404      	bmi.n	800cafa <_fflush_r+0x32>
 800caf0:	0599      	lsls	r1, r3, #22
 800caf2:	d402      	bmi.n	800cafa <_fflush_r+0x32>
 800caf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caf6:	f7fe fb4a 	bl	800b18e <__retarget_lock_acquire_recursive>
 800cafa:	4628      	mov	r0, r5
 800cafc:	4621      	mov	r1, r4
 800cafe:	f7ff ff5f 	bl	800c9c0 <__sflush_r>
 800cb02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb04:	07da      	lsls	r2, r3, #31
 800cb06:	4605      	mov	r5, r0
 800cb08:	d4e4      	bmi.n	800cad4 <_fflush_r+0xc>
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	059b      	lsls	r3, r3, #22
 800cb0e:	d4e1      	bmi.n	800cad4 <_fflush_r+0xc>
 800cb10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb12:	f7fe fb3d 	bl	800b190 <__retarget_lock_release_recursive>
 800cb16:	e7dd      	b.n	800cad4 <_fflush_r+0xc>

0800cb18 <__swbuf_r>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	460e      	mov	r6, r1
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	4605      	mov	r5, r0
 800cb20:	b118      	cbz	r0, 800cb2a <__swbuf_r+0x12>
 800cb22:	6a03      	ldr	r3, [r0, #32]
 800cb24:	b90b      	cbnz	r3, 800cb2a <__swbuf_r+0x12>
 800cb26:	f7fe fa3b 	bl	800afa0 <__sinit>
 800cb2a:	69a3      	ldr	r3, [r4, #24]
 800cb2c:	60a3      	str	r3, [r4, #8]
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	071a      	lsls	r2, r3, #28
 800cb32:	d501      	bpl.n	800cb38 <__swbuf_r+0x20>
 800cb34:	6923      	ldr	r3, [r4, #16]
 800cb36:	b943      	cbnz	r3, 800cb4a <__swbuf_r+0x32>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f000 f82a 	bl	800cb94 <__swsetup_r>
 800cb40:	b118      	cbz	r0, 800cb4a <__swbuf_r+0x32>
 800cb42:	f04f 37ff 	mov.w	r7, #4294967295
 800cb46:	4638      	mov	r0, r7
 800cb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	6922      	ldr	r2, [r4, #16]
 800cb4e:	1a98      	subs	r0, r3, r2
 800cb50:	6963      	ldr	r3, [r4, #20]
 800cb52:	b2f6      	uxtb	r6, r6
 800cb54:	4283      	cmp	r3, r0
 800cb56:	4637      	mov	r7, r6
 800cb58:	dc05      	bgt.n	800cb66 <__swbuf_r+0x4e>
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	f7ff ffb3 	bl	800cac8 <_fflush_r>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d1ed      	bne.n	800cb42 <__swbuf_r+0x2a>
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	60a3      	str	r3, [r4, #8]
 800cb6c:	6823      	ldr	r3, [r4, #0]
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	6022      	str	r2, [r4, #0]
 800cb72:	701e      	strb	r6, [r3, #0]
 800cb74:	6962      	ldr	r2, [r4, #20]
 800cb76:	1c43      	adds	r3, r0, #1
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d004      	beq.n	800cb86 <__swbuf_r+0x6e>
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	07db      	lsls	r3, r3, #31
 800cb80:	d5e1      	bpl.n	800cb46 <__swbuf_r+0x2e>
 800cb82:	2e0a      	cmp	r6, #10
 800cb84:	d1df      	bne.n	800cb46 <__swbuf_r+0x2e>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f7ff ff9d 	bl	800cac8 <_fflush_r>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0d9      	beq.n	800cb46 <__swbuf_r+0x2e>
 800cb92:	e7d6      	b.n	800cb42 <__swbuf_r+0x2a>

0800cb94 <__swsetup_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4b29      	ldr	r3, [pc, #164]	@ (800cc3c <__swsetup_r+0xa8>)
 800cb98:	4605      	mov	r5, r0
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	b118      	cbz	r0, 800cba8 <__swsetup_r+0x14>
 800cba0:	6a03      	ldr	r3, [r0, #32]
 800cba2:	b90b      	cbnz	r3, 800cba8 <__swsetup_r+0x14>
 800cba4:	f7fe f9fc 	bl	800afa0 <__sinit>
 800cba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbac:	0719      	lsls	r1, r3, #28
 800cbae:	d422      	bmi.n	800cbf6 <__swsetup_r+0x62>
 800cbb0:	06da      	lsls	r2, r3, #27
 800cbb2:	d407      	bmi.n	800cbc4 <__swsetup_r+0x30>
 800cbb4:	2209      	movs	r2, #9
 800cbb6:	602a      	str	r2, [r5, #0]
 800cbb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc2:	e033      	b.n	800cc2c <__swsetup_r+0x98>
 800cbc4:	0758      	lsls	r0, r3, #29
 800cbc6:	d512      	bpl.n	800cbee <__swsetup_r+0x5a>
 800cbc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbca:	b141      	cbz	r1, 800cbde <__swsetup_r+0x4a>
 800cbcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbd0:	4299      	cmp	r1, r3
 800cbd2:	d002      	beq.n	800cbda <__swsetup_r+0x46>
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	f7ff f937 	bl	800be48 <_free_r>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbe4:	81a3      	strh	r3, [r4, #12]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	6063      	str	r3, [r4, #4]
 800cbea:	6923      	ldr	r3, [r4, #16]
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	f043 0308 	orr.w	r3, r3, #8
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	6923      	ldr	r3, [r4, #16]
 800cbf8:	b94b      	cbnz	r3, 800cc0e <__swsetup_r+0x7a>
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc04:	d003      	beq.n	800cc0e <__swsetup_r+0x7a>
 800cc06:	4621      	mov	r1, r4
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f000 f8c1 	bl	800cd90 <__smakebuf_r>
 800cc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc12:	f013 0201 	ands.w	r2, r3, #1
 800cc16:	d00a      	beq.n	800cc2e <__swsetup_r+0x9a>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	60a2      	str	r2, [r4, #8]
 800cc1c:	6962      	ldr	r2, [r4, #20]
 800cc1e:	4252      	negs	r2, r2
 800cc20:	61a2      	str	r2, [r4, #24]
 800cc22:	6922      	ldr	r2, [r4, #16]
 800cc24:	b942      	cbnz	r2, 800cc38 <__swsetup_r+0xa4>
 800cc26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc2a:	d1c5      	bne.n	800cbb8 <__swsetup_r+0x24>
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
 800cc2e:	0799      	lsls	r1, r3, #30
 800cc30:	bf58      	it	pl
 800cc32:	6962      	ldrpl	r2, [r4, #20]
 800cc34:	60a2      	str	r2, [r4, #8]
 800cc36:	e7f4      	b.n	800cc22 <__swsetup_r+0x8e>
 800cc38:	2000      	movs	r0, #0
 800cc3a:	e7f7      	b.n	800cc2c <__swsetup_r+0x98>
 800cc3c:	20000114 	.word	0x20000114

0800cc40 <_sbrk_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d06      	ldr	r5, [pc, #24]	@ (800cc5c <_sbrk_r+0x1c>)
 800cc44:	2300      	movs	r3, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	4608      	mov	r0, r1
 800cc4a:	602b      	str	r3, [r5, #0]
 800cc4c:	f7f4 fe9e 	bl	800198c <_sbrk>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	d102      	bne.n	800cc5a <_sbrk_r+0x1a>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	b103      	cbz	r3, 800cc5a <_sbrk_r+0x1a>
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	20002320 	.word	0x20002320

0800cc60 <memcpy>:
 800cc60:	440a      	add	r2, r1
 800cc62:	4291      	cmp	r1, r2
 800cc64:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc68:	d100      	bne.n	800cc6c <memcpy+0xc>
 800cc6a:	4770      	bx	lr
 800cc6c:	b510      	push	{r4, lr}
 800cc6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc76:	4291      	cmp	r1, r2
 800cc78:	d1f9      	bne.n	800cc6e <memcpy+0xe>
 800cc7a:	bd10      	pop	{r4, pc}

0800cc7c <__assert_func>:
 800cc7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc7e:	4614      	mov	r4, r2
 800cc80:	461a      	mov	r2, r3
 800cc82:	4b09      	ldr	r3, [pc, #36]	@ (800cca8 <__assert_func+0x2c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4605      	mov	r5, r0
 800cc88:	68d8      	ldr	r0, [r3, #12]
 800cc8a:	b14c      	cbz	r4, 800cca0 <__assert_func+0x24>
 800cc8c:	4b07      	ldr	r3, [pc, #28]	@ (800ccac <__assert_func+0x30>)
 800cc8e:	9100      	str	r1, [sp, #0]
 800cc90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc94:	4906      	ldr	r1, [pc, #24]	@ (800ccb0 <__assert_func+0x34>)
 800cc96:	462b      	mov	r3, r5
 800cc98:	f000 f842 	bl	800cd20 <fiprintf>
 800cc9c:	f000 f8d6 	bl	800ce4c <abort>
 800cca0:	4b04      	ldr	r3, [pc, #16]	@ (800ccb4 <__assert_func+0x38>)
 800cca2:	461c      	mov	r4, r3
 800cca4:	e7f3      	b.n	800cc8e <__assert_func+0x12>
 800cca6:	bf00      	nop
 800cca8:	20000114 	.word	0x20000114
 800ccac:	0800d0a1 	.word	0x0800d0a1
 800ccb0:	0800d0ae 	.word	0x0800d0ae
 800ccb4:	0800d0dc 	.word	0x0800d0dc

0800ccb8 <_calloc_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	fba1 5402 	umull	r5, r4, r1, r2
 800ccbe:	b934      	cbnz	r4, 800ccce <_calloc_r+0x16>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7ff f935 	bl	800bf30 <_malloc_r>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	b928      	cbnz	r0, 800ccd6 <_calloc_r+0x1e>
 800ccca:	4630      	mov	r0, r6
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
 800ccce:	220c      	movs	r2, #12
 800ccd0:	6002      	str	r2, [r0, #0]
 800ccd2:	2600      	movs	r6, #0
 800ccd4:	e7f9      	b.n	800ccca <_calloc_r+0x12>
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4621      	mov	r1, r4
 800ccda:	f7fe f9da 	bl	800b092 <memset>
 800ccde:	e7f4      	b.n	800ccca <_calloc_r+0x12>

0800cce0 <__ascii_mbtowc>:
 800cce0:	b082      	sub	sp, #8
 800cce2:	b901      	cbnz	r1, 800cce6 <__ascii_mbtowc+0x6>
 800cce4:	a901      	add	r1, sp, #4
 800cce6:	b142      	cbz	r2, 800ccfa <__ascii_mbtowc+0x1a>
 800cce8:	b14b      	cbz	r3, 800ccfe <__ascii_mbtowc+0x1e>
 800ccea:	7813      	ldrb	r3, [r2, #0]
 800ccec:	600b      	str	r3, [r1, #0]
 800ccee:	7812      	ldrb	r2, [r2, #0]
 800ccf0:	1e10      	subs	r0, r2, #0
 800ccf2:	bf18      	it	ne
 800ccf4:	2001      	movne	r0, #1
 800ccf6:	b002      	add	sp, #8
 800ccf8:	4770      	bx	lr
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	e7fb      	b.n	800ccf6 <__ascii_mbtowc+0x16>
 800ccfe:	f06f 0001 	mvn.w	r0, #1
 800cd02:	e7f8      	b.n	800ccf6 <__ascii_mbtowc+0x16>

0800cd04 <__ascii_wctomb>:
 800cd04:	4603      	mov	r3, r0
 800cd06:	4608      	mov	r0, r1
 800cd08:	b141      	cbz	r1, 800cd1c <__ascii_wctomb+0x18>
 800cd0a:	2aff      	cmp	r2, #255	@ 0xff
 800cd0c:	d904      	bls.n	800cd18 <__ascii_wctomb+0x14>
 800cd0e:	228a      	movs	r2, #138	@ 0x8a
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	4770      	bx	lr
 800cd18:	700a      	strb	r2, [r1, #0]
 800cd1a:	2001      	movs	r0, #1
 800cd1c:	4770      	bx	lr
	...

0800cd20 <fiprintf>:
 800cd20:	b40e      	push	{r1, r2, r3}
 800cd22:	b503      	push	{r0, r1, lr}
 800cd24:	4601      	mov	r1, r0
 800cd26:	ab03      	add	r3, sp, #12
 800cd28:	4805      	ldr	r0, [pc, #20]	@ (800cd40 <fiprintf+0x20>)
 800cd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2e:	6800      	ldr	r0, [r0, #0]
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	f7ff fd2d 	bl	800c790 <_vfiprintf_r>
 800cd36:	b002      	add	sp, #8
 800cd38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd3c:	b003      	add	sp, #12
 800cd3e:	4770      	bx	lr
 800cd40:	20000114 	.word	0x20000114

0800cd44 <__swhatbuf_r>:
 800cd44:	b570      	push	{r4, r5, r6, lr}
 800cd46:	460c      	mov	r4, r1
 800cd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	b096      	sub	sp, #88	@ 0x58
 800cd50:	4615      	mov	r5, r2
 800cd52:	461e      	mov	r6, r3
 800cd54:	da0d      	bge.n	800cd72 <__swhatbuf_r+0x2e>
 800cd56:	89a3      	ldrh	r3, [r4, #12]
 800cd58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd5c:	f04f 0100 	mov.w	r1, #0
 800cd60:	bf14      	ite	ne
 800cd62:	2340      	movne	r3, #64	@ 0x40
 800cd64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd68:	2000      	movs	r0, #0
 800cd6a:	6031      	str	r1, [r6, #0]
 800cd6c:	602b      	str	r3, [r5, #0]
 800cd6e:	b016      	add	sp, #88	@ 0x58
 800cd70:	bd70      	pop	{r4, r5, r6, pc}
 800cd72:	466a      	mov	r2, sp
 800cd74:	f000 f848 	bl	800ce08 <_fstat_r>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	dbec      	blt.n	800cd56 <__swhatbuf_r+0x12>
 800cd7c:	9901      	ldr	r1, [sp, #4]
 800cd7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd86:	4259      	negs	r1, r3
 800cd88:	4159      	adcs	r1, r3
 800cd8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd8e:	e7eb      	b.n	800cd68 <__swhatbuf_r+0x24>

0800cd90 <__smakebuf_r>:
 800cd90:	898b      	ldrh	r3, [r1, #12]
 800cd92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd94:	079d      	lsls	r5, r3, #30
 800cd96:	4606      	mov	r6, r0
 800cd98:	460c      	mov	r4, r1
 800cd9a:	d507      	bpl.n	800cdac <__smakebuf_r+0x1c>
 800cd9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	6123      	str	r3, [r4, #16]
 800cda4:	2301      	movs	r3, #1
 800cda6:	6163      	str	r3, [r4, #20]
 800cda8:	b003      	add	sp, #12
 800cdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdac:	ab01      	add	r3, sp, #4
 800cdae:	466a      	mov	r2, sp
 800cdb0:	f7ff ffc8 	bl	800cd44 <__swhatbuf_r>
 800cdb4:	9f00      	ldr	r7, [sp, #0]
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	4639      	mov	r1, r7
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f7ff f8b8 	bl	800bf30 <_malloc_r>
 800cdc0:	b948      	cbnz	r0, 800cdd6 <__smakebuf_r+0x46>
 800cdc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc6:	059a      	lsls	r2, r3, #22
 800cdc8:	d4ee      	bmi.n	800cda8 <__smakebuf_r+0x18>
 800cdca:	f023 0303 	bic.w	r3, r3, #3
 800cdce:	f043 0302 	orr.w	r3, r3, #2
 800cdd2:	81a3      	strh	r3, [r4, #12]
 800cdd4:	e7e2      	b.n	800cd9c <__smakebuf_r+0xc>
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	6020      	str	r0, [r4, #0]
 800cdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdde:	81a3      	strh	r3, [r4, #12]
 800cde0:	9b01      	ldr	r3, [sp, #4]
 800cde2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cde6:	b15b      	cbz	r3, 800ce00 <__smakebuf_r+0x70>
 800cde8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdec:	4630      	mov	r0, r6
 800cdee:	f000 f81d 	bl	800ce2c <_isatty_r>
 800cdf2:	b128      	cbz	r0, 800ce00 <__smakebuf_r+0x70>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f023 0303 	bic.w	r3, r3, #3
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	431d      	orrs	r5, r3
 800ce04:	81a5      	strh	r5, [r4, #12]
 800ce06:	e7cf      	b.n	800cda8 <__smakebuf_r+0x18>

0800ce08 <_fstat_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4d07      	ldr	r5, [pc, #28]	@ (800ce28 <_fstat_r+0x20>)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	4611      	mov	r1, r2
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	f7f4 fd79 	bl	800190c <_fstat>
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	d102      	bne.n	800ce24 <_fstat_r+0x1c>
 800ce1e:	682b      	ldr	r3, [r5, #0]
 800ce20:	b103      	cbz	r3, 800ce24 <_fstat_r+0x1c>
 800ce22:	6023      	str	r3, [r4, #0]
 800ce24:	bd38      	pop	{r3, r4, r5, pc}
 800ce26:	bf00      	nop
 800ce28:	20002320 	.word	0x20002320

0800ce2c <_isatty_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d06      	ldr	r5, [pc, #24]	@ (800ce48 <_isatty_r+0x1c>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	602b      	str	r3, [r5, #0]
 800ce38:	f7f4 fd78 	bl	800192c <_isatty>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_isatty_r+0x1a>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_isatty_r+0x1a>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20002320 	.word	0x20002320

0800ce4c <abort>:
 800ce4c:	b508      	push	{r3, lr}
 800ce4e:	2006      	movs	r0, #6
 800ce50:	f000 f82c 	bl	800ceac <raise>
 800ce54:	2001      	movs	r0, #1
 800ce56:	f7f4 fd25 	bl	80018a4 <_exit>

0800ce5a <_raise_r>:
 800ce5a:	291f      	cmp	r1, #31
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4605      	mov	r5, r0
 800ce60:	460c      	mov	r4, r1
 800ce62:	d904      	bls.n	800ce6e <_raise_r+0x14>
 800ce64:	2316      	movs	r3, #22
 800ce66:	6003      	str	r3, [r0, #0]
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	bd38      	pop	{r3, r4, r5, pc}
 800ce6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce70:	b112      	cbz	r2, 800ce78 <_raise_r+0x1e>
 800ce72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce76:	b94b      	cbnz	r3, 800ce8c <_raise_r+0x32>
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f000 f831 	bl	800cee0 <_getpid_r>
 800ce7e:	4622      	mov	r2, r4
 800ce80:	4601      	mov	r1, r0
 800ce82:	4628      	mov	r0, r5
 800ce84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce88:	f000 b818 	b.w	800cebc <_kill_r>
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d00a      	beq.n	800cea6 <_raise_r+0x4c>
 800ce90:	1c59      	adds	r1, r3, #1
 800ce92:	d103      	bne.n	800ce9c <_raise_r+0x42>
 800ce94:	2316      	movs	r3, #22
 800ce96:	6003      	str	r3, [r0, #0]
 800ce98:	2001      	movs	r0, #1
 800ce9a:	e7e7      	b.n	800ce6c <_raise_r+0x12>
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cea2:	4620      	mov	r0, r4
 800cea4:	4798      	blx	r3
 800cea6:	2000      	movs	r0, #0
 800cea8:	e7e0      	b.n	800ce6c <_raise_r+0x12>
	...

0800ceac <raise>:
 800ceac:	4b02      	ldr	r3, [pc, #8]	@ (800ceb8 <raise+0xc>)
 800ceae:	4601      	mov	r1, r0
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f7ff bfd2 	b.w	800ce5a <_raise_r>
 800ceb6:	bf00      	nop
 800ceb8:	20000114 	.word	0x20000114

0800cebc <_kill_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	@ (800cedc <_kill_r+0x20>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	4611      	mov	r1, r2
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	f7f4 fcdb 	bl	8001884 <_kill>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d102      	bne.n	800ced8 <_kill_r+0x1c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b103      	cbz	r3, 800ced8 <_kill_r+0x1c>
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	bf00      	nop
 800cedc:	20002320 	.word	0x20002320

0800cee0 <_getpid_r>:
 800cee0:	f7f4 bcc8 	b.w	8001874 <_getpid>

0800cee4 <_init>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr

0800cef0 <_fini>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	bf00      	nop
 800cef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef6:	bc08      	pop	{r3}
 800cef8:	469e      	mov	lr, r3
 800cefa:	4770      	bx	lr
